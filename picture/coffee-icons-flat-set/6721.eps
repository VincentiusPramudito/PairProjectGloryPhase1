%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1410.i047.014.P.m004.c20.coffee icons flat.eps
%%Creator: Adobe Illustrator(R) 18.0
%%For: IvAN
%%CreationDate: 10/6/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.0.0 x18 R agm 4.7713 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c011 79.156289, 2014/03/31-23:39:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-10-06T14:54:50+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-10-06T14:54:50+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-10-06T14:54:49+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsssc&#xA;UbSSMEjQFmY7AAd8VQ9jqum3/L6ncJMU+0qnce9DviqKxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpL5&#xA;q85+WfKdlHe+YL5bG2mk9KJikkjM9CaBIld+g8MBNJAtiv8A0MH+UP8A1f8A/p0vf+qGDiCeEu/6&#xA;GD/KH/q//wDTpe/9UMeILwlmmgeYdG8w6VDqujXS3lhPX05kDLupoQVYKykHswrkgWNJhirsVdir&#xA;sVdirsVdirsVdirsVdirsVdiqFuNU0+3bjLOoYdVFWI+YWuKoO71PS720ltluVRpBRS4ZRUGoqSM&#xA;VYnbaTfafrVrewo0UKyr9YYD4BGzAMeXTiQcVehAggEGoO4IxV2KuxV2KpR5q1XUNJ0WfULK3S4a&#xA;3BknEjEBIlBZ3oKV4geOU55yjG4i27BCMpVI086038/9H+sU1J7X6uR9q2kHMH5O1D94zCx6+V+q&#xA;O3k5s+zxXpO/mtf8+be4vvR0/wCpusrhLaN5C0jFjRQeLAVJ7DInXZL2iyGgiBuS9XsJbuWygkvI&#xA;hBdOgM0KnkFYjcVzZwJIF7F1kwATXJXyTFLNY8yaNpECTX1wEWQlYlUF2Yr1oFr0rlOXPCAuRbce&#xA;CUzQCF8uec9H8wT3MFiXWS2Cs6SBQSrEjkAGbbbvkcGpjkJA6M82mljAJ6qf5gebB5S8p3vmBoPr&#xA;KWTQc4QaErNcRwsR7gSVGXk00AWwPV5PLP5naNYXd4q3unROZYEjZ4ishFGWTiwYMOhFcdiu4Qll&#xA;+S3kWZGEGho0aVLu801B33Z5MeELxFbffkt5EgYR3OhrGTupWada08GSTfBwhPEUwt/MPl/8r/Kp&#xA;iiAh0yORnhtmLSyySyblI+TAkmnc0Hyw8kc3onlLXG17yzpmtNEIDqNvHceiDyC+ovLjXvTEKU2w&#xA;odirsVU7m5t7W3kubmVILeFS800jBERFFWZmagAA6k4kqBbzm7/5yH/K+3vRbfX5po60e7it5DCl&#xA;PGoVz/sVOUfmYXTk/lMlWQz3Rdb0nW9Oi1LSbqO8spxWOaI1HuCOqsO6ncd8ujIEWGiUTE0UbhYu&#xA;xV2KuxV2Ksd17WpPUa0tm4hdpZB1J/lB/XiqSQW1xcNxhjaRu/EVp88VVLjTr63XlNCyL/NSo+8Y&#xA;qrabqkto3Bv3ls+0kJ3FD1pXFU3W6fS3RgTNpc+8TDcx13p8sVTqKWOWNZI2DowqrDpiq7FXYqp3&#xA;CQPbypcANAyMJVbdShHxA+1MBqt0i72fLlx5ei/elJqxfFxVkqePYHfwzlrN83quMVySLyNpej6L&#xA;5t0vWNZuSdO0+YXM1I2JBiBdGopYmjhT0zKwZxxixs1ajATjNc3q+of85N6RLqUVlo2nSGCVin1+&#xA;8IQcqbcYUJLVan7YPtmyyaw0eEOphodxxmllh5089eadRNjprySR3NYZ5BHxt4o3FGZioqKD3rmv&#xA;hnzZZUDz+TnT02HFG5dPmmukfk7q93bTjX7/AOqyc1+rJZtyAABDl6gfa+Gnyy/F2aSPUa9zTk7S&#xA;iCOAX72eeVfI3l7yzGf0bATcuvCa7lPKVxWtK7ACo6KAMz8Gmhj+nm6/Pqp5fq5dzGv+cg//ACUO&#xA;v/8ARp/1GwZdLk0x5vAPyI8xXFn5obRWYm01ONysfZZoVLhh4VRWB8dvDIxLKQe7+abKW70/Rna2&#xA;lvdGt3u/0pbQRtN+/aP/AESWSFKs6Rtudj8szdPIC+h/FuPkChbrc6b5cnrDLZW02pyy6HZXIIli&#xA;sygqpRviRC3RD02yOcgkd9bpgHzx+bnmefW/Ns0XIi004fV7eKporAAzH5l9q+AGYcju5ERs+sPy&#xA;p/8AJa+Wf+2db/8AJsZYOTWebKsKHYq7FXzf/wA5L+eLufWYvKNrKUsrNEuNQVdvUnkHKNW8VSMh&#xA;h7t7DNfrMm/C7TQ4hXEXg7kvME/ZHX9eQxjhgZdWeWXHkEOj2X/nGvzRe2PnU6DzZrDV4pD6NfhW&#xA;eBDKsg8DwRlPjt4DDo5kSrvXXYwY8XUPqPNk6h2KuxV2KqdzKYraWUdY0Zv+BFcVeb6hqi2lxZRP&#xA;DPcS6hcLboYU58Wep5yGvwoKfE2RlKqZxhd+Txj85vP+rXvmK98t2Vw9toelStatBGxT15ojxlkm&#xA;p9v4wQoOwAzW6nMTIjoHbaTAIxEupSL8vdV8xaFqCanp91JbwA/vLap9K4Xuskf2WU/7WYh1Bxnb&#xA;m5h0wyD1cn0pBHNfRwXlnayG0vIY7mAgFgBKoYoSO6nbN5jnxRB73nckOGRj3Mj0AJdaS9vMvJFY&#xA;pQ+Bo36zk2CL0vTPqCyIJTIjkFQRTj+JxVHYq7FUk863/wBS8r6hKDRniMKeNZTw2+XKuY+rnw4y&#xA;XI0sOLIA8Jl/un/1T+rOcD0AYdIiyIyMKq4KsPY7ZEGi5RFh7X5I/ID8ubK2tNVnjm1u4njjuI5r&#xA;x/3fxgOpEScV6fz8s6mABiD0LyUzISIPMPU7a2trWFYLaJIIUFEijUIoHsq0AyYiAKDXKRJsqmFD&#xA;sVed/wDOQf8A5KHX/wDo0/6jYMjLkyjzfMv5Qf8AkxtH+c//AFDyZCPNnLk+qtO8xadox/052VLq&#xA;RYouKlhzCu+9PZcnKYFX1YRgTddEh8169Y61fRXFi7PbxI0J5KVpIkrq2x8aDGMgRY/FLKJiaP4v&#xA;d8reav8AlKNY/wCY65/5PNlZ5tg5PtH8qf8AyWvln/tnW/8AybGWjk1HmyrCh2Ksb86fmB5e8oWs&#xA;c2qyMZZjSG2iAaRt6cjUgKte5OUZtRHHz5uRg00sh25d75f/ADIafzV5u1DzDbRiBLz0uNs7VYel&#xA;CkX2gAN/Trmmy6oTldO9w6UwgI3bB7PR9Su9WNnDAxuB9pTsFFKciew98zJTAwjfm4MYE5z5PU/y&#xA;70VfJ3mO18x3kq3UlosoFsp9NeUsbRV9Qhq0Dn9nMPFquCV05WbB4keG30b5T836Z5lsjcWfKOVK&#xA;etBJ9pa1oQe6mmx/Vm40+ojlFh02o08sRop5mQ47sVdiqncxGW2liHWRGUf7IUxV4n5q/TNp5js9&#xA;Qs9Ou5ktRCWms544zIfXo8EsT1rGFYOTt06gbrjzh+8EvL8ByYZKxmPn3fbbC/zL/La6TzVeeZYU&#xA;NxoGqSm7EsdW4TS/HLHLT7PxkkHuDt3zX62EoGwNi7TQZIzAiTuEJoPl3VNau0s9OgL9PUkpSKJO&#xA;7yP0VQM12LFLIaDsMuaOONyL1m41i6shDp+l3kq2FjDHbQsrFeYiUKZCB/Md86bHDhiB3PK5J8Uj&#xA;LvZn5ChnTRDLKSfXlZ0r/KKL/wASBybBkeKuxV2KsB/Ny/4abZWIO88rSsP8mNab/S+aztKfpEe9&#xA;2PZ0PUS8sl/un/1T+rNOHbhiGQct9IflNqv6Q8jWHI1ktOVrJ7ekfgH/ACLK50ehnxYh5bPM9oY+&#xA;HKfPdmGZbhOxV2KvO/8AnIP/AMlDr/8A0af9RsGRlyZR5sC/I38rPLtncWGpaxKbnX76wTVtNhjE&#xA;qRwWsoaJqyhvTlZhKvJeNU+kYIhMi9W82aFo1vpX1wxEy2sgkt1LGhkYGLcdxxkOGUAavoiMyLrq&#xA;7RvJnlibTILhIHpODM1ZG2aVi7DYjozEYxiAKH4tZSMjZ/FbPDPzv/K7y1ZjWNc8vXHozaQYJNcs&#xA;JFlfk+oSnhIk7syV+MfuwNhvXoMjIMol7p+VP/ktfLP/AGzrf/k2MmOTA82VYUOxV8xfnPJdap5s&#xA;1mFyaxFIbdCahViVSoFegZqt8znP6vJ++N9HpNFjHgCurz/SNcUKtpeVSVPgWRuhptRvA5RkxdQ5&#xA;EMnQs90S0ijtvX4j1pvtPTfiCaCvh3ysckZOaGu2N5qqWxP7lDuPGgq39MDKO0behflpPJB5ttIo&#xA;jxjmSWKRR3QRlwP+CQZm6CRGUebrtcLxl7Pm/dG7FXYq7FWEfmB5U1K9s5LrRWii1Co4SzIZFj5M&#xA;PVbgPtVSv0/hCWMSIJ5hnHIYggcix7y7p9/o31m0sZGstNhCJp0UZJ4jdnJYlmYM7Vo3TtleGMhI&#xA;g/T0bc04yAP8XVT1HU9ZcG1urhjEP91rRUPvRQAcvpxyVfy95bu9XuBQGOzU/vZyNv8AVXxbFXqU&#xA;EEVvBHBEvGKJQiKOwAoMVX4q7FXYq8V/OjV7m180W8LRcoRaI0RJIBq78u3tmj7SJ8Qe53vZmMHG&#xA;T5vP3192Rl9ECoIry8fozAB3dgcdMH/xXJ/yzD/gj/TLvA82PjeT3z/nGnWL3UNJ1tJIfTs4Z4TC&#xA;wJIMro3qjoOiombXs+JiCOjp+05AyB6vZs2DrHYq7FXn/wCfcayflNrqNWh+qdP+YyHIy5Mo83zv&#xA;5H/NPzh5RaGK0vHvNNgV0j0y6YtAvPeqgcWWh3FDkBKmwxBZNrf/ADkN5n1azW1m06ziQOHJj9Xe&#xA;gIoaufHDxseBV0r/AJyN806dYRWcem2UiRcuLP6taMxamzjxx414GEedfzA81eb5phqd/KunyyCV&#xA;NMiYi3QqKDipqTT/ACiciTbIRp9WflcgT8uvLijcDT7cD/gBlo5NUubKMKHYq8V/O3yddR6j/iW1&#xA;jaS1uFSO/oCfTkQBEc+CsoC+xHuM03aOnN8Y+Lu+zNSK8M8+jxfVtHhvI2dFC3IFVcbcqdmzX48h&#xA;HudpOF+9kflbVFby3E8xJltQYpE/aqrEKPpFMcmxaQCUZpVnN60l5cDi714qeu5qTTIBnOQ5B61+&#xA;VnluZZX1u5TjHwMdkGG7FvtyD2p8I8anNt2dgP1n4On1+cVwD4vSc2zq3Yq7FXYq7FUJcaTp1wxa&#xA;WBSx6stVP/C0xVDny1ojMrSWqyFTVeZLD7iaYqmSRpGgSNQiKKKqigA9gMVbxV2KuxV2KpT5g8q6&#xA;B5ggSHVrRbgREmJ6sjoT14uhVt/DplWXBDIPUG7DnnjNxNMfP5N+Qqf7xSD/AJ7y/wDNWUDQYu77&#xA;XI/lHN3/AGJaP+cevys/6tsv/STP/wA15Z+Vh3Nf53J3s40Hy/o2gabHpmj2iWdlESVijqak9WZm&#xA;JZmPixrl0YiIoOPOZkbKYZJi7FXYqhNW0rTtW06403UYFubG6XhPC1aMvXqCCN9wR0xVgv8A0L/+&#xA;WH/Vul/6SZ/+a8jwhlxl3/Qv/wCWH/Vul/6SZ/8AmvHhC8Zd/wBC/wD5Yf8AVul/6SZ/+a8eELxl&#xA;tfyA/K8MD+jZTQ1obmeh/wCHx4QvGWf2lrb2lrDaW0YitrdFigiXZVRAFVR7ACmSYquKuxVp0R0Z&#xA;HUMjAqysKgg7EEHFWH3/AOUnkS8nM50827sxZ1gkeNDXtwB4qPZQMxJaHETdOZDX5oirTS38ieUL&#xA;bTG02HSoEtGcSMtCXLjo5lJ9TkBtXlWm3TLPy2Ph4a2ajqcnFxXuoWn5eeU7ab1hZ+qwPJVmdnQe&#xA;3Eniw/1q5XHRYgbpnLWZCKtkgAAAAoBsAMy3FdirsVdirsVdiqW+YNdtNF08XVx8TSSx29tCPtST&#xA;StxRF69evyycIGRpEjTWp67a2OpaZpzfHd6pK8cMQ6hIo2kkkPsoAH04xgSCe5SUzyCXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwP8AOKO7h0Cw&#xA;1y2USHQdRt7+SI/tKjcR/wAMw+jMrS1xGJ/iFNeXlfchfOd3JZ+cfJnmaMc7G5c2Ein7S/XF+Bqf&#xA;Jifow4hcJR68/kiR3BejZiNrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqya&#xA;eGCJpZnWONd2dyAB9JxV5r5Y/MXW5/P2r6ZrslpbaB8X6En+yZKSAR1YnbkleXPq32adMAtJp6bh&#xA;Q7FXYq7FXYq7FVsssUMbSSuscairOxCqB7k4CQOaQL5Mc81Jomv6WNLk1S2jtJZonvQJkBeGNxI0&#xA;YIP7RUDDj1MIm7HzTLBMiqKjrX+GNS1XR5rjVbJbTSJXuhbevGOVwoCwGlekdWb50xhqoRB3G/mk&#xA;6eZr0n5J/a61o93L6Nrf29xMQSI4pUdqDqaKSchHJE7AhZYpAWQQjMmwdirsVdirFbzzVqMGqT2L&#xA;wJC0bEwlqtzj7NWtNxiqHvvNuqwWryoIuS0pVTTcgeOKpV/ysHXv5YP+AP8AzVirOdDury70q3ub&#xA;xVSeZeZVKgcSfhNDXqtMVR2KuxV2KuxV2KuxV2KuxV2KuxV2KqGoQ3M9jPDbTG3uXRlhnAB4OR8L&#xA;UIPQ4q8gsNU1nUbk22uzyTT287wSxuaAMu32VoBviqh5h0nTFuGkaGvCKv2m7VPjiqXaFo/5y6zp&#xA;4l8o+YYNO022YwPDduxPMAN8A9C4AUBh0I+WRILIEMn/ACH87eY9aXzBofme6N1rmi3nB5GCKfTN&#xA;YygCKgPCSFt6d8YlZB6vkmLsVdirsVYv+aF7NY/l/rl3CFaWG2LKHBKk8h1oRlGpF4y36b+8D5R/&#xA;5WRrn++LX/gJP+qmaPwQ7+0pvPO+qy3LyNFACx3or06f6+ZePQwlGyS4eTXzhIxAGzOvyN88xw+f&#xA;YX1aWC0s/q84aYhh8XEcRWrdcvxafHhPFbRl1OTOOCh8H1FpHmLQ9YV20u+hu/T/ALxY2BZa9Kr1&#xA;GZuPLGf0m3AyYZw+oUmGWNbsVdirFPO8CvdaU0S1unlMa0+0VNKj8cVSHWoZYbOZJUKOOPwsKH7Q&#xA;8cVY3irPbXypqd1aQ3D61LyaNWgCcuKggEftDt4DFUd5X1TUGubrSNSbnd2e6y93StN/HqN/fFWR&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq8587WNpp3mKG/5rCl+yNKWIVfUSik1O26gYqxjzNqWnOJwl3C&#xA;T6DAUkU70O3XG1pEW3nOHyR+TlzrAK/X7yeWPTIzT455AEVvdUCFz7CmAmkgWmv5A+RZvL/lVtY1&#xA;JS2u6+Rd3UklTIsRq0SMTvU8i7e7b9MEQmReoZJi7FXYq7FWH/m//wCSz8w/8wjf8SGU5/oLfpv7&#xA;wPH/AMlfy98sjytdeePMtst/FG7JYWUgDxUjPAuyH4XZ5DxAbYUr8sLFCMYGcnP1GSRmMcdmfPo/&#xA;kjzk36A1ny9a2c9zbLPZXVqqJLGrJzQJIqIylVPKn2T0Iy3DqRKXCRW1uNm05iOIG96eP/lZ5Fs7&#xA;X86bzytrMS3sNit1Ga8lDhADHJ8JBHJSDSuXyxRltLcNMcsobxNF6h5t0PTPJ/nby5d+XK2815MI&#xA;57FXZgyc0T9osaSByv0bZr8+OOHLEw2vo7PT5ZZsUxPeur2LNu6V2KuxVjdun1/zndSS7x6ZGqQJ&#xA;2DyCpb8T+GKpl5g0+3vtMlimHhwcdVPIbjFXl+oaZd2MpSZfh/YkH2W+RxVmnlDzFZQaF6d/cpEb&#xA;d2SMMfiKUDCi/aNKkYq35elOqeab7V4UKWYjEKswoWaigfgtfuxVluKuxVDalqVhpllLfX8y29rC&#xA;OUkrmgHt7k9gOuRnMRFnkyhAyNDcvKtZ/OOXVJprDQ4XtrcKSb5zSZhUD4FH2OvWtflmoz9omW0N&#xA;vN2+Ls0R3nue5i51PUiam7mr/wAZG/rmB4ku8uZ4ce4Lo9W1WN1kjvJ1dTVWEj1B+/EZZDqUHHE9&#xA;AzHQPzotorsad5hjKceKrqMQqpqoNZUG49yv3DNng7RHKfzcHN2aSOKHyeowzRTRJNC6yRSKHjkQ&#xA;gqykVBBHUHNoDe4dUQQaK7Ch2KuxV5j+dug/4ktdL0b6x9VpP9YM3D1Oxj48eSfz164CLZRNPGNc&#xA;/JD6szP+mufCEvT6tSvHkaf3x8MjwJ43s/k7yP5T81+R/Lqa/Y/X30KP6rbBpZ0jrEQC5iR1RufA&#xA;V5A+GSpjb04AAUHTCh2KuxV2KuxVh/5v/wDks/MP/MI3/EhlOf6C36b+8Dyr8kvOGgal5MuvIerX&#xA;cen3fNn0+WUhUlDuJAoJIBdZf2a7jp3zDxGM8Zxk052ohKGQZALeg/VNN8msnmHzRqdvBBp1r6Fo&#xA;qMS8lAQeIYKzN8RVVUHJ4NKYSEpHkKDRm1IlExiOZt4V5ImvvzA/OS/vre9l0iTUfrNxFMgLOkSg&#xA;BIzxeP8AYAB+LLcuM5BQPC14coxmyOJ7/wCV/wAqrTSdXXWNS1GXWNRi/uJJlKqhpQMQzSFmHarb&#xA;ZXh0QhLikeItufXmceGI4Ys6zOcB2KuxVjFzMNG81NdT/DYaoio0v7KSpQDke3T8fbFU+1Ag2TkG&#xA;oPEgj/WGKsc1G9t7S1eWehFKKh/aPYAYq7y55RsHsUu9Tt/Uu5yZODFgFVjVRxBA998VZTDDDBEs&#xA;UKLHGuyogCgfIDFV+KuxV8//AJz/AJl2Oo6//hK2BWLTZC11clqI9wFp6YX/ACATue+2ajtDJxek&#xA;dHddm4uH1Hq83s/M2n22pQqjGZnYRkJ9n49h8R26nNaMR5uznMHZkB8wtvSAe1W/syFr4Th5hoav&#xA;CAv7R5dPfcY2pxMaj8xaffTu/L0XkYsEk26npXpk5YiEwyDk9p/Ij8ybPUDL5OlVhcWYkmsbjlyS&#xA;WPkDInsVZiR4jwpm50GT08B5uk7RxerjHJ7JmwdY7FXYqwLzs3PzNZxjfhEh+nmxxVjXmheQkXxt&#xA;2H38sVZL+TM3PyvcRk7xXbgD2aND+uuKs9xV2KuxV2KuxVI/O+gT+YfKWq6LbyrDPfW7RRSPUqG6&#xA;rypvSoyGSPFEhsxT4ZAvmr/oXD8zP98Wn/SQv9M135Sbtfz2NDyf841fmgzlhBaUP/Lyv9MzMWMi&#xA;IBdfmyiUiQz78k/yT84eVPOB1vWzbw28NvJFHHFJ6ru8tB2AChQMtjFplJ73k2DsVdirsVUL2xtL&#xA;23a3uoxLC3VT4+IPUH3xVhUPlzzraxNbwXI+rjYJ6lVoD2DDbFUZoHlXUV1M3mtcZ1jX9yGcvSSo&#xA;INOlAK4qzDFXYq7FXYq+efzV/wCcfvNWrebLvWvLcsEtrqL+vPBNIYpI5m3fcghlZviG+3Sm1cp8&#xA;EWT3t/jyIA7ktT/nFvzfS2Y6vYKzKDdD99WN+4SiUce/w5iy0RvY7ObDXitxuyG5/IfzXEUEF5aX&#xA;Q4jnIS8R5d/h4vt4b5iT7MnexFOVDtWFbg2s/wCVAeabuyuIptRtLSR14x0DzVr1rsnHb55LH2bK&#xA;7JCMnakKoAscuv8AnF7zrHp80sOpWEt6rAQ26mUB035H1GReLdKClPfMvHpCDZcTLrgRUQzD8kvy&#xA;S17yrrcmveYpYPrEcTw2VrCxkKmTZpHegA+GoAFevbMmOICXF1cOWYmPD0e25a0uxV2KvKvPei/m&#xA;1cebZbzy5ZaZPpipGtu927rISE+PkFdf2iaYDaRTHLvyx+fl04eTTdFBC8fhlk6bnvKfHBunZnH5&#xA;P+W/OGhaZqEPmWK2hmmmV7dbVy68QlGLVJ3rhFoNPQMKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYqx2/v9Xl+v28c0dujcksriIEyKDGBzfntyVyaU7Zr8uolZAdhiwR&#xA;oEhfpd/cWOn6fYymbUZ1McE925HMg7eq3UtvSvtvlmDPsInctefBZMhQHcn+ZjhuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxVI5vO/lWGZ4ZdQRZY2KOvGTZlNCNlzGOrxg0S5A0uQi6Qs35l+R4X4S6r&#xA;GrUrQpL0/wCAwfncX85kNFlP8KN0Tzj5a1y4kt9Kvlupok9SRFV1otQK/Eq9zlmPUQmaibYZdNPG&#xA;LkKTnLmh2KuxV2KpTceb/Kdsrtc61YQrGaSGS6hQKa0+KrCm+KoP/lY/5ef9TRpH/Sfbf9VMFhNF&#xA;fF+YXkGWRY4vMulSSMaKi31szE+wD42tIv8AxX5W/wCrxY/9JMP/ADVhQjbO+sr2H17O4iuYalfV&#xA;hdZFqOo5KSMVV8VdirsVSrzXD63l6+Twj5/8Awf/AI1xV58slLP1OtI6n6BmHMblzIHYJBF9sZTp&#xA;xcw5GpNQL2jRpbV9MtltpUlSKNIyyEMAVUChpmydWjcVdirsVdirE/PH5iaf5TltIbi2kupLpXcL&#xA;GyrxVCBU1/mr+GYmp1YxVYu3M0ujlmsg1TF/+V/aP/1arj/g0zG/lSPcXK/kmX84J35P/NfTPMus&#xA;jS4rOS1laJ5UaR1PLhSqgD2Ncvwa6OSXDVNGo0EsUeIm2c5muA7FXYq7FXYqhdUfUVsJjpqJJe0p&#xA;AspolSQKk+w3yGTi4Tw82ePh4vVyfMmueeNEtNb1C01GcpqFvczRXirG5AmSQrIAVFCOQPTNJLR5&#xA;CbNO5jq8YFBKbjzl5LuJPUlmdmpSvCUbfQMj+RyeTMa+AZx+TmtwXnmOdfK3GaeOANexzB0Bt/UU&#xA;HiW/aqRTMjTafLjlYAaNTqceSNEl9B5uHTuxV2KuxV8zfm5oxtdR8wWgX4X9S4iH+S49ZQPlWmA8&#xA;kjm8IyltTzyZB6vmG3NKrEHc/QpA/EjJR5olyehQXgl1S7tlNRbxwlh4NIXJ/wCFAyxrey/kgT9U&#xA;1YV2EkO3+xfCh6birsVdiqG1SP1dMu4/54ZF+9CMVfFv5hSXMHm3UUSV1QlHUAkD4olY038Tmqz7&#xA;ZHdaffEPijvyXinvPNzq7swFuwHIkjk8kaj8Cc2EBu6qZ2fTH1MeX/NlnHZMRaX9FeEkmlTxpU9a&#xA;GhBy1qZrirsVdirsVfPX50aibvzxNBWq2MMUC06br6p/GXOf7RneWu56Ps2FYr7ywTMF2Cf/AJb6&#xA;k1n+YFg2wWNFLN34zSrG/wDwozL00uGUT5uDrBxRI8n1DnRvNOxV2KuxV2KuxV8e/md5M1p/zB8w&#xA;S29kXhmvZZkf4Fr6rc60Jr+1175p8+UiZFu70+OJgDQYXd+Vddil4taFDQGnJP8AmrLcOpiB6pNO&#xA;fTSMvTHZ7Z/zixod9aavr9zdQmOlvBEhqrD43djuCafYzMw5YzvhNuFnxShXEKfRWXuO7FXYq7FX&#xA;mX5y+VpLu3i1q3i9QQoYL5VFT6RqVc07LUg/MYq+RL+0ks7ya1kFHhcqfcDofpG+UluDJfI6RWkd&#xA;7q9yeEESekrnuSQzAe+y5KPexl3Jh5IvZL2+1e7k2aZ4mp4D95QfQNsMSiQfQv5If7y6t/rw/qfJ&#xA;sHp2KuxV2KtOvNGXpyBH34q+K/zSQL5rnI6vDGT8+NP4ZrNT/efJ3Gk/uvmmf5DPFD5jubuVWMcC&#xA;wlyvXj6oYgV2qeO2Z8HVzfR2nm98xeYYNUaFoNOs/wC6LftEEkUPclutOgyxrZpirsVdirsVec+c&#xA;Py18jG5vPMGu6pdWazyc5X9WFUDEUCoDEzHpsNzmHLs2OWZPqs/juc/H2lPHEACND8d6SeXvy4/K&#xA;rzD6g0bW7y7aIVkjDxo4B2rwkgVqe9ME+x4w58X2fqZR7YmeQj9v63nt5pFtoP5ra3pljJLJb2MM&#xA;AgeYhnq0cUpqVCj7bntms1OMYzwjo7DDlOSPEer6ijcPGrjYMAR9O+b8F54hvCrsVdirsVdirxT8&#xA;xIvT8339Oj+kw+mJa/jnP64VlP46O+0R/dB53rv+9o/1B+s5hF2OPk9W/wCcf4aWOsz7fHLAnv8A&#xA;Arn/AI3zcdljaR9zp+1jvEe96zm1dQ7FXYqh9R1Cz06wudQvZRDZ2kbzXEzdFjjBZjt4AYq8jtfz&#xA;/wBZ1W4D6H5IvbzRJJfSTWJ5XggArxLSMsE0a08OZPbrkeJlwqGtaV5t1bUZb+zudIsLSahgtJNK&#xA;t7l0QCgDSyjkx99vkMSCoIYX+a+heY38kwQXbWd1Lptw1001laLZ8oGXiwaOP4SYz8Vdtq+GCQ2T&#xA;E7sD/Lf/AKWP/PH/AJmYwWb6N/JD/eXVv9eH9T5Ng9OxV2KuxV2Kvmrz1+U2ratq5vWkNknpiNUk&#xA;iJJCE/FXkvjmLl0/FK7czDquCHDSZ/lD+WWp+X9Z+tmQ31rPLCHdIiET0mJPI1YftZkRjTiylb6C&#xA;yTF2KuxV2KuxVhv5m+VNT1/TLU6dHBdT2UplNhd1EUwZeNOSlCrDt8Q775kafIInfq15I2x38uPI&#xA;/mmz8xLq+sabZaPDbRvHBb2nAO/qDjRjE8gZR1q7Fq0y3PmiY0CSxhA3Zee+a/8Aydfmj/jHB/yY&#xA;gzltf9Zej0f92H0lbf7zRf6i/qzdx5OjlzVMKHYq7FXYq7FXz3+evm1tD87rbGy9cT2cM6yepw2L&#xA;OnTi1f7vrmn12K8l+TudBL938Xk2p+fvXuQ/1Dj8IFPVr4/5GU49Dxi7+xvya7wzVX8X0L/zjdem&#xA;/wDJV9emEw89RkjVeXKqpDEa1ovdiM2mkweHEi73dVrNR4sgarZ6xmU4jsVdiqS+dfL7+YfKWraJ&#xA;HIIpb+2khikP2VkI+AtT9nlSvtgISHj/AJcPnKLyb/gvzBYny/Loy+nZ6jxMqXHqeoFdAtEb0u5V&#xA;zyqOneNGqZWAb5sb/wCVVXf/AFOdx/yJl/6r5i/lD/O/Hzc387H+Z+PkmOh/l82nXbyXfmaTULSW&#xA;J4Z7SaB+LK4p1aV6fdlmLAYm7tqzakTFcNfj3PILi607SLS+sLKeYajHcPEt1CzxrIkchCv8LU4l&#xA;Ogp3ye7VtT3P/nFO9vLqw8xtdTyTsstqFMrs5AKy9OROTgwm95ybB2KuxV2KsJ89mdbqP1lieBkP&#xA;ocjRgf2uo8cVVfy6jvhbXEjOPqRPFI+/qDqfuxVmOKuxV2KuxV2KvnnzR+YfnS08zava2+qyx28F&#xA;7cRQxgJRUSVlVRVewGc/m1eQTkAepejwaPEccSY70Es/5WZ57/6vE33J/wA05X+cy/zm38lh/mpB&#xA;pOoXuo+edVvb2Uz3U0EZllalWIWMdvYY5JmUQTzYiAjsOT60tv8AeaL/AFF/VnRx5PNS5qmFDsVd&#xA;irsVdirxX88fym81ecPMljqeiRwPHDZi2mMsvptyWV3GxHT95mHqcEpmw5+k1EYRIPe8ym/5xr/M&#xA;93qILSnT/ehf6ZLDilGNFhqM0ZysPfPyW8mat5Q8kR6TqyxpfG4mnlETc1o5AX4vHiozJiKcSRtn&#xA;eFDsVdirsVeI/mr+V/nzzReahLYJAyXEiLD6kwWkMdKDpt9npgISC8z/AOhaPzQ/3zZ/9JC/0yHA&#xA;WfGERp3/ADjr+aNjf292Le1cQyKzKlynIrX4gK0HTERKmQR3mb/nH78w9U1AXdrZ28QMYWUSXEYJ&#xA;ZSd/hLdqDDKNojKnqX5Dflpr3kjS9UGtPF9a1GWNkghbmESFWALPsKsX6DDEUiRt6lkmLsVdirsV&#xA;Y3r1n5g1EtClpELZC3psZRVuoDEFdtu2KrvK1l5g06JbG8iiNmpYpIr1da1NKdwTirIsVdirsVdi&#xA;rsVeGeYvyi85X/mDU763jgMF1dzzwlpQDwkkZlqKeBzR5dBklMkdSXfYe0MUYAG9gEu/5Ur55/31&#xA;b/8AI4f0yH8nZfJt/lPF5/JS038mvPtjrNxeizjcTKsZ/fxAcVVRt8Va1XuMkdFloCvta/z2E739&#xA;j6GgVlgjVhRlUAj3AzeDk6E81+FDsVdirsVdirsVdirsVdirsVdirsVdirsVdiriabnpirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiriQBU7AYqg9T1&#xA;GC0027uvXii+rwyS+pLVo14IW5OE+IqKb03xV5N+XH5lfmH5p8scYbW2nv8A67JbP5hmaCO0hiXi&#xA;5LWqyrPJIqtRQqKDUVOxJiCSyIAZL5i8l+fPMmh3Ok3Hm+0itLoBJ5LTTHSQqCCU5fXW2bow7jBO&#xA;HEKZY58JsBlvljSLrR/L9hpd3fPqVxZxLC99IpVpeOwYqWc9NvtHDEUKYylZtM8kxdiriabnpiqU&#xA;+aPM+neW9Bu9bvVkltbJVaWOAK0hDOEHEMyDq3jkZzERZZ44GcqDzX/oaLyB/wBW/Vf+RNt/2UZj&#xA;fnIdxcv8hPvH4+Cj/wBDV/l5/wBW7V/+RNt/2UZk8YcPgL1Dyp5lsPM/l6z12wjlitL5WeKOcKsg&#xA;CuyHkEZ16r2bCCghNsKHYq7FXYq7FUgh8320vnKfyuLdxPBALg3FRwIIU0p1/bzHGcHIYV0cg6cj&#xA;EMl9U/zIcd2KuxV2KuxV2KuxV2KoX9K6d+jP0p9YT9H+l6/1mvwenTly+7JcJuuqL6orIpdirsVd&#xA;irsVQuq24uNMu4D0khddutSppirw/wCpXn/LbJ/wK/0xVjF4pW7nVm5MJGBY9SQx3xV7L+TdtHH5&#xA;XmnCUkmuX5Pv8QRVC/dU4qzzFXYq7FXmn58eddW8p+WbK702OGSS4uvRkWdXZeIid/2HjPVcpy5D&#xA;Gq6lvwYhO76C2M61NJrv/OP9x5lu+KXt3bh5IogRECLsR/CGLN0X+bBnP7sstMP3ofPumaHrOquy&#xA;abZTXZT7foozhf8AWIFB9OaqMDLkHczyRjzNKn+APOP/AFapv+F/rm34S6LiD69/J3TL/TPy10Kx&#xA;v4Wt7uKF/Uhf7Q5TOy9PFWBywcms82ZYUOxV2KuxV2KsDs9I1FfzgvtSaEixexVFmqtC3GMUpWvV&#xA;T2zCjil+YMq9NOfLLH8uI36rZ5ma4DsVdirsVdirsVdirHPzHkv4/I2tPYchci2ahT7QSo9QinhH&#xA;yy7BXGLYT5Fh3m/U4G/Kry5eWQY6Ms+njUI0r/vNECHRqeEqKvzy/FH97IHnuwkfSHqUckcsayRs&#xA;HjcBkYbggioIzCbl2KuxV2KuxV2KvFfOmnahpetzQ6bKlxbN8YjAHOIsT+7avWmKsLEZn1AR3Eiw&#xA;GWXjNK32ULNRmNK7L7Yq+jPLekWWkaJaWFm4lgiSomFD6hc8meo/mJxVMsVdirsVeK/85U/8oZpf&#xA;/Mf/AMyJMxtT/D/WcvS/xf1SjvJfl5/MX/OO9joyzCA3Vs4MpFeIS7aQ7fJNssnDijTVjycE+JPt&#xA;P0vy/wCUfLlhDDZCZrh1gsrQEKGZ/wBp28T1ZjXIZMgxRAA8gyhCWWRJKGntNG1nQ7nVNMtzZXVi&#xA;5S6tq1UhepH0bg7YcGcZBYY58Jxmme6V/wAcuz/4wR/8QGXtKKxV2KuxV2Kpdq3mDRNKhd9Q1C2s&#xA;+PEfv5Uj+KQkJ9oj7RG2C00XmWnebdOs42vprz1ZWuVH7qs0rO5XoqcmbrVqdsiMkTyNspYpDmKZ&#xA;9oPnbSdYf00hurORi3pJeQSQF1Q0LfGBx9g1CchDNxGqI94ZzwmIuwfcWQZc0uxV2KuxV2KuxVBa&#xA;48sei6g8MJuZVtpmjtwKmRhGSEA78jtkocwg8mG3Pk3ULP8AKmHypAqz30yxQSNuY0ee4Eksh78Y&#xA;ubGvtmQMoOXi6NfD6aZxp9nHZWFtZRkmO2iSFCepWNQor92Y0jZtsAV8CXYq7FXYq8Z/Pj8yX0q3&#xA;by/Z/XbS+LRynULZwiemyMCjUYNvXoRTMDVagg8Mfqdlo9MCOKW8Xzx/ijzD/wBXCb/gsxfGn3lz&#xA;fy+PuCw+YtbJJN5ISeprj40+8r+Xx9wegflH+b1z5Z1WaPWZby/0+5j9K3tI2UokzyL+84uyj7Ip&#xA;UZdh1BB9Vloz6USHpAD6wzZundirsVeZ/n/5M1rzR5Ljj0eI3N7YXAufqq05yJ6bowSvVhyBp3+e&#xA;U5oGVV0LkYMgjd9QmX5T6ff6d+U+lWV/bS2l5DbTia3nRo5EJlkI5IwDDY1y2PJolzV761sdd0m2&#xA;tLi5FndWMiyQyt9khdqGpHUZRqMHiAeTdgzeGfel9zc6Zoui3tjbXaX+oanI0l1NEAI159QKFhSm&#xA;wFcODD4YPUkoz5uMjuDOdK/45dn/AMYI/wDiAy9pRWKuxV2Kse80+Yv0bJFaqxjeVS7SAVotaAfT&#xA;irzi98t+Q9RuJbi70+CS5uGLzTFGR3ZjUszihr9OVzwxlzDbjzzhyKItbPy3ozc9Ms4lnMaxc0G4&#xA;jXovM1NPYYMeGMPpC5M05/UUQNePeH/hv7MtamZeStWN7HcQjlwh4EBv2eVdgfoxVk2KuxV2KuxV&#xA;KvMbXMdkksEjxlHHMoSuxFN6e+Ksb/SOof8ALVL/AMG39cVSnWdY1aOWMR3twgK7hZXHf2OKpf8A&#xA;pzW/+rhc/wDI6T+uKsv0TVtdsYNMGoBZ7TUHCRys7tOGkPwluRpT5dsVZhirsVdiqU+abK0uPL2q&#xA;CaFJOVnOCWUE09Ju/XITAos4E2HxtY+WdMntIZX5hpFDMeWwJ+jNBLVzBq3pI6PGRdNy+WvLwv3t&#xA;IrlpnVQwKOCCCK0G3UZM6vIByDVHR45Hr830F/zjhp9mPIt4jQpJ6Wq3UaM6hm4qsYG5GbnAeKAJ&#xA;6h0moHDMgdC9cy5odirsVdiqncxGa3liB4mRGUN4chSuKvI7q51O2nkt53ZJYyVdSB1H0Yqh7W2n&#xA;uriO3gUvLKwVFHicVeyW0IgtooRuIkVAf9UUxVUxV2KuxVIPOek2l3o13eOhN1ZW8ssDqaElELBW&#xA;8VJGKvGk1yVN7m2Kp/Mh5U+Y/txVTu/Ma8ALVDyP7cg2+gA4qoweZLhdp41kHYr8J/jir3Lyjose&#xA;m6Yrh/UkuwkrtSlAVqqjr0riqeYq7FXYq7FUFq1/ptrb0v3KwzVTZXeu3+QGpirBbrUdJjmIguvW&#xA;i/Zbg4NPAgqMVSfVbmCeVGibkAtDsR398Vb0e20ua5H6Suvq9uvUKrs7+y8VYD6cVZ7omg6C7RX9&#xA;rJNdCIkQmctRWHcKwXFWQ4q7FXYq84/OD8xbby/otxp1jd2n6bnAje0uw/8AcSowZl4tHv0oan5Z&#xA;i6nPwihzczSafjNnk+Slu7pQFWZwo2ADGg/HNVwh3XEVEmbmXE0gYmtQxrU5eMgArhDjywkm+KXz&#xA;e3f848/mXZ6Kt35f1q6t7TTGL3dvcy8/We5laNChapUjiK/Zr75lYNT0NAOFqNJQuNkvpTM51zsV&#xA;dirsVdiryPzf548jWuvX9nqGoRR3dvIUkjZJCykDpVVyo54A0S3R08yLA2SvyF508r3/AJu060tN&#xA;QSa5ldhHGoepIjY91HYZZYaqL3DCh2KuxV2KofUbQXmn3NoTxFxE8Rbw5qVr+OKvBr2zubK6ltbl&#xA;DHPCxV0PiP4HtiqU6r/ur/ZfwxVZo+k3mralBYWaF5p2Cig2Ud2b2UbnFX0tbwrBbxQLusSKik9a&#xA;KKYqqYq7FXYq7FXYqgL/AEDR788rq1R368xVGPzZCpOKoP8AwV5Z/wCWP/kpL/zXiqPsNH0uwWlp&#xA;bJEf5gKv9LNVvxxVGYq7FXYq7FWMeZPy08keZbs3et6aLu4IVfU9aeM0XYf3ciDKZ6eEjZG7fDU5&#xA;Ix4Qdvgk3/Kg/wApv+rF/wBPd5/1Wwflcfcy/OZe/wC53/Kg/wApv+rF/wBPd5/1Wx/K4+5fzmXv&#xA;+5dH+Q/5UxyLImh0dCGU/WrzYg1HWbH8tj7l/N5O/wC5n2XuM7FXYq7FXYqwvWPya/LbWdTuNT1L&#xA;R/Xvrt/UuJvrN0nJjtXikqqPoGUywQJshvjqcgFA7NaF+TP5a6Dq1vq2laP9W1C0Ja3n+s3T8Syl&#xA;T8MkrKdmPUZbwhp4izXCh2KuxV2KuxVL9U8v6NqtPr9ok7KKK5qrgeHNSrU+nFUql/LbyXLT1NO5&#xA;cen76cdflJiqaaP5d0TRkKaZZx23LZ3Wpdh4M7EsfpOKpjirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:fb964425-0dca-9a43-9696-714256cde5d6</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:fb964425-0dca-9a43-9696-714256cde5d6</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:300E96A4C74BE41193BAF44A7CC9A2A2</stRef:instanceID>
            <stRef:documentID>xmp.did:300E96A4C74BE41193BAF44A7CC9A2A2</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F92D1EB10E4BE411888FBE61FA1F9F85</stEvt:instanceID>
                  <stEvt:when>2014-10-03T23:05:20+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:300E96A4C74BE41193BAF44A7CC9A2A2</stEvt:instanceID>
                  <stEvt:when>2014-10-04T21:09:15+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fb964425-0dca-9a43-9696-714256cde5d6</stEvt:instanceID>
                  <stEvt:when>2014-10-06T14:54:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
386.115 72.7885 mo
379.586 64.5411 368.905 61.9986 361.594 66.6947 cv
361.556 66.7188 361.518 66.7435 361.481 66.7682 cv
361.126 67.0014 360.776 67.2458 360.437 67.5134 cv
353.138 73.2935 352.802 85.0249 359.685 93.7174 cv
366.195 101.94 376.832 104.492 384.142 99.853 cv
384.226 99.7989 384.31 99.7437 384.395 99.6879 cv
384.724 99.4686 385.049 99.2402 385.362 98.9915 cv
392.661 93.2119 392.998 81.4805 386.115 72.7885 cv
cp
.419608 .188235 .0627451 rgb
f
410.764 65.6551 mo
410.727 65.631 410.688 65.6064 410.651 65.5822 cv
410.293 65.3522 409.927 65.1318 409.545 64.9313 cv
401.297 60.6127 390.443 65.0728 385.299 74.895 cv
380.432 84.1864 382.424 94.942 389.635 99.7346 cv
389.717 99.7903 389.802 99.8439 389.888 99.8971 cv
390.221 100.11 390.562 100.314 390.918 100.499 cv
399.165 104.819 410.02 100.359 415.164 90.536 cv
420.044 81.2177 418.027 70.4257 410.764 65.6551 cv
cp
.678431 .364706 .156863 rgb
f
393.497 39.2083 mo
393.455 39.1916 393.412 39.1756 393.372 39.1584 cv
392.976 39.0045 392.573 38.8603 392.159 38.7396 cv
383.219 36.1378 373.462 42.6588 370.363 53.3046 cv
367.432 63.3744 371.512 73.5236 379.529 76.794 cv
379.621 76.8321 379.715 76.868 379.809 76.9039 cv
380.178 77.046 380.552 77.1784 380.937 77.2905 cv
389.876 79.893 399.634 73.3718 402.733 62.7262 cv
405.673 52.6263 401.56 42.4477 393.497 39.2083 cv
cp
.231373 .192157 .160784 rgb
f
379.539 75.2377 mo
379.542 75.0806 379.549 74.9149 379.554 74.7417 cv
379.581 74.5712 379.61 74.3932 379.64 74.2077 cv
379.698 73.8313 379.789 73.4287 379.879 72.9853 cv
380.111 72.1393 380.492 71.1399 380.949 70.2215 cv
381.413 69.2806 381.819 68.4184 382.136 67.5525 cv
382.28 67.1204 382.365 66.7188 382.496 66.314 cv
382.528 66.2186 382.56 66.1199 382.588 65.9548 cv
382.689 65.5168 li
382.759 65.2229 382.827 64.9265 382.896 64.6274 cv
383 64.1775 li
383.054 63.9512 li
383.057 63.9373 li
382.953 64.2612 383.029 64.0198 383.006 64.089 cv
383.009 64.0639 li
383.017 64.015 li
383.029 63.9175 li
383.066 63.6564 383.101 63.3936 383.138 63.1299 cv
383.175 62.8688 383.214 62.606 383.253 62.3417 cv
383.296 62.0812 383.277 61.8416 383.294 61.5911 cv
383.304 61.3445 383.324 61.0973 383.344 60.8507 cv
383.327 60.6015 383.314 60.3527 383.306 60.1039 cv
383.311 59.645 383.217 58.9941 383.177 58.4306 cv
383.131 57.6977 383.036 57.0549 383.067 56.2147 cv
383.071 55.8153 383.077 55.4201 383.096 55.0212 cv
383.15 54.595 383.206 54.1683 383.277 53.748 cv
383.382 53.1201 li
383.42 52.9228 383.449 52.6756 383.502 52.5491 cv
383.599 52.2451 383.696 51.9438 383.79 51.6436 cv
383.885 51.3438 383.98 51.0457 384.075 50.7493 cv
384.11 50.6382 li
384.127 50.583 li
384.137 50.5557 li
384.142 50.5417 li
384.231 50.2045 384.172 50.4394 384.191 50.36 cv
384.303 50.115 li
384.521 49.6304 li
384.831 48.9902 385.057 48.3607 385.432 47.7645 cv
385.822 47.1732 386.152 46.5753 386.571 46.0596 cv
387.01 45.5701 387.416 45.0339 387.84 44.6576 cv
388.259 44.2828 388.686 43.8716 389.033 43.5961 cv
389.788 42.9885 390.376 42.4616 390.929 41.9517 cv
391.179 41.696 391.412 41.4418 391.653 41.2081 cv
391.774 41.0869 391.888 40.971 391.997 40.8606 cv
392.099 40.7293 392.194 40.6043 392.286 40.4858 cv
392.647 40.0093 392.973 39.65 393.177 39.3986 cv
393.27 39.2881 393.343 39.205 393.4 39.1428 cv
393.003 38.9879 392.602 38.8447 392.188 38.7236 cv
383.249 36.1211 373.49 42.6422 370.392 53.2879 cv
367.459 63.3583 371.541 73.5075 379.556 76.778 cv
379.555 76.7426 379.554 76.7142 379.551 76.6744 cv
379.548 76.3506 379.516 75.8606 379.539 75.2377 cv
cp
.419608 .188235 .0627451 rgb
f
393.525 39.1921 mo
393.531 39.2758 393.537 39.3841 393.542 39.5272 cv
393.544 39.8511 393.576 40.3374 393.563 40.9362 cv
393.561 41.0863 393.559 41.2446 393.556 41.4101 cv
393.526 41.5818 393.497 41.7618 393.467 41.9495 cv
393.406 42.3313 393.313 42.7441 393.214 43.2009 cv
392.974 44.0592 392.6 45.0479 392.14 45.9685 cv
391.93 46.4049 391.712 46.8595 391.486 47.3297 cv
391.266 47.7838 391.137 48.1989 390.951 48.6374 cv
390.802 49.084 390.683 49.5483 390.54 50.0014 cv
390.415 50.4673 390.329 51.0055 390.212 51.5063 cv
390.128 51.8886 li
390.086 52.0799 li
390.106 52.0098 390.041 52.2537 390.127 51.9261 cv
390.125 51.9406 li
390.122 51.9695 li
390.113 52.0269 li
390.095 52.1417 li
390.046 52.4489 389.999 52.7576 389.949 53.0686 cv
389.902 53.379 389.853 53.6933 389.804 54.0063 cv
389.766 54.186 389.788 54.26 389.785 54.3779 cv
389.783 54.7028 li
389.783 54.9194 389.766 55.1322 389.748 55.3461 cv
389.765 55.5918 389.782 55.8442 389.788 56.0914 cv
389.783 56.5503 389.879 57.2012 389.919 57.7653 cv
389.966 58.4987 390.064 59.141 390.031 59.9811 cv
390.028 60.38 390.025 60.7778 390.004 61.1735 cv
389.949 61.5665 389.894 61.9584 389.839 62.3488 cv
389.771 62.7321 389.731 63.1353 389.634 63.4939 cv
389.527 63.8478 389.42 64.1989 389.315 64.5491 cv
389.206 64.896 389.099 65.2412 388.993 65.5833 cv
388.86 65.9999 li
388.762 66.2101 li
388.564 66.6272 li
388.433 66.9043 388.301 67.1794 388.173 67.4512 cv
388.034 67.7391 387.952 67.9546 387.723 68.3107 cv
387.322 68.9508 386.957 69.6118 386.534 70.1415 cv
386.095 70.631 385.686 71.1661 385.264 71.5442 cv
384.846 71.9194 384.417 72.3279 384.07 72.6046 cv
383.314 73.2148 382.731 73.7311 382.17 74.2543 cv
381.911 74.523 381.676 74.7873 381.433 75.027 cv
381.311 75.1497 381.197 75.2677 381.087 75.3802 cv
380.988 75.5035 380.895 75.621 380.805 75.733 cv
380.453 76.1845 380.128 76.5399 379.923 76.7919 cv
379.891 76.8284 379.866 76.8568 379.839 76.8879 cv
380.207 77.03 380.581 77.1624 380.966 77.2749 cv
389.905 79.8768 399.664 73.3552 402.762 62.7101 cv
405.702 52.6102 401.588 42.431 393.525 39.1921 cv
cp
f
380.805 75.733 mo
380.895 75.621 380.988 75.5035 381.087 75.3802 cv
381.197 75.2677 381.311 75.1497 381.433 75.027 cv
381.676 74.7873 381.911 74.523 382.17 74.2543 cv
382.731 73.7311 383.314 73.2148 384.07 72.6046 cv
384.417 72.3279 384.846 71.9194 385.264 71.5442 cv
385.686 71.1661 386.095 70.631 386.534 70.1415 cv
386.957 69.6118 387.322 68.9508 387.723 68.3107 cv
387.952 67.9546 388.034 67.7391 388.173 67.4512 cv
388.301 67.1794 388.433 66.9043 388.564 66.6272 cv
388.762 66.2101 li
388.86 65.9999 li
388.993 65.5833 li
389.099 65.2412 389.206 64.896 389.315 64.5491 cv
389.42 64.1989 389.527 63.8478 389.634 63.4939 cv
389.731 63.1353 389.771 62.7321 389.839 62.3488 cv
389.894 61.9584 389.949 61.5665 390.004 61.1735 cv
390.025 60.7778 390.028 60.38 390.031 59.9811 cv
390.064 59.141 389.966 58.4987 389.919 57.7653 cv
389.879 57.2012 389.783 56.5503 389.788 56.0914 cv
389.782 55.8442 389.765 55.5918 389.748 55.3461 cv
389.766 55.1322 389.783 54.9194 389.783 54.7028 cv
389.785 54.3779 li
389.788 54.26 389.766 54.186 389.804 54.0063 cv
389.853 53.6933 389.902 53.379 389.949 53.0686 cv
389.999 52.7576 390.046 52.4489 390.095 52.1417 cv
390.113 52.0269 li
390.122 51.9695 li
390.125 51.9406 li
390.127 51.9261 li
390.041 52.2537 390.106 52.0098 390.086 52.0799 cv
390.128 51.8886 li
390.212 51.5063 li
390.329 51.0055 390.415 50.4673 390.54 50.0014 cv
390.683 49.5483 390.802 49.084 390.951 48.6374 cv
391.137 48.1989 391.266 47.7838 391.486 47.3297 cv
391.712 46.8595 391.93 46.4049 392.14 45.9685 cv
392.6 45.0479 392.974 44.0592 393.214 43.2009 cv
393.313 42.7441 393.406 42.3313 393.467 41.9495 cv
393.497 41.7618 393.526 41.5818 393.556 41.4101 cv
393.559 41.2446 393.561 41.0863 393.563 40.9362 cv
393.576 40.3374 393.544 39.8511 393.542 39.5272 cv
393.537 39.3841 393.531 39.2758 393.525 39.1921 cv
393.484 39.1756 393.442 39.1589 393.4 39.1428 cv
393.343 39.205 393.27 39.2881 393.177 39.3986 cv
392.973 39.65 392.647 40.0093 392.286 40.4858 cv
392.194 40.6043 392.099 40.7293 391.997 40.8606 cv
391.888 40.971 391.774 41.0869 391.653 41.2081 cv
391.412 41.4418 391.179 41.696 390.929 41.9517 cv
390.376 42.4616 389.788 42.9885 389.033 43.5961 cv
388.686 43.8716 388.259 44.2828 387.84 44.6576 cv
387.416 45.0339 387.01 45.5701 386.571 46.0596 cv
386.152 46.5753 385.822 47.1732 385.432 47.7645 cv
385.057 48.3607 384.831 48.9902 384.521 49.6304 cv
384.303 50.115 li
384.191 50.36 li
384.172 50.4394 384.231 50.2045 384.142 50.5417 cv
384.137 50.5557 li
384.127 50.583 li
384.11 50.6382 li
384.075 50.7493 li
383.98 51.0457 383.885 51.3438 383.79 51.6436 cv
383.696 51.9438 383.599 52.2451 383.502 52.5491 cv
383.449 52.6756 383.42 52.9228 383.382 53.1201 cv
383.277 53.748 li
383.206 54.1683 383.15 54.595 383.096 55.0212 cv
383.077 55.4201 383.071 55.8153 383.067 56.2147 cv
383.036 57.0549 383.131 57.6977 383.177 58.4306 cv
383.217 58.9941 383.311 59.645 383.306 60.1039 cv
383.314 60.3527 383.327 60.6015 383.344 60.8507 cv
383.324 61.0973 383.304 61.3445 383.294 61.5911 cv
383.277 61.8416 383.296 62.0812 383.253 62.3417 cv
383.214 62.606 383.175 62.8688 383.138 63.1299 cv
383.101 63.3936 383.066 63.6564 383.029 63.9175 cv
383.017 64.015 li
383.009 64.0639 li
383.006 64.089 li
383.029 64.0198 382.953 64.2612 383.057 63.9373 cv
383.054 63.9512 li
383 64.1775 li
382.896 64.6274 li
382.827 64.9265 382.759 65.2229 382.689 65.5168 cv
382.588 65.9548 li
382.56 66.1199 382.528 66.2186 382.496 66.314 cv
382.365 66.7188 382.28 67.1204 382.136 67.5525 cv
381.819 68.4184 381.413 69.2806 380.949 70.2215 cv
380.492 71.1399 380.111 72.1393 379.879 72.9853 cv
379.789 73.4287 379.698 73.8313 379.64 74.2077 cv
379.61 74.3932 379.581 74.5712 379.554 74.7417 cv
379.549 74.9149 379.542 75.0806 379.539 75.2377 cv
379.516 75.8606 379.548 76.3506 379.551 76.6744 cv
379.554 76.7142 379.555 76.7426 379.556 76.778 cv
379.65 76.8161 379.745 76.852 379.839 76.8879 cv
379.866 76.8568 379.891 76.8284 379.923 76.7919 cv
380.128 76.5399 380.453 76.1845 380.805 75.733 cv
cp
.231373 .192157 .160784 rgb
f
382.879 98.9529 mo
382.754 98.8586 382.622 98.7582 382.483 98.6531 cv
382.36 98.5325 382.233 98.4055 382.099 98.2735 cv
381.825 98.0081 381.549 97.701 381.24 97.3707 cv
380.686 96.6919 380.092 95.802 379.608 94.898 cv
379.11 93.9731 378.642 93.1443 378.121 92.3835 cv
377.85 92.0173 377.573 91.7149 377.319 91.3729 cv
377.259 91.2919 377.197 91.2088 377.079 91.0898 cv
376.781 90.7531 li
376.582 90.5279 376.378 90.3 376.175 90.0701 cv
375.869 89.7253 li
375.716 89.5494 li
375.706 89.5388 li
375.909 89.8116 375.758 89.6095 375.801 89.6684 cv
375.782 89.6519 li
375.746 89.6175 li
375.675 89.55 li
375.482 89.3699 375.289 89.188 375.094 89.0063 cv
374.904 88.8235 374.712 88.6396 374.519 88.4557 cv
374.33 88.2697 374.125 88.1469 373.932 87.9871 cv
373.735 87.837 373.546 87.6767 373.356 87.518 cv
373.143 87.3866 372.933 87.2542 372.725 87.1159 cv
372.355 86.8462 371.77 86.5454 371.287 86.2516 cv
370.662 85.864 370.084 85.5702 369.418 85.0582 cv
369.093 84.8233 368.774 84.5895 368.461 84.3429 cv
368.143 84.0507 367.829 83.7602 367.527 83.4589 cv
367.077 83.009 li
366.938 82.8632 366.753 82.6964 366.68 82.5796 cv
366.489 82.3254 366.3 82.0724 366.109 81.821 cv
365.921 81.5695 365.732 81.3191 365.545 81.0704 cv
365.476 80.9776 li
365.441 80.9309 li
365.425 80.9073 li
365.415 80.8956 li
365.192 80.628 365.347 80.813 365.296 80.7497 cv
365.159 80.5181 li
364.892 80.0598 li
364.55 79.4351 364.168 78.8866 363.898 78.2352 cv
363.642 77.5753 363.346 76.9586 363.169 76.319 cv
363.023 75.6794 362.822 75.0365 362.76 74.472 cv
362.698 73.9145 362.609 73.3284 362.586 72.8856 cv
362.529 71.9189 362.439 71.1345 362.343 70.3877 cv
362.282 70.0355 362.208 69.6987 362.157 69.3663 cv
362.128 69.199 362.101 69.0382 362.073 68.8838 cv
362.025 68.7262 361.979 68.5755 361.935 68.4324 cv
361.756 67.8619 361.652 67.3879 361.564 67.0764 cv
361.528 66.9365 361.503 66.8283 361.486 66.7462 cv
361.13 66.9789 360.779 67.2239 360.442 67.4915 cv
353.143 73.271 352.806 85.0029 359.689 93.6943 cv
366.2 101.917 376.837 104.47 384.146 99.8311 cv
384.117 99.8112 384.091 99.7963 384.059 99.7747 cv
383.792 99.5904 383.375 99.3319 382.879 98.9529 cv
cp
.678431 .364706 .156863 rgb
f
361.598 66.6722 mo
361.669 66.7167 361.762 66.7746 361.88 66.854 cv
362.148 67.039 362.562 67.2941 363.041 67.6522 cv
363.162 67.7413 363.29 67.8351 363.425 67.9326 cv
363.548 68.0554 363.677 68.1835 363.812 68.3176 cv
364.089 68.5878 364.372 68.9036 364.686 69.2479 cv
365.246 69.9405 365.836 70.8198 366.319 71.7275 cv
366.555 72.1499 366.798 72.5912 367.051 73.0474 cv
367.294 73.4908 367.556 73.8373 367.807 74.2425 cv
368.084 74.6227 368.394 74.9883 368.681 75.3679 cv
368.988 75.7389 369.376 76.1217 369.718 76.5061 cv
369.981 76.7951 li
370.112 76.9415 li
370.066 76.8857 370.228 77.0787 370.01 76.8193 cv
370.02 76.8284 li
370.043 76.8481 li
370.085 76.889 li
370.167 76.9705 li
370.39 77.187 370.613 77.4047 370.838 77.6251 cv
371.064 77.8444 371.292 78.0652 371.52 78.2872 cv
371.644 78.4207 371.717 78.447 371.81 78.5188 cv
372.075 78.7075 li
372.251 78.833 372.415 78.9703 372.58 79.1081 cv
372.789 79.2372 373.005 79.3691 373.21 79.508 cv
373.58 79.7782 374.167 80.0769 374.65 80.3702 cv
375.275 80.7572 375.855 81.0494 376.522 81.5614 cv
376.844 81.7968 377.167 82.0295 377.477 82.275 cv
377.766 82.5474 378.054 82.8197 378.34 83.0911 cv
378.613 83.3688 378.919 83.6352 379.155 83.9211 cv
379.38 84.2132 379.606 84.5038 379.829 84.7933 cv
380.049 85.0812 380.27 85.3691 380.487 85.6538 cv
380.749 86.0039 li
380.863 86.206 li
381.088 86.6092 li
381.239 86.8767 381.387 87.1411 381.534 87.4043 cv
381.688 87.6853 381.817 87.8767 381.976 88.268 cv
382.264 88.9667 382.591 89.647 382.777 90.2995 cv
382.923 90.9396 383.122 91.5836 383.185 92.1466 cv
383.248 92.7052 383.333 93.2911 383.359 93.7335 cv
383.418 94.7045 383.501 95.4781 383.601 96.2383 cv
383.671 96.6051 383.75 96.9499 383.805 97.2876 cv
383.835 97.457 383.864 97.6184 383.892 97.7739 cv
383.936 97.9256 383.978 98.0698 384.018 98.2065 cv
384.182 98.7556 384.283 99.2274 384.37 99.5394 cv
384.379 99.5871 384.39 99.6246 384.398 99.6654 cv
384.728 99.4466 385.053 99.2183 385.366 98.9695 cv
392.666 93.1893 393.002 81.458 386.12 72.7666 cv
379.59 64.519 368.909 61.9761 361.598 66.6722 cv
cp
f
384.018 98.2065 mo
383.978 98.0698 383.936 97.9256 383.892 97.7739 cv
383.864 97.6184 383.835 97.457 383.805 97.2876 cv
383.75 96.9499 383.671 96.6051 383.601 96.2383 cv
383.501 95.4781 383.418 94.7045 383.359 93.7335 cv
383.333 93.2911 383.248 92.7052 383.185 92.1466 cv
383.122 91.5836 382.923 90.9396 382.777 90.2995 cv
382.591 89.647 382.264 88.9667 381.976 88.268 cv
381.817 87.8767 381.688 87.6853 381.534 87.4043 cv
381.387 87.1411 381.239 86.8767 381.088 86.6092 cv
380.863 86.206 li
380.749 86.0039 li
380.487 85.6538 li
380.27 85.3691 380.049 85.0812 379.829 84.7933 cv
379.606 84.5038 379.38 84.2132 379.155 83.9211 cv
378.919 83.6352 378.613 83.3688 378.34 83.0911 cv
378.054 82.8197 377.766 82.5474 377.477 82.275 cv
377.167 82.0295 376.844 81.7968 376.522 81.5614 cv
375.855 81.0494 375.275 80.7572 374.65 80.3702 cv
374.167 80.0769 373.58 79.7782 373.21 79.508 cv
373.005 79.3691 372.789 79.2372 372.58 79.1081 cv
372.415 78.9703 372.251 78.833 372.075 78.7075 cv
371.81 78.5188 li
371.717 78.447 371.644 78.4207 371.52 78.2872 cv
371.292 78.0652 371.064 77.8444 370.838 77.6251 cv
370.613 77.4047 370.39 77.187 370.167 76.9705 cv
370.085 76.889 li
370.043 76.8481 li
370.02 76.8284 li
370.01 76.8193 li
370.228 77.0787 370.066 76.8857 370.112 76.9415 cv
369.981 76.7951 li
369.718 76.5061 li
369.376 76.1217 368.988 75.7389 368.681 75.3679 cv
368.394 74.9883 368.084 74.6227 367.807 74.2425 cv
367.556 73.8373 367.294 73.4908 367.051 73.0474 cv
366.798 72.5912 366.555 72.1499 366.319 71.7275 cv
365.836 70.8198 365.246 69.9405 364.686 69.2479 cv
364.372 68.9036 364.089 68.5878 363.812 68.3176 cv
363.677 68.1835 363.548 68.0554 363.425 67.9326 cv
363.29 67.8351 363.162 67.7413 363.041 67.6522 cv
362.562 67.2941 362.148 67.039 361.88 66.854 cv
361.762 66.7746 361.669 66.7167 361.598 66.6722 cv
361.56 66.6963 361.523 66.7215 361.486 66.7462 cv
361.503 66.8283 361.528 66.9365 361.564 67.0764 cv
361.652 67.3879 361.756 67.8619 361.935 68.4324 cv
361.979 68.5755 362.025 68.7262 362.073 68.8838 cv
362.101 69.0382 362.128 69.199 362.157 69.3663 cv
362.208 69.6987 362.282 70.0355 362.343 70.3877 cv
362.439 71.1345 362.529 71.9189 362.586 72.8856 cv
362.609 73.3284 362.698 73.9145 362.76 74.472 cv
362.822 75.0365 363.023 75.6794 363.169 76.319 cv
363.346 76.9586 363.642 77.5753 363.898 78.2352 cv
364.168 78.8866 364.55 79.4351 364.892 80.0598 cv
365.159 80.5181 li
365.296 80.7497 li
365.347 80.813 365.192 80.628 365.415 80.8956 cv
365.425 80.9073 li
365.441 80.9309 li
365.476 80.9776 li
365.545 81.0704 li
365.732 81.3191 365.921 81.5695 366.109 81.821 cv
366.3 82.0724 366.489 82.3254 366.68 82.5796 cv
366.753 82.6964 366.938 82.8632 367.077 83.009 cv
367.527 83.4589 li
367.829 83.7602 368.143 84.0507 368.461 84.3429 cv
368.774 84.5895 369.093 84.8233 369.418 85.0582 cv
370.084 85.5702 370.662 85.864 371.287 86.2516 cv
371.77 86.5454 372.355 86.8462 372.725 87.1159 cv
372.933 87.2542 373.143 87.3866 373.356 87.518 cv
373.546 87.6767 373.735 87.837 373.932 87.9871 cv
374.125 88.1469 374.33 88.2697 374.519 88.4557 cv
374.712 88.6396 374.904 88.8235 375.094 89.0063 cv
375.289 89.188 375.482 89.3699 375.675 89.55 cv
375.746 89.6175 li
375.782 89.6519 li
375.801 89.6684 li
375.758 89.6095 375.909 89.8116 375.706 89.5388 cv
375.716 89.5494 li
375.869 89.7253 li
376.175 90.0701 li
376.378 90.3 376.582 90.5279 376.781 90.7531 cv
377.079 91.0898 li
377.197 91.2088 377.259 91.2919 377.319 91.3729 cv
377.573 91.7149 377.85 92.0173 378.121 92.3835 cv
378.642 93.1443 379.11 93.9731 379.608 94.898 cv
380.092 95.802 380.686 96.6919 381.24 97.3707 cv
381.549 97.701 381.825 98.0081 382.099 98.2735 cv
382.233 98.4055 382.36 98.5325 382.483 98.6531 cv
382.622 98.7582 382.754 98.8586 382.879 98.9529 cv
383.375 99.3319 383.792 99.5904 384.059 99.7747 cv
384.091 99.7963 384.117 99.8112 384.146 99.8311 cv
384.231 99.7769 384.315 99.7212 384.398 99.6654 cv
384.39 99.6246 384.379 99.5871 384.37 99.5394 cv
384.283 99.2274 384.182 98.7556 384.018 98.2065 cv
cp
.419608 .188235 .0627451 rgb
f
389.925 98.1985 mo
389.959 98.0446 389.999 97.8833 390.038 97.715 cv
390.098 97.5536 390.163 97.3852 390.23 97.2082 cv
390.361 96.8511 390.528 96.4749 390.706 96.0577 cv
391.1 95.2749 391.67 94.3705 392.299 93.5604 cv
392.942 92.7298 393.509 91.9653 393.992 91.1793 cv
394.218 90.7837 394.381 90.4067 394.59 90.0363 cv
394.639 89.9494 394.692 89.8588 394.751 89.7028 cv
394.938 89.2926 li
395.063 89.0181 395.19 88.7415 395.316 88.4627 cv
395.507 88.0418 li
395.604 87.83 li
395.611 87.8183 li
395.445 88.1142 395.567 87.8933 395.531 87.9561 cv
395.539 87.933 li
395.554 87.8858 li
395.586 87.793 li
395.673 87.5443 395.761 87.2938 395.849 87.0424 cv
395.939 86.7937 396.028 86.5432 396.118 86.2923 cv
396.211 86.0452 396.239 85.8066 396.308 85.5648 cv
396.365 85.3247 396.434 85.0872 396.501 84.8486 cv
396.535 84.6014 396.57 84.3548 396.612 84.1091 cv
396.71 83.6604 396.746 83.0042 396.817 82.4434 cv
396.918 81.7153 396.951 81.0665 397.148 80.2506 cv
397.23 79.8586 397.315 79.4726 397.413 79.0855 cv
397.551 78.6776 397.689 78.2716 397.842 77.8733 cv
398.069 77.2792 li
398.147 77.0921 398.223 76.8557 398.301 76.7421 cv
398.454 76.4643 398.608 76.1871 398.761 75.9126 cv
398.914 75.637 399.066 75.3636 399.218 75.0918 cv
399.275 74.9894 li
399.302 74.939 li
399.317 74.9143 li
399.324 74.9009 li
399.478 74.5889 399.373 74.8071 399.41 74.7342 cv
399.566 74.5148 li
399.876 74.0833 li
400.306 73.5161 400.652 72.9446 401.139 72.4346 cv
401.637 71.9317 402.081 71.4112 402.593 70.9881 cv
403.118 70.5962 403.624 70.1501 404.113 69.8655 cv
404.598 69.5808 405.098 69.2618 405.493 69.0613 cv
406.353 68.6152 407.033 68.2147 407.678 67.8249 cv
407.973 67.6228 408.25 67.4201 408.534 67.2389 cv
408.675 67.144 408.81 67.0528 408.939 66.9665 cv
409.064 66.8571 409.185 66.7537 409.297 66.6555 cv
409.745 66.2599 410.135 65.9731 410.385 65.7661 cv
410.499 65.6765 410.588 65.6096 410.655 65.5603 cv
410.298 65.3302 409.931 65.1093 409.549 64.9093 cv
401.303 60.5902 390.447 65.0503 385.303 74.873 cv
380.436 84.1638 382.428 94.9199 389.638 99.712 cv
389.643 99.6778 389.647 99.6482 389.655 99.6086 cv
389.714 99.2895 389.781 98.8054 389.925 98.1985 cv
cp
.768627 .533333 .317647 rgb
f
410.767 65.6332 mo
410.757 65.7157 410.741 65.824 410.717 65.9644 cv
410.657 66.2835 410.591 66.766 410.459 67.3499 cv
410.427 67.4967 410.394 67.6512 410.358 67.8125 cv
410.297 67.9761 410.232 68.1465 410.165 68.3241 cv
410.03 68.6864 409.857 69.0731 409.67 69.5008 cv
409.264 70.2949 408.702 71.1903 408.069 72.0009 cv
407.777 72.387 407.474 72.7896 407.16 73.2062 cv
406.853 73.6083 406.644 73.9889 406.375 74.382 cv
406.141 74.7905 405.931 75.2215 405.702 75.6381 cv
405.488 76.0703 405.297 76.5796 405.083 77.0477 cv
404.927 77.4063 li
404.847 77.5859 li
404.879 77.5206 404.767 77.7479 404.916 77.4433 cv
404.913 77.4562 li
404.904 77.4846 li
404.883 77.5388 li
404.842 77.6476 li
404.735 77.9387 404.626 78.2325 404.517 78.5279 cv
404.408 78.8234 404.299 79.1204 404.189 79.4185 cv
404.117 79.5874 404.123 79.6635 404.096 79.7782 cv
404.031 80.0966 li
403.987 80.3084 403.929 80.5143 403.87 80.7202 cv
403.835 80.9647 403.803 81.2145 403.761 81.4596 cv
403.665 81.9078 403.63 82.5646 403.558 83.1259 cv
403.459 83.8534 403.429 84.5027 403.231 85.3193 cv
403.146 85.7101 403.065 86.0989 402.968 86.4832 cv
402.835 86.8575 402.703 87.2306 402.573 87.6033 cv
402.43 87.9652 402.31 88.3522 402.145 88.6841 cv
401.969 89.0101 401.795 89.3334 401.622 89.6556 cv
401.449 89.974 401.275 90.2915 401.104 90.6061 cv
400.891 90.9879 li
400.752 91.1739 li
400.476 91.5444 li
400.292 91.79 400.11 92.0328 399.931 92.2741 cv
399.736 92.5282 399.614 92.7239 399.319 93.0274 cv
398.798 93.5759 398.311 94.1522 397.79 94.587 cv
397.264 94.98 396.756 95.4239 396.268 95.7108 cv
395.785 95.996 395.282 96.3123 394.889 96.515 cv
394.026 96.9622 393.353 97.3531 392.698 97.7551 cv
392.394 97.9668 392.108 98.1786 391.824 98.3669 cv
391.681 98.4623 391.544 98.5556 391.414 98.6436 cv
391.293 98.7459 391.179 98.8424 391.07 98.9341 cv
390.635 99.3077 390.244 99.5908 389.995 99.7972 cv
389.957 99.8268 389.925 99.8504 389.893 99.875 cv
390.225 100.088 390.567 100.292 390.921 100.477 cv
399.168 104.796 410.025 100.337 415.168 90.5139 cv
420.049 81.1952 418.03 70.4037 410.767 65.6332 cv
cp
f
391.07 98.9341 mo
391.179 98.8424 391.293 98.7459 391.414 98.6436 cv
391.544 98.5556 391.681 98.4623 391.824 98.3669 cv
392.108 98.1786 392.394 97.9668 392.698 97.7551 cv
393.353 97.3531 394.026 96.9622 394.889 96.515 cv
395.282 96.3123 395.785 95.996 396.268 95.7108 cv
396.756 95.4239 397.264 94.98 397.79 94.587 cv
398.311 94.1522 398.798 93.5759 399.319 93.0274 cv
399.614 92.7239 399.736 92.5282 399.931 92.2741 cv
400.11 92.0328 400.292 91.79 400.476 91.5444 cv
400.752 91.1739 li
400.891 90.9879 li
401.104 90.6061 li
401.275 90.2915 401.449 89.974 401.622 89.6556 cv
401.795 89.3334 401.969 89.0101 402.145 88.6841 cv
402.31 88.3522 402.43 87.9652 402.573 87.6033 cv
402.703 87.2306 402.835 86.8575 402.968 86.4832 cv
403.065 86.0989 403.146 85.7101 403.231 85.3193 cv
403.429 84.5027 403.459 83.8534 403.558 83.1259 cv
403.63 82.5646 403.665 81.9078 403.761 81.4596 cv
403.803 81.2145 403.835 80.9647 403.87 80.7202 cv
403.929 80.5143 403.987 80.3084 404.031 80.0966 cv
404.096 79.7782 li
404.123 79.6635 404.117 79.5874 404.189 79.4185 cv
404.299 79.1204 404.408 78.8234 404.517 78.5279 cv
404.626 78.2325 404.735 77.9387 404.842 77.6476 cv
404.883 77.5388 li
404.904 77.4846 li
404.913 77.4562 li
404.916 77.4433 li
404.767 77.7479 404.879 77.5206 404.847 77.5859 cv
404.927 77.4063 li
405.083 77.0477 li
405.297 76.5796 405.488 76.0703 405.702 75.6381 cv
405.931 75.2215 406.141 74.7905 406.375 74.382 cv
406.644 73.9889 406.853 73.6083 407.16 73.2062 cv
407.474 72.7896 407.777 72.387 408.069 72.0009 cv
408.702 71.1903 409.264 70.2949 409.67 69.5008 cv
409.857 69.0731 410.03 68.6864 410.165 68.3241 cv
410.232 68.1465 410.297 67.9761 410.358 67.8125 cv
410.394 67.6512 410.427 67.4967 410.459 67.3499 cv
410.591 66.766 410.657 66.2835 410.717 65.9644 cv
410.741 65.824 410.757 65.7157 410.767 65.6332 cv
410.73 65.6085 410.692 65.5839 410.655 65.5603 cv
410.588 65.6096 410.499 65.6765 410.385 65.7661 cv
410.135 65.9731 409.745 66.2599 409.297 66.6555 cv
409.185 66.7537 409.064 66.8571 408.939 66.9665 cv
408.81 67.0528 408.675 67.144 408.534 67.2389 cv
408.25 67.4201 407.973 67.6228 407.678 67.8249 cv
407.033 68.2147 406.353 68.6152 405.493 69.0613 cv
405.098 69.2618 404.598 69.5808 404.113 69.8655 cv
403.624 70.1501 403.118 70.5962 402.593 70.9881 cv
402.081 71.4112 401.637 71.9317 401.139 72.4346 cv
400.652 72.9446 400.306 73.5161 399.876 74.0833 cv
399.566 74.5148 li
399.41 74.7342 li
399.373 74.8071 399.478 74.5889 399.324 74.9009 cv
399.317 74.9143 li
399.302 74.939 li
399.275 74.9894 li
399.218 75.0918 li
399.066 75.3636 398.914 75.637 398.761 75.9126 cv
398.608 76.1871 398.454 76.4643 398.301 76.7421 cv
398.223 76.8557 398.147 77.0921 398.069 77.2792 cv
397.842 77.8733 li
397.689 78.2716 397.551 78.6776 397.413 79.0855 cv
397.315 79.4726 397.23 79.8586 397.148 80.2506 cv
396.951 81.0665 396.918 81.7153 396.817 82.4434 cv
396.746 83.0042 396.71 83.6604 396.612 84.1091 cv
396.57 84.3548 396.535 84.6014 396.501 84.8486 cv
396.434 85.0872 396.365 85.3247 396.308 85.5648 cv
396.239 85.8066 396.211 86.0452 396.118 86.2923 cv
396.028 86.5432 395.939 86.7937 395.849 87.0424 cv
395.761 87.2938 395.673 87.5443 395.586 87.793 cv
395.554 87.8858 li
395.539 87.933 li
395.531 87.9561 li
395.567 87.8933 395.445 88.1142 395.611 87.8183 cv
395.604 87.83 li
395.507 88.0418 li
395.316 88.4627 li
395.19 88.7415 395.063 89.0181 394.938 89.2926 cv
394.751 89.7028 li
394.692 89.8588 394.639 89.9494 394.59 90.0363 cv
394.381 90.4067 394.218 90.7837 393.992 91.1793 cv
393.509 91.9653 392.942 92.7298 392.299 93.5604 cv
391.67 94.3705 391.1 95.2749 390.706 96.0577 cv
390.528 96.4749 390.361 96.8511 390.23 97.2082 cv
390.163 97.3852 390.098 97.5536 390.038 97.715 cv
389.999 97.8833 389.959 98.0446 389.925 98.1985 cv
389.781 98.8054 389.714 99.2895 389.655 99.6086 cv
389.647 99.6482 389.643 99.6778 389.638 99.712 cv
389.721 99.7678 389.806 99.822 389.893 99.875 cv
389.925 99.8504 389.957 99.8268 389.995 99.7972 cv
390.244 99.5908 390.635 99.3077 391.07 98.9341 cv
cp
.678431 .364706 .156863 rgb
f
415.533 154.858 mo
415.571 154.788 li
415.504 154.752 li
412.316 143.825 li
412.271 143.837 li
412.271 143.826 li
397.487 143.826 li
397.487 149.028 li
408.413 149.028 li
409.935 154.244 li
400.229 171.947 li
406.165 171.947 li
415.526 154.872 li
415.538 154.867 li
415.533 154.858 li
cp
.231373 .192157 .160784 rgb
f
369.996 143.826 mo
372.401 168.134 li
378.657 168.134 li
377.018 143.826 li
369.996 143.826 li
cp
.678431 .678431 .678431 rgb
f
377.018 143.826 mo
378.657 168.134 li
384.91 168.134 li
384.91 143.826 li
377.018 143.826 li
cp
.807843 .807843 .807843 rgb
f
399.828 143.826 mo
397.419 168.134 li
391.166 168.134 li
392.805 143.826 li
399.828 143.826 li
cp
.509804 .509804 .509804 rgb
f
392.805 143.826 mo
391.166 168.134 li
384.91 168.134 li
384.91 143.826 li
392.805 143.826 li
cp
.678431 .678431 .678431 rgb
f
399.828 202.477 mo
397.419 175.76 li
391.166 175.76 li
392.805 202.477 li
399.828 202.477 li
cp
.509804 .509804 .509804 rgb
f
392.805 202.477 mo
391.166 175.76 li
384.91 175.76 li
384.91 202.477 li
392.805 202.477 li
cp
.678431 .678431 .678431 rgb
f
369.996 202.477 mo
372.401 175.76 li
378.657 175.76 li
377.018 202.477 li
369.996 202.477 li
cp
f
377.018 202.477 mo
378.657 175.76 li
384.91 175.76 li
384.91 202.477 li
377.018 202.477 li
cp
.807843 .807843 .807843 rgb
f
395.615 168.134 mo
384.91 168.134 li
384.91 175.76 li
395.615 175.76 li
395.615 168.134 li
cp
.231373 .192157 .160784 rgb
f
374.207 168.134 mo
374.207 175.76 li
384.91 175.76 li
384.91 168.134 li
374.207 168.134 li
cp
.309804 .262745 .231373 rgb
f
382.674 136.742 mo
369.996 143.826 li
384.91 143.826 li
384.91 136.742 li
382.674 136.742 li
cp
.678431 .678431 .678431 rgb
f
387.15 136.742 mo
384.91 136.742 li
384.91 143.826 li
399.828 143.826 li
387.15 136.742 li
cp
.509804 .509804 .509804 rgb
f
384.935 130.775 mo
384.901 130.775 li
384.919 130.784 li
384.935 130.775 li
cp
.231373 .192157 .160784 rgb
f
381.572 132.653 mo
382.674 136.742 li
387.15 136.742 li
388.252 132.646 li
381.585 132.646 li
381.572 132.653 li
cp
f
381.585 132.646 mo
388.252 132.646 li
384.919 130.784 li
381.585 132.646 li
cp
.309804 .262745 .231373 rgb
f
371.78 161.867 mo
369.996 143.826 li
363.038 143.826 li
371.78 161.867 li
cp
.509804 .509804 .509804 rgb
f
399.828 206.53 mo
369.996 206.53 li
369.996 202.477 li
399.828 202.477 li
399.828 206.53 li
cp
.231373 .192157 .160784 rgb
f
299.405 48.4141 mo
299.405 50.5454 297.677 52.272 295.549 52.272 cv
265.013 52.272 li
262.883 52.272 261.156 50.5454 261.156 48.4141 cv
261.156 28.5947 li
261.156 26.4639 262.883 24.7373 265.013 24.7373 cv
295.549 24.7373 li
297.677 24.7373 299.405 26.4639 299.405 28.5947 cv
299.405 48.4141 li
cp
f
249.805 34.4956 mo
249.803 34.4961 249.798 34.4966 249.796 34.4976 cv
249.796 34.5352 li
249.796 89.7266 li
264.323 89.7266 li
264.323 78.8354 264.323 64.5093 264.323 58.5259 cv
264.323 48.0938 258.437 39.0415 249.805 34.4956 cv
cp
f
311.344 34.5352 mo
311.344 34.5132 li
302.732 39.0649 296.86 48.1069 296.86 58.5259 cv
296.86 64.5093 296.86 78.8354 296.86 89.7266 cv
311.344 89.7266 li
311.344 34.5352 li
cp
f
280.569 31.3779 mo
270.03 31.3779 259.743 32.4551 249.805 34.4956 cv
258.437 39.0415 264.323 48.0938 264.323 58.5259 cv
264.323 64.5093 264.323 78.8354 264.323 89.7266 cv
296.86 89.7266 li
275.026 66.1763 li
288.156 41.8315 li
297.763 51.6157 li
299.711 44.2002 304.707 38.021 311.344 34.5132 cv
311.344 34.4985 li
301.404 32.4556 291.113 31.3779 280.569 31.3779 cv
cp
.807843 .807843 .807843 rgb
f
275.026 66.1763 mo
296.86 89.7266 li
296.86 78.8354 296.86 64.5093 296.86 58.5259 cv
296.86 56.1357 297.182 53.8237 297.763 51.6157 cv
288.156 41.8315 li
275.026 66.1763 li
cp
.678431 .678431 .678431 rgb
f
249.796 89.7266 mo
249.796 96.9502 li
249.796 96.9502 249.796 102.151 254.997 102.151 cv
306.143 102.151 li
311.344 102.151 311.344 96.9502 311.344 96.9502 cv
311.344 89.7266 li
249.796 89.7266 li
cp
.309804 .262745 .231373 rgb
f
290.437 48.3677 mo
290.437 42.9204 286.022 38.5044 280.575 38.5044 cv
275.126 38.5044 270.711 42.9204 270.711 48.3677 cv
270.711 50.1685 271.202 51.8521 272.045 53.3052 cv
272.045 53.3247 li
272.108 53.4136 272.163 53.5088 272.224 53.5986 cv
272.309 53.7363 272.396 53.874 272.49 54.0063 cv
274.086 56.5278 275.026 59.5049 275.026 62.709 cv
275.026 63.8618 275.026 65.0249 275.026 66.1763 cv
286.169 66.1763 li
286.169 65.0249 286.169 63.8618 286.169 62.709 cv
286.169 59.498 287.108 56.5127 288.708 53.9883 cv
288.708 53.9404 li
289.796 52.355 290.437 50.4365 290.437 48.3677 cv
cp
1 1 1 rgb
f
286.697 48.3677 mo
286.697 51.791 283.92 54.5664 280.497 54.5664 cv
277.076 54.5664 274.299 51.791 274.299 48.3677 cv
274.299 44.9443 277.076 42.1694 280.497 42.1694 cv
283.92 42.1694 286.697 44.9443 286.697 48.3677 cv
cp
.305882 .376471 .580392 rgb
f
287.143 89.7266 mo
273.418 89.7266 li
278.759 74.5532 li
283.894 79.5405 li
287.143 89.7266 li
cp
.678431 .678431 .678431 rgb
f
259.867 84.4585 mo
258.576 84.4585 257.525 83.4082 257.525 82.1172 cv
257.525 80.8257 258.576 79.7754 259.867 79.7754 cv
261.105 79.7754 li
262.171 84.4585 li
259.867 84.4585 li
cp
259.905 74.5078 mo
260.579 77.4639 li
259.867 77.4639 li
257.301 77.4639 255.214 79.5513 255.214 82.1172 cv
255.214 84.6826 257.301 86.77 259.867 86.77 cv
262.699 86.77 li
263.372 89.7266 li
275.317 89.7266 li
278.785 74.5078 li
259.905 74.5078 li
cp
1 1 1 rgb
f
298.822 84.4585 mo
299.89 79.7754 li
301.129 79.7754 li
302.42 79.7754 303.47 80.8257 303.47 82.1172 cv
303.47 83.4082 302.42 84.4585 301.129 84.4585 cv
298.822 84.4585 li
cp
282.211 74.5078 mo
285.678 89.7266 li
297.623 89.7266 li
298.296 86.77 li
301.129 86.77 li
303.694 86.77 305.782 84.6826 305.782 82.1172 cv
305.782 79.5513 303.694 77.4639 301.129 77.4639 cv
300.415 77.4639 li
301.09 74.5078 li
282.211 74.5078 li
cp
f
277.881 74.5078 mo
276.317 74.5078 li
276.317 66.1763 li
277.881 66.1763 li
277.881 74.5078 li
cp
.678431 .364706 .156863 rgb
f
284.679 74.5078 mo
283.114 74.5078 li
283.114 66.1763 li
284.679 66.1763 li
284.679 74.5078 li
cp
f
280.072 51.7915 mo
280.065 51.7642 280.058 51.7329 280.049 51.7012 cv
280.046 51.6709 280.043 51.6377 280.039 51.6025 cv
280.031 51.5327 280.028 51.4561 280.024 51.3721 cv
280.024 51.21 280.043 51.0122 280.08 50.8262 cv
280.119 50.6353 280.15 50.4619 280.165 50.2915 cv
280.168 50.2075 280.165 50.1318 280.168 50.0527 cv
280.17 50.0342 280.17 50.0146 280.168 49.9829 cv
280.166 49.9009 li
280.163 49.8452 280.162 49.7876 280.16 49.7314 cv
280.155 49.646 li
280.155 49.603 li
280.155 49.6001 li
280.153 49.6631 280.154 49.6162 280.153 49.6304 cv
280.153 49.6255 li
280.151 49.6157 li
280.148 49.5986 li
280.143 49.5498 280.137 49.5015 280.129 49.4521 cv
280.125 49.4038 280.119 49.354 280.112 49.3047 cv
280.107 49.2563 280.092 49.2144 280.083 49.1689 cv
280.074 49.124 280.065 49.0796 280.057 49.0347 cv
280.041 48.9912 280.026 48.9468 280.014 48.9019 cv
279.993 48.8203 279.945 48.708 279.911 48.6089 cv
279.866 48.4805 279.818 48.3696 279.784 48.2183 cv
279.764 48.146 279.746 48.0767 279.731 48.0044 cv
279.719 47.9248 279.708 47.8462 279.701 47.7676 cv
279.69 47.6499 li
279.688 47.6123 279.681 47.5669 279.684 47.542 cv
279.688 47.4834 279.69 47.4238 279.692 47.3662 cv
279.695 47.3071 279.697 47.2495 279.699 47.1924 cv
279.701 47.1714 li
279.701 47.1602 li
279.701 47.1548 li
279.701 47.1519 li
279.701 47.0869 279.703 47.1323 279.703 47.1162 cv
279.71 47.0679 li
279.723 46.9697 li
279.75 46.8408 279.76 46.7173 279.798 46.5928 cv
279.839 46.4683 279.869 46.3452 279.92 46.2329 cv
279.974 46.1235 280.022 46.0083 280.08 45.9204 cv
280.136 45.8335 280.191 45.7388 280.241 45.6733 cv
280.346 45.5283 280.426 45.4053 280.5 45.2876 cv
280.535 45.2295 280.561 45.1729 280.593 45.1191 cv
280.61 45.0923 280.624 45.0659 280.638 45.0405 cv
280.651 45.0122 280.663 44.9854 280.672 44.96 cv
280.714 44.8569 280.754 44.7769 280.779 44.7222 cv
280.791 44.6973 280.8 44.6802 280.807 44.665 cv
280.729 44.6572 280.65 44.6509 280.57 44.6489 cv
278.845 44.6157 277.414 46.2534 277.374 48.3071 cv
277.336 50.2495 278.556 51.8687 280.15 52.0664 cv
280.146 52.0601 280.146 52.0552 280.143 52.0479 cv
280.126 51.9897 280.096 51.9048 280.072 51.7915 cv
cp
1 1 1 rgb
f
280.831 44.6685 mo
280.837 44.6821 280.844 44.7021 280.85 44.7275 cv
280.866 44.7856 280.895 44.8701 280.922 44.978 cv
280.929 45.0054 280.937 45.0337 280.945 45.064 cv
280.948 45.0957 280.951 45.1289 280.954 45.1646 cv
280.962 45.2358 280.965 45.3135 280.969 45.4004 cv
280.968 45.5659 280.95 45.7598 280.911 45.9473 cv
280.895 46.0352 280.878 46.127 280.861 46.2227 cv
280.844 46.3145 280.84 46.395 280.828 46.4824 cv
280.823 46.5693 280.823 46.6577 280.821 46.7461 cv
280.821 46.835 280.83 46.9365 280.833 47.0313 cv
280.839 47.1035 li
280.839 47.1406 li
280.839 47.1265 280.84 47.1733 280.839 47.1104 cv
280.84 47.1128 li
280.84 47.1177 li
280.841 47.1284 li
280.844 47.1509 li
280.85 47.2075 280.857 47.2651 280.862 47.3232 cv
280.869 47.3818 280.874 47.4395 280.881 47.4985 cv
280.884 47.5322 280.89 47.5439 280.895 47.5664 cv
280.911 47.6235 li
280.922 47.6621 280.929 47.7012 280.937 47.7402 cv
280.951 47.7837 280.967 47.8271 280.98 47.8716 cv
281.001 47.9541 281.048 48.0659 281.084 48.165 cv
281.127 48.2939 281.176 48.4038 281.211 48.5562 cv
281.23 48.6265 281.248 48.6982 281.264 48.7705 cv
281.275 48.8428 281.281 48.9155 281.291 48.9888 cv
281.296 49.0605 281.311 49.1348 281.311 49.2031 cv
281.309 49.2715 281.304 49.3398 281.303 49.4077 cv
281.3 49.4746 281.298 49.5415 281.294 49.6079 cv
281.292 49.6895 li
281.285 49.7314 li
281.27 49.8154 li
281.259 49.8716 281.249 49.9268 281.239 49.9814 cv
281.23 50.0405 281.223 50.0825 281.2 50.1572 cv
281.161 50.2915 281.127 50.4272 281.077 50.542 cv
281.022 50.6509 280.974 50.7661 280.917 50.855 cv
280.861 50.9424 280.802 51.0352 280.754 51.1016 cv
280.648 51.2476 280.57 51.3682 280.494 51.4888 cv
280.461 51.5493 280.431 51.6084 280.399 51.6621 cv
280.384 51.6899 280.369 51.7168 280.354 51.7422 cv
280.343 51.769 280.333 51.7944 280.322 51.8188 cv
280.281 51.917 280.24 51.9961 280.214 52.0503 cv
280.21 52.0601 280.208 52.0659 280.205 52.0728 cv
280.277 52.0801 280.351 52.0859 280.424 52.0864 cv
282.15 52.1201 283.58 50.4829 283.62 48.4287 cv
283.659 46.4805 282.43 44.8584 280.831 44.6685 cv
cp
f
180.67 58.2803 mo
182.277 62.8809 li
196.631 57.878 li
195.021 53.2774 li
180.67 58.2803 li
cp
.231373 .192157 .160784 rgb
f
193.414 48.6758 mo
179.061 53.6788 li
180.67 58.2803 li
195.021 53.2774 li
193.414 48.6758 li
cp
.419608 .188235 .0627451 rgb
f
202.68 45.2774 mo
193.414 48.6758 li
195.021 53.2774 li
208.889 48.2706 li
208 45.7291 205.221 44.3897 202.68 45.2774 cv
cp
.768627 .533333 .317647 rgb
f
231.004 36.6675 mo
221.083 38.8443 li
218.541 39.733 217.201 42.5137 218.091 45.0538 cv
232.211 40.1182 li
231.004 36.6675 li
cp
f
211.882 42.0621 mo
209.34 42.9498 208 45.7291 208.889 48.2706 cv
218.091 45.0538 li
217.201 42.5137 214.422 41.1729 211.882 42.0621 cv
cp
f
196.631 57.878 mo
205.897 54.4786 li
208.436 53.5914 209.775 50.8106 208.889 48.2706 cv
195.021 53.2774 li
196.631 57.878 li
cp
.678431 .364706 .156863 rgb
f
218.091 45.0538 mo
218.978 47.5948 221.759 48.9346 224.3 48.0469 cv
233.417 43.5689 li
232.211 40.1182 li
218.091 45.0538 li
cp
f
215.097 51.2628 mo
217.639 50.3751 218.978 47.5948 218.091 45.0538 cv
208.889 48.2706 li
209.775 50.8106 212.557 52.1514 215.097 51.2628 cv
cp
f
155.758 48.9713 mo
145.465 91.3907 li
167.463 91.3907 li
167.463 48.9713 li
155.758 48.9713 li
cp
.768627 .533333 .317647 rgb
f
179.168 48.9713 mo
167.463 48.9713 li
167.463 91.3907 li
189.461 91.3907 li
179.168 48.9713 li
cp
.678431 .364706 .156863 rgb
f
167.463 102.151 mo
180.49 102.151 li
185.425 102.151 189.425 98.1519 189.425 93.2183 cv
189.425 91.3907 li
167.463 91.3907 li
167.463 102.151 li
cp
.419608 .188235 .0627451 rgb
f
145.501 91.3907 mo
145.501 93.2183 li
145.501 98.1519 149.5 102.151 154.434 102.151 cv
167.463 102.151 li
167.463 91.3907 li
145.501 91.3907 li
cp
.678431 .364706 .156863 rgb
f
167.463 39.2242 mo
152.95 39.2242 li
154.163 43.4351 li
167.463 43.4351 li
167.463 48.9713 li
179.168 48.9713 li
180.763 43.4351 li
181.974 39.2242 li
167.463 39.2242 li
cp
.419608 .188235 .0627451 rgb
f
154.163 43.4351 mo
155.758 48.9713 li
167.463 48.9713 li
167.463 43.4351 li
154.163 43.4351 li
cp
.678431 .364706 .156863 rgb
f
183.066 33.8443 mo
173.274 33.8443 li
172.771 33.8443 172.326 34.0987 172.063 34.4874 cv
172.047 34.5191 172.029 34.5518 172.012 34.5831 cv
171.097 36.147 169.405 37.2003 167.463 37.2003 cv
165.595 37.2003 163.966 36.2203 163.03 34.7549 cv
162.958 34.6412 162.888 34.5264 162.824 34.4068 cv
162.556 34.0665 162.146 33.8443 161.681 33.8443 cv
151.859 33.8443 li
150.373 33.8443 149.169 35.0484 149.169 36.5338 cv
149.169 38.0196 150.373 39.2242 151.859 39.2242 cv
183.066 39.2242 li
184.552 39.2242 185.757 38.0196 185.757 36.5338 cv
185.757 35.0484 184.552 33.8443 183.066 33.8443 cv
cp
.768627 .533333 .317647 rgb
f
85.4658 189.758 mo
76.3394 189.758 li
76.3394 184.534 li
85.4658 184.534 li
89.0601 184.534 91.9824 181.612 91.9824 178.018 cv
91.9824 174.425 89.0601 171.502 85.4658 171.502 cv
76.3394 171.502 li
76.3394 166.279 li
85.4658 166.279 li
91.9409 166.279 97.2065 171.544 97.2065 178.018 cv
97.2065 184.491 91.9409 189.758 85.4658 189.758 cv
cp
.678431 .364706 .156863 rgb
f
59.625 153.454 mo
39.8491 153.454 li
39.8491 160.17 li
59.625 160.17 li
59.625 153.454 li
cp
.768627 .533333 .317647 rgb
f
59.625 153.454 mo
59.625 160.17 li
79.7026 160.17 li
79.7026 153.454 li
59.625 153.454 li
cp
.678431 .364706 .156863 rgb
f
39.8491 160.17 mo
39.8491 203.454 li
39.8491 205.153 41.2261 206.53 42.9263 206.53 cv
59.625 206.53 li
59.625 160.17 li
39.8491 160.17 li
cp
.419608 .188235 .0627451 rgb
f
59.625 206.53 mo
76.6245 206.53 li
78.3237 206.53 79.7026 205.153 79.7026 203.454 cv
79.7026 160.17 li
59.625 160.17 li
59.625 206.53 li
cp
.231373 .192157 .160784 rgb
f
73.0205 183.35 mo
73.0205 190.748 67.0205 196.744 59.626 196.744 cv
52.2314 196.744 46.2285 190.748 46.2285 183.35 cv
46.2285 175.953 52.2314 169.956 59.626 169.956 cv
67.0205 169.956 73.0205 175.953 73.0205 183.35 cv
cp
1 1 1 rgb
f
58.7036 190.75 mo
58.689 190.689 58.6748 190.623 58.6572 190.553 cv
58.6499 190.488 58.645 190.416 58.6362 190.34 cv
58.6157 190.19 58.6113 190.025 58.6011 189.842 cv
58.6011 189.493 58.645 189.066 58.7241 188.663 cv
58.8066 188.251 58.8721 187.876 58.9067 187.508 cv
58.9141 187.327 58.9067 187.163 58.9141 186.992 cv
58.9185 186.952 58.9185 186.91 58.9141 186.842 cv
58.9097 186.664 li
58.9043 186.544 58.8989 186.42 58.8936 186.298 cv
58.8843 186.113 li
58.8843 186.02 li
58.8843 186.014 li
58.8799 186.15 58.8823 186.05 58.8799 186.079 cv
58.8799 186.069 li
58.8755 186.047 li
58.8701 186.01 li
58.8574 185.905 58.8462 185.8 58.8301 185.694 cv
58.8213 185.589 58.8066 185.482 58.792 185.377 cv
58.7817 185.271 58.751 185.181 58.731 185.083 cv
58.708 184.987 58.689 184.889 58.6719 184.792 cv
58.6406 184.698 58.6069 184.602 58.5796 184.506 cv
58.5322 184.329 58.4307 184.086 58.355 183.874 cv
58.2603 183.595 58.1572 183.355 58.083 183.029 cv
58.04 182.873 58.0015 182.721 57.9697 182.564 cv
57.9429 182.393 57.9204 182.223 57.9038 182.054 cv
57.8799 181.799 li
57.8755 181.719 57.8599 181.621 57.8677 181.567 cv
57.8755 181.44 57.8799 181.311 57.8843 181.185 cv
57.8887 181.059 57.8936 180.934 57.8989 180.811 cv
57.9038 180.765 li
57.9038 180.742 li
57.9038 180.73 li
57.9038 180.725 li
57.9038 180.585 57.9067 180.682 57.9067 180.648 cv
57.9224 180.542 li
57.9521 180.331 li
58.0083 180.052 58.0313 179.785 58.1133 179.515 cv
58.2012 179.246 58.2671 178.98 58.3765 178.738 cv
58.4937 178.502 58.5967 178.252 58.7222 178.063 cv
58.8428 177.876 58.9624 177.67 59.0698 177.529 cv
59.2983 177.215 59.4727 176.95 59.6318 176.695 cv
59.7041 176.571 59.7622 176.449 59.8325 176.331 cv
59.8677 176.274 59.8979 176.216 59.9277 176.162 cv
59.9565 176.101 59.9814 176.042 60.0039 175.987 cv
60.0942 175.765 60.1826 175.592 60.2319 175.474 cv
60.2593 175.419 60.2798 175.383 60.2944 175.351 cv
60.126 175.333 59.9541 175.32 59.7827 175.315 cv
56.0562 175.243 52.9629 178.783 52.877 183.22 cv
52.7935 187.418 55.4307 190.915 58.8721 191.343 cv
58.8652 191.329 58.8652 191.319 58.8574 191.303 cv
58.8232 191.176 58.7583 190.994 58.7036 190.75 cv
cp
.768627 .533333 .317647 rgb
f
60.3472 175.357 mo
60.3574 175.388 60.3721 175.431 60.3867 175.485 cv
60.4219 175.61 60.4849 175.793 60.5435 176.027 cv
60.5571 176.085 60.5752 176.146 60.5923 176.212 cv
60.5957 176.282 60.6045 176.352 60.6113 176.431 cv
60.6309 176.583 60.6353 176.751 60.6455 176.939 cv
60.6431 177.297 60.6025 177.716 60.519 178.122 cv
60.4849 178.311 60.4478 178.509 60.4082 178.718 cv
60.3721 178.914 60.3652 179.088 60.3384 179.277 cv
60.3281 179.465 60.3281 179.657 60.3237 179.847 cv
60.3237 180.038 60.3428 180.257 60.3525 180.462 cv
60.3633 180.618 li
60.3633 180.699 li
60.3633 180.669 60.3652 180.77 60.3633 180.634 cv
60.3652 180.64 li
60.3652 180.65 li
60.3677 180.674 li
60.3721 180.722 li
60.3867 180.844 60.4014 180.968 60.4116 181.094 cv
60.4263 181.22 60.4399 181.345 60.4556 181.473 cv
60.46 181.546 60.4751 181.571 60.4849 181.619 cv
60.519 181.743 li
60.5435 181.826 60.5571 181.91 60.5752 181.996 cv
60.6045 182.09 60.6406 182.184 60.6675 182.28 cv
60.7129 182.456 60.8169 182.7 60.8911 182.912 cv
60.9863 183.192 61.0923 183.429 61.1665 183.759 cv
61.207 183.91 61.248 184.065 61.2817 184.221 cv
61.3032 184.377 61.3179 184.535 61.3408 184.693 cv
61.3521 184.849 61.3813 185.008 61.3813 185.156 cv
61.377 185.305 61.3696 185.452 61.3677 185.599 cv
61.3599 185.743 61.355 185.887 61.3472 186.032 cv
61.3428 186.206 li
61.3257 186.298 li
61.2939 186.479 li
61.2705 186.601 61.25 186.72 61.2256 186.837 cv
61.207 186.965 61.1938 187.057 61.1431 187.218 cv
61.0571 187.508 60.9863 187.801 60.8745 188.05 cv
60.7583 188.285 60.6543 188.533 60.5303 188.725 cv
60.4082 188.915 60.2842 189.116 60.1826 189.258 cv
59.9497 189.574 59.7827 189.835 59.6162 190.094 cv
59.5459 190.226 59.4824 190.352 59.4102 190.47 cv
59.3799 190.53 59.3472 190.587 59.3154 190.644 cv
59.2915 190.7 59.2695 190.755 59.2456 190.809 cv
59.1577 191.02 59.0674 191.19 59.0107 191.31 cv
59.0063 191.329 59.002 191.341 58.9917 191.357 cv
59.1475 191.373 59.3091 191.386 59.4668 191.387 cv
63.1963 191.458 66.2842 187.921 66.3721 183.483 cv
66.4546 179.273 63.8013 175.769 60.3472 175.357 cv
cp
f
52.4238 149.398 mo
52.4238 149.398 52.2866 148.896 52.1274 148.023 cv
52.019 147.602 52.0693 147.008 52.0913 146.324 cv
52.1772 145.672 52.3218 144.899 52.5747 144.177 cv
52.8164 143.436 53.0396 142.745 53.1709 142.056 cv
53.2373 141.708 53.2407 141.345 53.2871 140.99 cv
53.3188 140.631 53.2676 140.222 53.27 139.837 cv
53.2632 139.544 li
53.2598 139.396 li
53.2554 139.278 53.2656 139.547 53.2632 139.514 cv
53.2622 139.504 li
53.2588 139.482 li
53.2544 139.44 li
53.2432 139.352 li
53.1538 138.651 li
53.0635 137.94 li
53.0239 137.731 52.9585 137.613 52.9155 137.446 cv
52.7837 136.972 li
52.7012 136.798 52.6245 136.622 52.5542 136.444 cv
52.4458 136.105 52.1772 135.673 51.9912 135.286 cv
51.7598 134.786 51.5103 134.374 51.3062 133.784 cv
51.002 132.948 li
50.8218 132.074 li
50.771 131.786 50.6978 131.492 50.6738 131.212 cv
50.6563 130.379 li
50.6445 129.562 li
50.6445 129.461 li
50.6489 129.235 li
50.6748 129.061 li
50.7256 128.717 li
50.8164 128.237 50.8164 127.869 50.9775 127.318 cv
51.1455 126.78 51.2764 126.218 51.4966 125.771 cv
51.9224 124.861 52.4395 124.138 52.8613 123.566 cv
53.3062 122.988 53.6338 122.497 53.9336 122.012 cv
54.1367 121.508 54.4556 121.073 54.5576 120.663 cv
54.8301 119.86 55.0352 119.362 55.0352 119.362 cv
55.0352 119.362 55.1753 119.843 55.3311 120.754 cv
55.4385 121.21 55.3853 121.772 55.3696 122.441 cv
55.2905 123.085 55.1426 123.864 54.8911 124.586 cv
54.6494 125.328 54.4258 126.018 54.2949 126.706 cv
54.2271 127.049 54.2407 127.356 54.1924 127.675 cv
54.1572 127.988 54.1943 128.537 54.1924 128.969 cv
54.1978 129.317 li
54.2002 129.492 li
54.2002 129.503 li
54.208 129.248 54.2021 129.438 54.2046 129.383 cv
54.2065 129.402 li
54.2134 129.439 li
54.2251 129.512 li
54.3086 130.104 li
54.3535 130.504 54.4077 130.898 54.5298 131.246 cv
54.6763 131.789 li
54.7598 131.964 54.832 132.14 54.9023 132.318 cv
55.0117 132.657 55.2793 133.088 55.4639 133.475 cv
55.6934 133.977 55.9453 134.386 56.1494 134.976 cv
56.2568 135.253 56.356 135.533 56.4512 135.812 cv
56.5254 136.12 56.5864 136.442 56.6475 136.754 cv
56.6992 137.059 56.7759 137.406 56.7939 137.669 cv
56.7988 138.387 li
56.8052 139.093 li
56.8101 139.399 li
56.7837 139.598 li
56.731 139.995 li
56.6406 140.525 56.6245 141.031 56.4644 141.537 cv
56.293 142.04 56.1758 142.544 55.9585 142.988 cv
55.5332 143.897 55.0171 144.621 54.5928 145.193 cv
54.1504 145.768 53.8193 146.266 53.5229 146.742 cv
53.3267 147.232 53.0059 147.634 52.9009 148.079 cv
52.6255 148.921 52.4238 149.398 52.4238 149.398 cv
cp
.305882 .376471 .580392 rgb
f
64.2207 149.398 mo
64.2207 149.398 64.0835 148.896 63.9243 148.023 cv
63.8169 147.602 63.8667 147.008 63.8892 146.324 cv
63.9727 145.672 64.1187 144.899 64.3711 144.177 cv
64.6138 143.436 64.8374 142.745 64.9683 142.056 cv
65.0337 141.708 65.0381 141.345 65.0835 140.99 cv
65.1147 140.631 65.0654 140.222 65.0664 139.837 cv
65.0601 139.544 li
65.0566 139.396 li
65.0522 139.278 65.063 139.547 65.061 139.514 cv
65.0586 139.504 li
65.0566 139.482 li
65.0508 139.44 li
65.0405 139.352 li
64.9502 138.651 li
64.8604 137.94 li
64.8208 137.731 64.7559 137.613 64.7134 137.446 cv
64.5796 136.972 li
64.4985 136.798 64.4219 136.622 64.3521 136.444 cv
64.2427 136.105 63.9751 135.673 63.7876 135.286 cv
63.5552 134.786 63.3066 134.374 63.1025 133.784 cv
62.7988 132.948 li
62.6182 132.074 li
62.5684 131.786 62.4941 131.492 62.4697 131.212 cv
62.4521 130.379 li
62.4409 129.562 li
62.4399 129.461 li
62.4468 129.235 li
62.4717 129.061 li
62.5234 128.717 li
62.6138 128.237 62.6123 127.869 62.7739 127.318 cv
62.9434 126.78 63.0742 126.218 63.2935 125.771 cv
63.7197 124.861 64.2358 124.138 64.6592 123.566 cv
65.1025 122.988 65.4312 122.497 65.7305 122.012 cv
65.9346 121.508 66.2515 121.073 66.3545 120.663 cv
66.6274 119.86 66.833 119.362 66.833 119.362 cv
66.833 119.362 66.9722 119.843 67.1289 120.754 cv
67.2349 121.21 67.1831 121.772 67.1675 122.441 cv
67.0859 123.085 66.939 123.864 66.687 124.586 cv
66.4458 125.328 66.2212 126.018 66.0913 126.706 cv
66.0244 127.049 66.0386 127.356 65.9883 127.675 cv
65.9551 127.988 65.9912 128.537 65.9883 128.969 cv
65.9946 129.317 li
65.9956 129.492 li
65.9956 129.503 li
66.0044 129.248 66 129.438 66.0024 129.383 cv
66.0044 129.402 li
66.0103 129.439 li
66.02 129.512 li
66.1064 130.104 li
66.1514 130.504 66.2056 130.898 66.3271 131.246 cv
66.4717 131.789 li
66.5552 131.964 66.6289 132.14 66.7002 132.318 cv
66.8081 132.657 67.0767 133.088 67.2617 133.475 cv
67.4897 133.977 67.7417 134.386 67.9463 134.976 cv
68.0542 135.253 68.1538 135.533 68.2485 135.812 cv
68.3228 136.12 68.3838 136.442 68.4434 136.754 cv
68.4956 137.059 68.5728 137.406 68.5903 137.669 cv
68.5962 138.387 li
68.6025 139.093 li
68.6069 139.399 li
68.5806 139.598 li
68.5269 139.995 li
68.437 140.525 68.4214 141.031 68.2598 141.537 cv
68.0879 142.04 67.9727 142.544 67.7544 142.988 cv
67.3296 143.897 66.814 144.621 66.3906 145.193 cv
65.9468 145.768 65.6162 146.266 65.3203 146.742 cv
65.1216 147.232 64.8022 147.634 64.6973 148.079 cv
64.4219 148.921 64.2207 149.398 64.2207 149.398 cv
cp
f
247.684 189.919 mo
247.504 189.559 247.382 189.203 247.286 188.846 cv
244.826 190.741 li
241.155 193.568 240.336 198.713 242.828 202.526 cv
245.533 200.267 248.45 198.253 251.537 196.504 cv
250.056 194.242 248.661 191.886 247.684 189.919 cv
cp
.419608 .188235 .0627451 rgb
f
251.537 196.504 mo
255.751 194.117 260.289 192.235 265.071 190.943 cv
263.87 186.648 262.563 181.721 262.186 178.675 cv
261.968 176.896 262.436 175.235 263.346 173.831 cv
260.059 175.433 254.663 178.148 252.59 179.665 cv
249.334 182.052 246.321 185.292 247.286 188.846 cv
247.382 189.203 247.504 189.559 247.684 189.919 cv
248.661 191.886 250.056 194.242 251.537 196.504 cv
cp
.678431 .364706 .156863 rgb
f
309.025 196.367 mo
312.121 198.101 315.051 200.099 317.767 202.347 cv
320.115 198.553 319.257 193.525 315.644 190.741 cv
313.186 188.848 li
313.089 189.202 312.967 189.559 312.788 189.919 cv
311.832 191.845 310.473 194.147 309.025 196.367 cv
cp
.419608 .188235 .0627451 rgb
f
298.286 178.675 mo
297.912 181.702 296.619 186.583 295.424 190.856 cv
300.228 192.125 304.788 193.993 309.025 196.367 cv
310.473 194.147 311.832 191.845 312.788 189.919 cv
312.967 189.559 313.089 189.202 313.186 188.848 cv
314.15 185.292 311.137 182.052 307.88 179.665 cv
305.809 178.148 300.413 175.435 297.127 173.831 cv
298.035 175.236 298.503 176.897 298.286 178.675 cv
cp
.678431 .364706 .156863 rgb
f
262.186 178.675 mo
262.563 181.721 263.87 186.648 265.071 190.943 cv
269.959 189.622 275.095 188.905 280.402 188.905 cv
285.595 188.906 290.629 189.588 295.424 190.856 cv
296.619 186.583 297.912 181.702 298.286 178.675 cv
298.503 176.897 298.035 175.236 297.127 173.831 cv
295.501 171.319 292.447 169.636 289.246 169.636 cv
280.989 169.636 li
271.225 169.637 li
268.025 169.637 264.971 171.319 263.346 173.831 cv
262.436 175.235 261.968 176.896 262.186 178.675 cv
cp
.768627 .533333 .317647 rgb
f
255.575 204.699 mo
257.041 203.569 li
256.452 203.085 255.93 202.536 255.46 201.958 cv
254.233 200.448 252.851 198.514 251.537 196.504 cv
248.45 198.253 245.533 200.267 242.828 202.526 cv
242.953 202.719 243.079 202.91 243.22 203.094 cv
246.189 206.949 251.719 207.669 255.575 204.699 cv
cp
.231373 .192157 .160784 rgb
f
265.071 190.943 mo
260.289 192.235 255.751 194.117 251.537 196.504 cv
252.851 198.514 254.233 200.448 255.46 201.958 cv
255.93 202.536 256.452 203.085 257.041 203.569 cv
258.625 204.875 260.739 205.684 263.908 205.037 cv
265.427 204.729 268.075 204.274 270.567 203.86 cv
268.73 202.222 267.506 199.677 266.704 196.752 cv
266.286 195.22 265.692 193.164 265.071 190.943 cv
cp
.419608 .188235 .0627451 rgb
f
305.01 201.958 mo
304.541 202.536 304.019 203.084 303.429 203.569 cv
304.897 204.699 li
308.752 207.669 314.284 206.948 317.25 203.094 cv
317.436 202.851 317.611 202.602 317.767 202.347 cv
315.051 200.099 312.121 198.101 309.025 196.367 cv
307.685 198.424 306.265 200.412 305.01 201.958 cv
cp
.231373 .192157 .160784 rgb
f
305.01 201.958 mo
306.265 200.412 307.685 198.424 309.025 196.367 cv
304.788 193.993 300.228 192.125 295.424 190.856 cv
294.794 193.112 294.192 195.2 293.765 196.752 cv
292.963 199.677 291.742 202.221 289.903 203.86 cv
292.395 204.274 295.043 204.73 296.563 205.037 cv
299.732 205.684 301.846 204.874 303.429 203.569 cv
304.019 203.084 304.541 202.536 305.01 201.958 cv
cp
.419608 .188235 .0627451 rgb
f
295.424 190.856 mo
290.629 189.588 285.595 188.906 280.402 188.905 cv
275.095 188.905 269.959 189.622 265.071 190.943 cv
265.692 193.164 266.286 195.22 266.704 196.752 cv
267.506 199.677 268.73 202.222 270.567 203.86 cv
271.929 205.072 273.623 205.791 275.744 205.791 cv
280.989 205.791 li
284.726 205.791 li
286.848 205.791 288.543 205.072 289.903 203.86 cv
291.742 202.221 292.963 199.677 293.765 196.752 cv
294.192 195.2 294.794 193.112 295.424 190.856 cv
cp
.678431 .364706 .156863 rgb
f
396.576 282.925 mo
396.576 318.757 li
402.353 318.757 li
402.353 247.095 li
402.329 247.177 396.576 266.103 396.576 282.925 cv
cp
.419608 .188235 .0627451 rgb
f
408.134 282.925 mo
408.134 266.065 402.354 247.091 402.354 247.091 cv
402.353 247.095 li
402.353 318.757 li
408.134 318.757 li
408.134 282.925 li
cp
.768627 .533333 .317647 rgb
f
396.576 318.757 mo
402.375 313.735 li
408.174 318.757 li
396.576 318.757 li
cp
.678431 .364706 .156863 rgb
f
367.487 318.757 mo
396.576 318.757 li
396.576 297.564 li
367.487 297.564 li
367.487 318.757 li
cp
f
397.245 272.134 mo
368.21 272.134 li
367.769 275.772 367.487 279.456 367.487 282.925 cv
367.487 297.564 li
396.576 297.564 li
396.576 282.925 li
396.576 279.354 396.837 275.692 397.245 272.134 cv
cp
1 1 1 rgb
f
402.354 247.091 mo
373.267 247.091 li
373.267 247.091 369.76 259.31 368.21 272.134 cv
397.245 272.134 li
398.766 258.884 402.354 247.091 402.354 247.091 cv
cp
.678431 .364706 .156863 rgb
f
388.948 285.771 mo
388.888 285.786 388.821 285.8 388.754 285.817 cv
388.688 285.823 388.616 285.829 388.539 285.839 cv
388.388 285.858 388.224 285.862 388.042 285.874 cv
387.69 285.874 387.265 285.829 386.861 285.751 cv
386.448 285.669 386.075 285.603 385.708 285.567 cv
385.525 285.56 385.361 285.567 385.191 285.56 cv
385.151 285.556 385.11 285.556 385.04 285.56 cv
384.863 285.565 li
384.742 285.571 384.619 285.575 384.497 285.581 cv
384.313 285.589 li
384.219 285.589 li
384.213 285.589 li
384.349 285.595 384.248 285.593 384.279 285.595 cv
384.268 285.595 li
384.247 285.599 li
384.21 285.604 li
384.104 285.616 384 285.63 383.893 285.644 cv
383.788 285.653 383.682 285.669 383.574 285.683 cv
383.47 285.692 383.379 285.724 383.282 285.743 cv
383.185 285.765 383.09 285.786 382.991 285.802 cv
382.898 285.833 382.8 285.868 382.703 285.894 cv
382.527 285.942 382.285 286.044 382.071 286.12 cv
381.794 286.214 381.555 286.315 381.227 286.392 cv
381.071 286.435 380.92 286.474 380.764 286.503 cv
380.593 286.53 380.424 286.554 380.253 286.571 cv
379.998 286.595 li
379.918 286.601 379.818 286.614 379.766 286.607 cv
379.638 286.601 379.51 286.595 379.386 286.589 cv
379.259 286.585 379.134 286.581 379.011 286.577 cv
378.964 286.571 li
378.94 286.571 li
378.929 286.571 li
378.923 286.571 li
378.782 286.571 378.88 286.569 378.846 286.569 cv
378.741 286.55 li
378.529 286.522 li
378.252 286.466 377.983 286.444 377.714 286.362 cv
377.445 286.274 377.18 286.208 376.936 286.099 cv
376.7 285.979 376.452 285.878 376.261 285.753 cv
376.073 285.632 375.87 285.513 375.727 285.405 cv
375.414 285.177 375.15 285.003 374.895 284.843 cv
374.77 284.771 374.646 284.712 374.53 284.642 cv
374.473 284.607 374.416 284.575 374.36 284.546 cv
374.299 284.517 374.24 284.491 374.185 284.47 cv
373.966 284.382 373.791 284.292 373.673 284.241 cv
373.619 284.214 373.581 284.194 373.549 284.181 cv
373.532 284.347 373.52 284.519 373.515 284.692 cv
373.442 288.419 376.98 291.513 381.419 291.597 cv
385.615 291.681 389.113 289.044 389.543 285.603 cv
389.527 285.608 389.518 285.608 389.501 285.616 cv
389.377 285.651 389.191 285.718 388.948 285.771 cv
cp
.305882 .376471 .580392 rgb
f
373.556 284.126 mo
373.586 284.118 373.631 284.103 373.684 284.089 cv
373.81 284.052 373.992 283.991 374.227 283.931 cv
374.286 283.917 374.346 283.899 374.41 283.882 cv
374.479 283.878 374.552 283.87 374.629 283.864 cv
374.782 283.845 374.95 283.841 375.14 283.829 cv
375.495 283.831 375.915 283.872 376.32 283.954 cv
376.512 283.991 376.708 284.026 376.915 284.065 cv
377.113 284.103 377.288 284.11 377.476 284.136 cv
377.665 284.147 377.855 284.147 378.047 284.151 cv
378.238 284.151 378.457 284.13 378.662 284.122 cv
378.819 284.112 li
378.897 284.112 li
378.868 284.112 378.971 284.11 378.832 284.112 cv
378.839 284.11 li
378.851 284.11 li
378.872 284.107 li
378.92 284.103 li
379.044 284.089 379.168 284.073 379.294 284.064 cv
379.419 284.048 379.546 284.034 379.671 284.019 cv
379.744 284.015 379.771 284.001 379.818 283.991 cv
379.942 283.954 li
380.025 283.931 380.109 283.917 380.194 283.899 cv
380.289 283.87 380.384 283.835 380.479 283.808 cv
380.656 283.761 380.898 283.657 381.112 283.583 cv
381.391 283.487 381.626 283.382 381.957 283.308 cv
382.11 283.267 382.265 283.226 382.42 283.192 cv
382.576 283.171 382.733 283.155 382.894 283.134 cv
383.047 283.122 383.207 283.093 383.356 283.093 cv
383.502 283.097 383.65 283.104 383.797 283.107 cv
383.941 283.114 384.087 283.12 384.229 283.126 cv
384.406 283.132 li
384.497 283.149 li
384.679 283.181 li
384.8 283.204 384.919 283.224 385.038 283.249 cv
385.165 283.267 385.256 283.28 385.417 283.331 cv
385.708 283.417 385.999 283.487 386.248 283.601 cv
386.484 283.716 386.732 283.819 386.923 283.944 cv
387.113 284.065 387.313 284.19 387.457 284.292 cv
387.771 284.522 388.033 284.692 388.294 284.858 cv
388.425 284.929 388.553 284.991 388.669 285.064 cv
388.728 285.095 388.786 285.126 388.842 285.159 cv
388.9 285.183 388.954 285.206 389.009 285.229 cv
389.219 285.317 389.391 285.407 389.508 285.462 cv
389.527 285.468 389.542 285.472 389.556 285.483 cv
389.571 285.327 389.584 285.165 389.585 285.007 cv
389.657 281.278 386.12 278.189 381.681 278.101 cv
377.472 278.021 373.968 280.673 373.556 284.126 cv
cp
f
70.0835 58.4893 mo
80.5049 68.9092 li
84.8291 68.9092 li
89.7993 73.8809 li
89.9233 72.7398 89.9917 71.5821 89.9917 70.4092 cv
89.9917 52.8784 75.7808 38.667 58.25 38.667 cv
40.7188 38.667 26.5073 52.8784 26.5073 70.4092 cv
26.5073 87.94 40.7188 102.151 58.25 102.151 cv
60.7021 102.151 63.0859 101.864 65.3789 101.337 cv
46.6699 82.628 li
70.0835 58.4893 li
cp
.807843 .807843 .807843 rgb
f
89.7993 73.8809 mo
84.8291 68.9092 li
80.5049 68.9092 li
70.0835 58.4893 li
46.6699 82.628 li
65.3789 101.337 li
78.3789 98.3521 88.3296 87.3936 89.7993 73.8809 cv
cp
.678431 .678431 .678431 rgb
f
83.3965 68.3404 mo
74.9468 68.3404 li
73.9253 60.0201 66.8462 53.5718 58.25 53.5718 cv
48.9507 53.5718 41.4126 61.1104 41.4126 70.4092 cv
41.4126 79.708 48.9507 87.2466 58.25 87.2466 cv
66.8462 87.2466 73.9253 80.7984 74.9468 72.4776 cv
83.3965 72.4776 li
84.5396 72.4776 85.4658 71.5523 85.4658 70.4092 cv
85.4658 69.2661 84.5396 68.3404 83.3965 68.3404 cv
cp
1 1 1 rgb
f
68.1226 60.3741 mo
48.2148 80.2823 li
50.769 82.878 54.3198 84.4908 58.25 84.4908 cv
66.0269 84.4908 72.3315 78.187 72.3315 70.4077 cv
72.3315 66.4785 70.7183 62.9283 68.1226 60.3741 cv
cp
.678431 .364706 .156863 rgb
f
58.25 56.3257 mo
50.4727 56.3257 44.1675 62.6299 44.1675 70.4077 cv
44.1675 74.2564 45.7134 77.7398 48.2148 80.2823 cv
68.1226 60.3741 li
65.5806 57.8721 62.0972 56.3257 58.25 56.3257 cv
cp
.419608 .188235 .0627451 rgb
f
38.9043 72.2862 mo
37.7739 71.7378 36.4937 72.0186 35.9507 72.9009 cv
35.9487 72.9073 35.9453 72.9107 35.9429 72.9156 cv
35.917 72.96 35.8916 73.003 35.8691 73.0508 cv
35.3838 74.0498 35.9565 75.3301 37.147 75.9063 cv
38.2734 76.4536 39.5498 76.1768 40.0957 75.2989 cv
40.1025 75.2896 40.1084 75.2788 40.1143 75.2696 cv
40.1377 75.2285 40.1611 75.1861 40.1821 75.1421 cv
40.6675 74.1426 40.0952 72.8643 38.9043 72.2862 cv
cp
f
36.2329 70.6221 mo
35.1016 70.0733 33.8218 70.354 33.2788 71.2364 cv
33.2764 71.2427 33.2734 71.2466 33.271 71.251 cv
33.2446 71.2954 33.2197 71.3384 33.1968 71.3863 cv
32.7124 72.3858 33.2842 73.6656 34.4746 74.2417 cv
35.6011 74.7891 36.8774 74.5117 37.4233 73.6343 cv
37.4302 73.625 37.4355 73.6138 37.4424 73.6045 cv
37.4658 73.5635 37.4897 73.522 37.5103 73.4781 cv
37.9951 72.4776 37.4229 71.1997 36.2329 70.6221 cv
cp
.678431 .364706 .156863 rgb
f
47.5493 91.3887 mo
46.4185 90.8404 45.1382 91.1206 44.5952 92.003 cv
44.5933 92.0098 44.5903 92.0132 44.5874 92.0181 cv
44.562 92.062 44.5361 92.105 44.5137 92.1529 cv
44.0288 93.1524 44.6016 94.4326 45.7915 95.0083 cv
46.918 95.5562 48.1943 95.2788 48.7402 94.4014 cv
48.7471 94.3916 48.7529 94.3809 48.7588 94.3716 cv
48.7822 94.3311 48.8062 94.2886 48.8271 94.2447 cv
49.312 93.2451 48.7393 91.9663 47.5493 91.3887 cv
cp
.768627 .533333 .317647 rgb
f
41.7485 79.9185 mo
41.751 78.6617 40.9419 77.6304 39.9102 77.5254 cv
39.9053 77.5254 39.8994 77.5244 39.894 77.5244 cv
39.8442 77.5191 39.7935 77.5161 39.7412 77.5161 cv
38.6304 77.5137 37.7261 78.5845 37.7231 79.9077 cv
37.7207 81.1592 38.5244 82.19 39.5527 82.2993 cv
39.5635 82.3018 39.5757 82.3018 39.5869 82.3028 cv
39.6348 82.3076 39.6821 82.3106 39.7305 82.3106 cv
40.8413 82.3125 41.7451 81.2417 41.7485 79.9185 cv
cp
.231373 .192157 .160784 rgb
f
44.9629 84.6348 mo
44.1831 83.6494 42.9072 83.3472 42.0352 83.9063 cv
42.0303 83.9107 42.0259 83.9126 42.0215 83.916 cv
41.9795 83.9434 41.937 83.9722 41.8965 84.0044 cv
41.0254 84.6949 40.9854 86.0957 41.8066 87.1328 cv
42.584 88.1148 43.8535 88.4195 44.7271 87.8662 cv
44.7373 87.8594 44.7471 87.8531 44.7573 87.8467 cv
44.7964 87.8199 44.8354 87.7935 44.8735 87.7632 cv
45.7441 87.0728 45.7842 85.6729 44.9629 84.6348 cv
cp
.419608 .188235 .0627451 rgb
f
37.1582 83.628 mo
35.9019 83.6304 34.875 84.4434 34.7734 85.4756 cv
34.7734 85.4815 34.7729 85.4859 34.7729 85.4922 cv
34.7681 85.5425 34.7646 85.5928 34.7651 85.6451 cv
34.7676 86.7564 35.8433 87.6553 37.167 87.6519 cv
38.418 87.649 39.4438 86.8409 39.5498 85.8125 cv
39.5513 85.8008 39.5527 85.7886 39.5537 85.7779 cv
39.5571 85.7305 39.5596 85.6826 39.5596 85.6348 cv
39.5571 84.5235 38.4814 83.625 37.1582 83.628 cv
cp
.768627 .533333 .317647 rgb
f
49.5166 90.6524 mo
49.9155 89.4595 49.4712 88.2271 48.5254 87.8028 cv
48.5195 87.8013 48.5156 87.7979 48.5103 87.7964 cv
48.4634 87.7759 48.417 87.7569 48.3672 87.7398 cv
47.313 87.3882 46.1187 88.1216 45.7002 89.376 cv
45.3032 90.565 45.7422 91.794 46.6836 92.2222 cv
46.6943 92.2266 46.7056 92.232 46.7158 92.2364 cv
46.7593 92.2559 46.8037 92.2725 46.8496 92.2886 cv
47.9038 92.6397 49.0981 91.9082 49.5166 90.6524 cv
cp
.678431 .364706 .156863 rgb
f
42.2637 91.1397 mo
42.6626 89.9478 42.2178 88.7144 41.2715 88.2901 cv
41.2661 88.2891 41.2622 88.2857 41.2568 88.2847 cv
41.2104 88.2637 41.1636 88.2451 41.1138 88.2285 cv
40.0596 87.8765 38.8652 88.6099 38.4468 89.8643 cv
38.0493 91.0528 38.4888 92.2823 39.4302 92.7095 cv
39.4414 92.7154 39.4526 92.7198 39.4624 92.7246 cv
39.5059 92.7437 39.5503 92.7603 39.5967 92.7759 cv
40.6509 93.1275 41.8447 92.3955 42.2637 91.1397 cv
cp
.231373 .192157 .160784 rgb
f
36.9658 78.1905 mo
36.5054 77.022 35.3721 76.3618 34.374 76.6451 cv
34.3696 76.648 34.3643 76.648 34.3599 76.6504 cv
34.3101 76.6641 34.2622 76.6802 34.2139 76.6992 cv
33.1802 77.107 32.7354 78.437 33.2212 79.6675 cv
33.6802 80.8321 34.8076 81.4922 35.8037 81.2149 cv
35.8149 81.2124 35.8271 81.2085 35.8384 81.2051 cv
35.8833 81.1919 35.9287 81.1768 35.9731 81.1582 cv
37.0068 80.751 37.4512 79.4219 36.9658 78.1905 cv
cp
.419608 .188235 .0627451 rgb
f
40.0283 68.2256 mo
40.6724 67.148 40.5049 65.8472 39.6714 65.23 cv
39.666 65.2276 39.6631 65.2232 39.6582 65.2207 cv
39.6172 65.1905 39.5752 65.1617 39.5313 65.1358 cv
38.5771 64.5655 37.252 65.023 36.5737 66.1592 cv
35.9307 67.2339 36.0952 68.5293 36.9229 69.1494 cv
36.9312 69.1568 36.9414 69.1646 36.9512 69.1714 cv
36.9893 69.1988 37.0288 69.2251 37.0708 69.2491 cv
38.0244 69.8194 39.3486 69.3614 40.0283 68.2256 cv
cp
f
104.995 58.6753 mo
106.236 59.917 106.236 61.9283 104.997 63.1695 cv
103.755 64.4107 101.744 64.4107 100.501 63.1675 cv
99.2622 61.9283 72.5444 30.7173 72.5444 30.7173 cv
72.5444 30.7173 103.755 57.4346 104.995 58.6753 cv
cp
.807843 .807843 .807843 rgb
f
70.501 37.5362 mo
73.9487 40.9829 78.728 41.794 81.1753 39.3472 cv
68.688 26.8609 li
66.2417 29.3076 67.0532 34.0884 70.501 37.5362 cv
cp
f
68.688 26.8609 mo
81.1753 39.3472 li
83.6216 36.9004 82.8101 32.1216 79.3623 28.6739 cv
75.9146 25.2256 71.1348 24.4141 68.688 26.8609 cv
cp
.678431 .678431 .678431 rgb
f
61.2764 268.581 mo
44.395 268.581 li
43.9321 262.759 li
45.1953 278.62 li
61.2764 278.62 li
61.2764 268.581 li
cp
.419608 .188235 .0627451 rgb
f
47.0547 301.97 mo
48.3921 318.757 li
61.2764 318.757 li
61.2764 301.97 li
47.0547 301.97 li
cp
f
61.2764 268.581 mo
61.2764 278.62 li
77.3564 278.62 li
78.6196 262.759 li
77.1333 262.759 li
61.2764 262.759 li
43.9321 262.759 li
44.395 268.581 li
61.2764 268.581 li
cp
.231373 .192157 .160784 rgb
f
61.2764 318.757 mo
74.1602 318.757 li
75.4966 301.97 li
61.2764 301.97 li
61.2764 318.757 li
cp
f
61.2764 278.62 mo
45.1953 278.62 li
47.0547 301.97 li
61.2764 301.97 li
61.2764 278.62 li
cp
.768627 .533333 .317647 rgb
f
61.2764 278.62 mo
61.2764 301.97 li
75.4966 301.97 li
77.3564 278.62 li
61.2764 278.62 li
cp
.678431 .364706 .156863 rgb
f
78.4585 257.435 mo
61.1938 257.435 li
61.1938 250.345 li
43.9321 250.345 li
43.9321 257.435 li
44.0947 257.435 li
41.1523 257.435 38.7671 259.819 38.7671 262.759 cv
83.7837 262.759 li
83.7837 259.819 81.3999 257.435 78.4585 257.435 cv
cp
.768627 .533333 .317647 rgb
f
78.4585 250.345 mo
61.1938 250.345 li
61.1938 257.435 li
78.4585 257.435 li
78.4585 250.345 li
cp
.678431 .364706 .156863 rgb
f
150.693 165.509 mo
150.375 167.465 149.711 169.371 148.701 171.134 cv
146.772 174.314 145.751 177.955 145.751 181.661 cv
145.751 192.711 154.615 201.712 165.603 201.973 cv
165.603 172.166 li
162.081 168.763 157.946 165.846 150.693 165.509 cv
cp
1 1 1 rgb
f
165.603 172.166 mo
165.603 201.973 li
165.765 201.977 165.923 201.997 166.086 201.997 cv
176.6 201.997 185.277 193.977 186.318 183.732 cv
174.922 183.692 170.979 177.361 165.603 172.166 cv
cp
.898039 .898039 .898039 rgb
f
149.72 145.859 mo
147.619 145.859 144.825 146.486 143.624 147.268 cv
143.624 147.268 144.293 148.974 143.881 149.366 cv
148.292 152.469 150.912 157.493 150.912 162.892 cv
150.912 163.77 150.833 164.645 150.693 165.509 cv
157.946 165.846 162.081 168.763 165.603 172.166 cv
165.603 149.744 li
165.603 147.802 li
165.603 145.859 li
149.72 145.859 li
cp
.807843 .807843 .807843 rgb
f
200 176.566 mo
198.879 178.426 197.101 179.737 194.992 180.26 cv
188.36 181.903 li
188.36 181.822 188.366 181.742 188.366 181.661 cv
188.366 177.714 187.336 174.01 185.535 170.794 cv
184.258 168.362 183.416 165.669 183.112 162.814 cv
190.234 161.049 li
192.344 160.526 194.528 160.857 196.386 161.977 cv
198.245 163.098 199.557 164.876 200.079 166.985 cv
200.929 170.414 li
201.451 172.521 201.121 174.706 200 176.566 cv
cp
205.643 169.245 mo
204.793 165.817 li
203.959 162.45 201.864 159.609 198.893 157.818 cv
195.923 156.028 192.435 155.5 189.065 156.335 cv
183.15 157.8 li
183.547 154.507 184.655 151.435 186.326 148.743 cv
186.326 148.743 187.64 145.859 183.442 145.859 cv
165.603 145.859 li
165.603 149.744 li
165.603 172.166 li
170.66 177.052 174.453 182.941 184.368 183.656 cv
183.369 192.863 175.554 200.055 166.086 200.055 cv
165.923 200.055 165.765 200.035 165.603 200.031 cv
155.685 199.77 147.694 191.641 147.694 181.661 cv
147.694 178.311 148.617 175.019 150.362 172.142 cv
150.388 172.099 li
150.414 172.055 li
152.011 169.262 152.855 166.093 152.855 162.892 cv
152.855 158.45 151.27 154.237 148.455 150.931 cv
145.523 147.488 li
144.753 146.757 144.082 146.984 143.805 147.151 cv
143.273 147.472 142.948 147.807 142.678 148.126 cv
141.787 149.178 142.284 150.174 142.678 150.534 cv
146.097 153.649 148.97 157.814 148.97 162.892 cv
148.97 165.527 148.262 167.992 147.041 170.126 cv
144.998 173.493 143.808 177.435 143.808 181.661 cv
143.808 189.827 148.205 196.964 154.758 200.843 cv
154.758 204.406 li
154.758 205.579 155.71 206.53 156.882 206.53 cv
175.292 206.53 li
176.464 206.53 177.417 205.579 177.417 204.406 cv
177.417 200.827 li
182.467 197.833 186.243 192.915 187.701 187.07 cv
196.16 184.974 li
199.527 184.14 202.368 182.044 204.16 179.073 cv
205.951 176.103 206.477 172.612 205.643 169.245 cv
cp
.678431 .678431 .678431 rgb
f
290.658 291.046 mo
269.134 291.046 li
269.134 239.267 li
290.658 239.267 li
290.658 291.046 li
cp
.231373 .192157 .160784 rgb
f
274.241 231.398 mo
273.267 230.312 271.77 230.052 270.799 230.763 cv
270.794 230.767 270.79 230.767 270.785 230.775 cv
270.738 230.808 270.692 230.845 270.646 230.886 cv
269.688 231.747 269.74 233.37 270.764 234.511 cv
271.735 235.595 273.225 235.857 274.198 235.153 cv
274.207 235.146 274.22 235.138 274.231 235.13 cv
274.276 235.097 274.317 235.062 274.358 235.025 cv
275.32 234.163 275.267 232.54 274.241 231.398 cv
cp
.678431 .364706 .156863 rgb
f
292.841 236.364 mo
293.356 234.997 292.892 233.552 291.811 233.019 cv
291.807 233.019 291.802 233.015 291.794 233.011 cv
291.744 232.987 291.689 232.962 291.631 232.941 cv
290.425 232.489 289.01 233.288 288.473 234.724 cv
287.961 236.087 288.418 237.528 289.493 238.066 cv
289.504 238.073 289.518 238.077 289.531 238.083 cv
289.58 238.109 289.63 238.126 289.682 238.15 cv
290.891 238.601 292.306 237.804 292.841 236.364 cv
cp
.419608 .188235 .0627451 rgb
f
287.045 233.402 mo
286.1 233.402 285.221 233.646 284.429 234.042 cv
284.184 231.03 281.688 228.653 278.613 228.653 cv
275.534 228.653 273.036 231.034 272.793 234.048 cv
269.959 234.462 267.775 236.878 267.775 239.829 cv
267.775 243.068 270.401 245.693 273.64 245.693 cv
275.095 245.693 276.411 245.144 277.436 244.265 cv
278.481 245.878 280.288 246.95 282.355 246.95 cv
284.039 246.95 285.549 246.228 286.619 245.087 cv
286.763 245.099 286.901 245.132 287.045 245.132 cv
290.285 245.132 292.911 242.507 292.911 239.267 cv
292.911 236.028 290.285 233.402 287.045 233.402 cv
cp
1 .854902 .733333 rgb
f
283.987 230.177 mo
284.451 228.792 283.936 227.362 282.838 226.87 cv
282.831 226.87 282.828 226.864 282.82 226.862 cv
282.767 226.839 282.711 226.818 282.654 226.798 cv
281.432 226.391 280.047 227.241 279.562 228.694 cv
279.102 230.075 279.61 231.499 280.702 231.997 cv
280.714 232.003 280.728 232.007 280.739 232.013 cv
280.791 232.036 280.841 232.054 280.895 232.073 cv
282.119 232.482 283.503 231.632 283.987 230.177 cv
cp
.678431 .364706 .156863 rgb
f
280.199 297.79 mo
276.253 297.79 li
275.142 297.79 li
273.105 297.79 271.453 299.443 271.453 301.48 cv
271.453 301.48 li
280.199 301.48 li
280.199 297.79 li
cp
.807843 .807843 .807843 rgb
f
280.199 292.814 mo
276.253 292.814 li
274.877 292.814 273.763 293.929 273.763 295.3 cv
273.763 295.302 li
280.199 295.302 li
280.199 292.814 li
cp
f
280.199 305.167 mo
276.253 305.167 li
274.911 305.167 273.829 306.228 273.774 307.552 cv
280.199 307.552 li
280.199 305.167 li
cp
f
276.253 310.146 mo
276.25 310.146 li
275.668 313.624 272.744 316.3 269.148 316.495 cv
280.199 316.495 li
280.199 310.146 li
276.253 310.146 li
cp
f
284.187 310.146 mo
284.149 310.146 li
285.521 310.146 286.635 309.032 286.635 307.655 cv
286.635 307.62 286.626 307.587 286.625 307.552 cv
286.57 306.228 285.487 305.167 284.149 305.167 cv
285.512 305.167 li
287.548 305.167 289.199 303.517 289.2 301.48 cv
289.2 301.48 li
289.2 299.443 287.548 297.79 285.512 297.79 cv
284.149 297.79 li
285.521 297.79 286.634 296.677 286.635 295.302 cv
286.635 295.3 li
286.635 293.929 285.521 292.814 284.149 292.814 cv
280.199 292.814 li
280.199 295.302 li
273.763 295.302 li
273.765 296.677 274.877 297.79 276.253 297.79 cv
280.199 297.79 li
280.199 301.48 li
271.453 301.48 li
271.454 303.517 273.105 305.167 275.142 305.167 cv
276.253 305.167 li
280.199 305.167 li
280.199 307.552 li
273.774 307.552 li
273.773 307.587 273.763 307.62 273.763 307.655 cv
273.763 309.032 274.877 310.146 276.253 310.146 cv
280.199 310.146 li
280.199 316.495 li
269.148 316.495 li
269.146 316.495 269.142 316.497 269.139 316.497 cv
269.139 318.757 li
291.258 318.757 li
291.258 316.495 li
287.679 316.284 284.766 313.614 284.187 310.146 cv
cp
.678431 .678431 .678431 rgb
f
280.199 290.042 mo
291.258 290.042 li
294.125 253.349 li
280.199 253.349 li
280.199 290.042 li
cp
.231373 .192157 .160784 rgb
f
267.072 253.349 mo
269.139 290.042 li
280.199 290.042 li
280.199 253.349 li
267.072 253.349 li
cp
.419608 .188235 .0627451 rgb
f
292.602 241.444 mo
292.915 239.267 li
280.199 239.267 li
280.199 253.349 li
294.125 253.349 li
295.056 241.444 li
292.602 241.444 li
cp
.776471 .611765 .498039 rgb
f
280.199 239.267 mo
267.637 239.267 li
266.402 241.444 li
267.072 253.349 li
280.199 253.349 li
280.199 239.267 li
cp
.827451 .74902 .686275 rgb
f
301.73 267.677 mo
301.73 272.257 298.008 276.064 293.448 276.165 cv
293.351 276.165 li
293.666 269.415 294.169 262.716 294.856 256.071 cv
298.766 256.829 301.73 260.275 301.73 264.403 cv
301.73 267.677 li
cp
295.444 250.743 mo
295.897 246.931 296.398 243.132 296.97 239.359 cv
296.97 239.267 li
292.915 239.267 li
292.335 243.288 li
290.257 258.3 289.12 273.569 288.95 288.792 cv
271.718 288.792 li
271.546 273.565 270.41 258.298 268.331 243.288 cv
267.827 239.267 li
263.684 239.267 li
266.337 256.73 267.717 274.611 267.719 292.814 cv
292.949 292.814 li
292.949 289.036 293.023 285.277 293.141 281.528 cv
293.551 281.527 li
301.018 281.358 307.093 275.148 307.093 267.677 cv
307.093 264.403 li
307.093 257.515 302.036 251.804 295.444 250.743 cv
cp
.678431 .678431 .678431 rgb
f
160.829 374.291 mo
160.827 374.291 li
160.286 377.527 157.565 380.014 154.222 380.197 cv
170.717 380.197 li
170.717 374.291 li
160.829 374.291 li
cp
f
170.696 353.996 mo
154.217 353.996 li
154.217 362.424 li
154.217 365.176 155.016 367.734 156.376 369.906 cv
170.696 369.906 li
170.696 353.996 li
cp
f
153.681 351.457 mo
152.726 351.457 151.951 352.23 151.951 353.188 cv
151.951 354.143 152.726 354.918 153.681 354.918 cv
170.696 354.918 li
170.696 351.457 li
153.681 351.457 li
cp
f
187.71 351.457 mo
170.696 351.457 li
170.696 353.996 li
170.696 354.918 li
154.213 354.918 li
154.213 357.455 li
170.696 357.455 li
170.696 369.906 li
156.376 369.906 li
158.874 373.897 163.297 376.559 168.352 376.559 cv
170.696 376.559 li
170.717 376.559 li
170.717 380.197 li
154.222 380.197 li
154.22 380.197 154.217 380.197 154.213 380.197 cv
154.213 382.301 li
187.223 382.301 li
187.223 380.197 li
183.913 380 181.222 377.545 180.661 374.35 cv
184.603 371.84 187.227 367.443 187.227 362.424 cv
187.227 354.918 li
187.71 354.918 li
188.665 354.918 189.441 354.143 189.441 353.188 cv
189.441 352.23 188.665 351.457 187.71 351.457 cv
cp
.509804 .509804 .509804 rgb
f
150.219 413.51 mo
150.219 419.387 li
156.096 419.387 li
150.219 413.51 li
cp
.678431 .364706 .156863 rgb
f
145.349 425.264 mo
151.226 425.264 li
145.349 419.387 li
145.349 425.264 li
cp
f
191.088 419.387 mo
191.088 413.51 li
170.717 413.51 li
170.717 394.053 li
154.213 394.053 li
154.213 413.51 li
150.219 413.51 li
156.096 419.387 li
150.219 419.387 li
145.349 419.387 li
151.226 425.264 li
161.972 425.264 li
196.087 425.264 li
196.087 419.387 li
191.088 419.387 li
cp
.419608 .188235 .0627451 rgb
f
173.921 394.053 mo
170.717 394.053 li
154.213 394.053 li
154.213 396.568 li
170.717 396.568 li
170.717 413.51 li
187.223 413.51 li
187.223 394.053 li
173.921 394.053 li
cp
.231373 .192157 .160784 rgb
f
184.272 408.709 mo
157.163 408.709 li
157.163 398.854 li
184.272 398.854 li
184.272 408.709 li
cp
.678431 .364706 .156863 rgb
f
150.219 382.301 mo
150.219 388.176 li
156.096 388.176 li
150.219 382.301 li
cp
f
145.349 394.053 mo
151.226 394.053 li
145.349 388.176 li
145.349 394.053 li
cp
f
191.088 388.176 mo
191.088 382.301 li
150.219 382.301 li
156.096 388.176 li
150.219 388.176 li
145.349 388.176 li
151.226 394.053 li
196.087 394.053 li
196.087 388.176 li
191.088 388.176 li
cp
.419608 .188235 .0627451 rgb
f
199.206 340.566 mo
199.206 338.844 197.809 337.447 196.087 337.447 cv
194.364 337.447 192.967 338.844 192.967 340.566 cv
192.967 342.566 li
199.206 342.566 li
199.206 340.566 li
cp
f
181.039 342.566 mo
181.039 342.576 li
177.582 346.033 li
171.993 346.033 li
171.993 345.258 li
173.862 345.258 li
173.862 344.332 li
173.862 342.609 172.465 341.211 170.742 341.211 cv
169.019 341.211 167.622 342.609 167.622 344.332 cv
167.622 345.258 li
169.444 345.258 li
169.444 348.627 li
167.622 348.627 li
167.622 351.457 li
173.814 351.457 li
173.814 348.627 li
171.993 348.627 li
171.993 347.818 li
178.336 347.818 li
178.336 347.803 li
181.788 344.352 li
199.206 344.352 li
199.206 342.566 li
181.039 342.566 li
cp
.231373 .192157 .160784 rgb
f
179.987 408.709 mo
171.3 408.709 li
168.606 406.045 li
172.916 401.602 li
179.987 408.709 li
cp
.419608 .188235 .0627451 rgb
f
173.814 403.781 mo
173.814 405.49 172.429 406.879 170.718 406.879 cv
169.008 406.879 167.622 405.49 167.622 403.781 cv
167.622 402.072 169.008 400.686 170.718 400.686 cv
172.429 400.686 173.814 402.072 173.814 403.781 cv
cp
.768627 .533333 .317647 rgb
f
387.872 366.008 mo
384.661 366.008 li
384.661 362.434 li
387.872 362.434 li
387.872 366.008 li
cp
.807843 .807843 .807843 rgb
f
388.588 362.434 mo
383.947 362.434 li
383.947 345.756 li
388.588 345.756 li
388.588 362.434 li
cp
.678431 .364706 .156863 rgb
f
379.506 371.93 mo
379.506 380.152 li
379.506 383.889 382.533 386.914 386.267 386.914 cv
386.267 365.166 li
382.533 365.166 379.506 368.195 379.506 371.93 cv
cp
.678431 .678431 .678431 rgb
f
386.267 365.166 mo
386.267 386.914 li
390.002 386.914 393.029 383.889 393.029 380.152 cv
393.029 371.93 li
393.029 368.195 390.002 365.166 386.267 365.166 cv
cp
.807843 .807843 .807843 rgb
f
376.575 377.527 mo
375.13 377.846 374.152 379.043 374.298 380.254 cv
374.3 380.262 374.298 380.268 374.3 380.272 cv
374.307 380.334 374.315 380.393 374.329 380.451 cv
374.611 381.728 376.076 382.494 377.598 382.156 cv
379.037 381.838 380.015 380.648 379.877 379.44 cv
379.877 379.426 379.873 379.41 379.871 379.397 cv
379.864 379.344 379.855 379.287 379.843 379.232 cv
379.56 377.955 378.098 377.191 376.575 377.527 cv
cp
.231373 .192157 .160784 rgb
f
381.429 407.797 mo
374.77 407.797 374.77 404.836 368.11 404.836 cv
366.758 404.836 365.367 404.641 364.047 404.27 cv
364.047 408.928 li
364.047 417.949 371.361 425.264 380.387 425.264 cv
386.267 425.264 li
386.267 406.603 li
385.052 407.287 383.595 407.797 381.429 407.797 cv
cp
.6 .6 .6 rgb
f
386.267 394.371 mo
364.047 394.371 li
364.047 404.27 li
365.367 404.641 366.758 404.836 368.11 404.836 cv
374.77 404.836 374.77 407.797 381.429 407.797 cv
383.595 407.797 385.052 407.287 386.267 406.603 cv
386.267 425.264 li
392.185 425.264 li
401.208 425.264 408.524 417.949 408.524 408.928 cv
408.524 406.232 li
408.524 394.371 li
386.267 394.371 li
cp
.509804 .509804 .509804 rgb
f
380.977 379.154 mo
379.645 378.508 378.138 378.838 377.499 379.875 cv
377.497 379.887 377.492 379.889 377.49 379.897 cv
377.458 379.945 377.429 379.998 377.402 380.055 cv
376.83 381.23 377.506 382.738 378.907 383.418 cv
380.235 384.063 381.738 383.736 382.382 382.703 cv
382.389 382.691 382.395 382.678 382.402 382.666 cv
382.432 382.619 382.458 382.57 382.483 382.518 cv
383.055 381.34 382.381 379.834 380.977 379.154 cv
cp
.419608 .188235 .0627451 rgb
f
378.234 380.959 mo
376.901 380.313 375.394 380.645 374.754 381.684 cv
374.752 381.691 374.75 381.695 374.745 381.699 cv
374.715 381.752 374.685 381.803 374.659 381.859 cv
374.088 383.037 374.762 384.545 376.163 385.223 cv
377.49 385.869 378.993 385.543 379.637 384.508 cv
379.645 384.496 379.651 384.484 379.66 384.473 cv
379.686 384.426 379.715 384.375 379.739 384.324 cv
380.31 383.147 379.636 381.641 378.234 380.959 cv
cp
.678431 .364706 .156863 rgb
f
384.843 377.641 mo
383.511 376.994 382.003 377.326 381.363 378.365 cv
381.361 378.371 381.356 378.375 381.354 378.381 cv
381.323 378.434 381.293 378.484 381.267 378.541 cv
380.695 379.719 381.37 381.227 382.772 381.904 cv
384.099 382.551 385.603 382.225 386.246 381.19 cv
386.254 381.18 386.261 381.166 386.267 381.156 cv
386.295 381.107 386.323 381.055 386.349 381.006 cv
386.919 379.828 386.245 378.322 384.843 377.641 cv
cp
f
398.81 373.978 mo
397.477 373.332 395.97 373.662 395.33 374.701 cv
395.326 374.709 395.324 374.713 395.319 374.719 cv
395.29 374.772 395.259 374.822 395.233 374.877 cv
394.662 376.057 395.335 377.565 396.738 378.242 cv
398.064 378.889 399.569 378.563 400.211 377.525 cv
400.22 377.516 400.226 377.502 400.234 377.492 cv
400.262 377.443 400.289 377.393 400.314 377.344 cv
400.886 376.164 400.211 374.66 398.81 373.978 cv
cp
.768627 .533333 .317647 rgb
f
393.745 378.525 mo
393.749 377.045 392.795 375.83 391.58 375.707 cv
391.574 375.707 391.567 375.705 391.561 375.705 cv
391.502 375.699 391.442 375.695 391.381 375.695 cv
390.072 375.693 389.008 376.953 389.003 378.514 cv
389.001 379.988 389.949 381.199 391.159 381.33 cv
391.173 381.332 391.186 381.332 391.199 381.334 cv
391.256 381.34 391.31 381.342 391.369 381.342 cv
392.677 381.344 393.742 380.084 393.745 378.525 cv
cp
.231373 .192157 .160784 rgb
f
397.078 376.5 mo
396.159 375.338 394.656 374.982 393.629 375.641 cv
393.624 375.647 393.618 375.648 393.613 375.652 cv
393.563 375.686 393.514 375.721 393.466 375.758 cv
392.439 376.57 392.392 378.221 393.36 379.441 cv
394.275 380.6 395.77 380.957 396.801 380.305 cv
396.811 380.299 396.823 380.291 396.834 380.283 cv
396.882 380.252 396.927 380.219 396.972 380.186 cv
397.998 379.371 398.046 377.723 397.078 376.5 cv
cp
.419608 .188235 .0627451 rgb
f
382.761 380.815 mo
381.282 380.818 380.071 381.775 379.952 382.99 cv
379.952 382.998 379.951 383.004 379.951 383.012 cv
379.946 383.07 379.941 383.129 379.942 383.193 cv
379.946 384.502 381.212 385.559 382.77 385.557 cv
384.245 385.551 385.455 384.6 385.578 383.391 cv
385.58 383.375 385.58 383.361 385.583 383.348 cv
385.586 383.291 385.59 383.234 385.59 383.18 cv
385.586 381.871 384.321 380.813 382.761 380.815 cv
cp
.768627 .533333 .317647 rgb
f
403.634 379.576 mo
404.103 378.17 403.579 376.717 402.465 376.217 cv
402.459 376.217 402.453 376.213 402.447 376.211 cv
402.394 376.186 402.338 376.164 402.279 376.145 cv
401.038 375.73 399.632 376.594 399.138 378.07 cv
398.67 379.473 399.186 380.92 400.297 381.424 cv
400.308 381.43 400.322 381.436 400.334 381.44 cv
400.386 381.465 400.438 381.482 400.491 381.502 cv
401.733 381.916 403.14 381.055 403.634 379.576 cv
cp
.678431 .364706 .156863 rgb
f
371.433 382.869 mo
371.902 381.465 371.379 380.012 370.265 379.512 cv
370.259 379.512 370.253 379.506 370.248 379.506 cv
370.193 379.48 370.138 379.459 370.078 379.44 cv
368.837 379.023 367.431 379.889 366.938 381.365 cv
366.469 382.766 366.987 384.215 368.097 384.717 cv
368.107 384.723 368.121 384.728 368.134 384.734 cv
368.185 384.758 368.238 384.775 368.29 384.795 cv
369.533 385.211 370.939 384.35 371.433 382.869 cv
cp
.231373 .192157 .160784 rgb
f
374.926 380.416 mo
374.384 379.041 373.048 378.262 371.873 378.596 cv
371.868 378.598 371.862 378.598 371.855 378.602 cv
371.799 378.617 371.742 378.637 371.684 378.66 cv
370.467 379.139 369.942 380.707 370.515 382.156 cv
371.057 383.527 372.384 384.307 373.558 383.978 cv
373.571 383.977 373.585 383.971 373.598 383.969 cv
373.651 383.951 373.704 383.934 373.756 383.912 cv
374.976 383.434 375.497 381.867 374.926 380.416 cv
cp
.419608 .188235 .0627451 rgb
f
389.223 382.504 mo
389.981 381.236 389.784 379.701 388.802 378.973 cv
388.796 378.971 388.793 378.967 388.786 378.963 cv
388.739 378.93 388.689 378.895 388.637 378.861 cv
387.514 378.191 385.953 378.73 385.154 380.07 cv
384.395 381.334 384.59 382.861 385.564 383.592 cv
385.575 383.602 385.586 383.609 385.598 383.617 cv
385.644 383.65 385.689 383.682 385.738 383.707 cv
386.863 384.381 388.422 383.84 389.223 382.504 cv
cp
f
394.652 385.557 mo
387.991 385.557 387.991 390.863 381.331 390.863 cv
374.675 390.863 374.675 389.223 368.02 389.223 cv
363.737 389.223 362.259 389.19 358.47 388.031 cv
358.044 388.949 357.705 389.957 357.466 391.055 cv
356.29 396.477 362.563 399.732 368.11 399.732 cv
374.77 399.732 374.77 402.693 381.429 402.693 cv
388.09 402.693 388.09 397.891 394.75 397.891 cv
401.406 397.891 401.406 401.152 408.063 401.152 cv
413.606 401.152 413.884 396.486 415.011 391.055 cv
415.142 390.428 415.215 389.799 415.236 389.17 cv
412.943 389.045 411.41 387.965 407.974 386.84 cv
404.243 385.621 401.313 385.557 394.652 385.557 cv
cp
.678431 .678431 .678431 rgb
f
408.063 379.617 mo
404.334 378.398 401.401 378.334 394.741 378.334 cv
388.082 378.334 388.082 383.639 381.421 383.639 cv
374.765 383.639 374.765 382.002 368.11 382.002 cv
363.633 382.002 360.257 384.19 358.47 388.031 cv
362.259 389.19 363.737 389.223 368.02 389.223 cv
374.675 389.223 374.675 390.863 381.331 390.863 cv
387.991 390.863 387.991 385.557 394.652 385.557 cv
401.313 385.557 404.243 385.621 407.974 386.84 cv
411.41 387.965 412.943 389.045 415.236 389.17 cv
415.379 385.162 413.26 381.316 408.063 379.617 cv
cp
.807843 .807843 .807843 rgb
f
270.223 403.086 mo
270.223 419.195 li
281.204 419.195 li
281.204 403.086 li
270.223 403.086 li
cp
f
281.204 362.932 mo
266.21 362.932 li
266.21 396.656 li
281.204 396.656 li
281.204 362.932 li
cp
f
296.197 362.932 mo
281.204 362.932 li
281.204 396.656 li
266.21 396.656 li
266.21 404.316 272.42 410.527 280.08 410.527 cv
281.204 410.527 li
281.204 419.195 li
292.184 419.195 li
292.184 406.408 li
294.664 403.902 296.197 400.459 296.197 396.656 cv
296.197 362.932 li
cp
.678431 .678431 .678431 rgb
f
293.028 380.066 mo
293.028 386.598 287.731 391.889 281.205 391.889 cv
274.678 391.889 269.38 386.598 269.38 380.066 cv
269.38 373.539 274.678 368.246 281.205 368.246 cv
287.731 368.246 293.028 373.539 293.028 380.066 cv
cp
1 1 1 rgb
f
280.389 386.6 mo
280.378 386.547 280.365 386.488 280.349 386.428 cv
280.342 386.367 280.339 386.305 280.331 386.238 cv
280.313 386.105 280.308 385.961 280.299 385.799 cv
280.299 385.488 280.339 385.113 280.409 384.758 cv
280.482 384.395 280.538 384.063 280.571 383.738 cv
280.576 383.578 280.571 383.434 280.576 383.281 cv
280.58 383.248 280.58 383.211 280.576 383.152 cv
280.573 382.992 li
280.569 382.885 280.564 382.779 280.559 382.67 cv
280.55 382.506 li
280.55 382.424 li
280.55 382.418 li
280.545 382.539 280.547 382.451 280.545 382.477 cv
280.545 382.467 li
280.542 382.449 li
280.537 382.416 li
280.527 382.322 280.516 382.23 280.503 382.137 cv
280.494 382.045 280.482 381.949 280.468 381.857 cv
280.459 381.764 280.433 381.684 280.415 381.596 cv
280.394 381.514 280.378 381.428 280.363 381.342 cv
280.336 381.256 280.305 381.172 280.282 381.088 cv
280.238 380.932 280.15 380.717 280.082 380.529 cv
279.998 380.283 279.909 380.074 279.843 379.785 cv
279.805 379.647 279.771 379.514 279.743 379.375 cv
279.719 379.223 279.7 379.074 279.683 378.924 cv
279.663 378.699 li
279.66 378.629 279.645 378.543 279.652 378.494 cv
279.66 378.383 279.663 378.268 279.667 378.158 cv
279.672 378.045 279.675 377.935 279.681 377.826 cv
279.683 377.785 li
279.683 377.766 li
279.683 377.758 li
279.683 377.75 li
279.683 377.625 279.687 377.713 279.687 377.682 cv
279.702 377.59 li
279.727 377.402 li
279.778 377.156 279.796 376.922 279.87 376.682 cv
279.948 376.445 280.004 376.211 280.102 375.996 cv
280.204 375.789 280.297 375.57 280.408 375.4 cv
280.514 375.234 280.618 375.055 280.713 374.93 cv
280.915 374.652 281.07 374.42 281.209 374.193 cv
281.273 374.084 281.324 373.977 281.387 373.873 cv
281.418 373.822 281.445 373.772 281.471 373.723 cv
281.496 373.67 281.519 373.617 281.538 373.568 cv
281.618 373.373 281.696 373.221 281.741 373.115 cv
281.763 373.068 281.783 373.035 281.793 373.008 cv
281.645 372.992 281.495 372.98 281.343 372.977 cv
278.053 372.914 275.325 376.037 275.247 379.955 cv
275.174 383.66 277.501 386.746 280.538 387.123 cv
280.533 387.109 280.533 387.102 280.527 387.086 cv
280.496 386.975 280.438 386.815 280.389 386.6 cv
cp
.768627 .533333 .317647 rgb
f
281.841 373.012 mo
281.85 373.039 281.864 373.078 281.875 373.125 cv
281.907 373.236 281.963 373.398 282.015 373.603 cv
282.026 373.656 282.041 373.709 282.058 373.768 cv
282.061 373.828 282.069 373.891 282.074 373.961 cv
282.091 374.096 282.095 374.242 282.103 374.41 cv
282.102 374.727 282.068 375.096 281.993 375.453 cv
281.963 375.619 281.929 375.795 281.896 375.978 cv
281.864 376.152 281.857 376.307 281.833 376.473 cv
281.824 376.637 281.824 376.809 281.822 376.975 cv
281.822 377.145 281.837 377.336 281.846 377.52 cv
281.855 377.656 li
281.855 377.727 li
281.855 377.701 281.857 377.789 281.855 377.67 cv
281.857 377.676 li
281.857 377.685 li
281.86 377.705 li
281.864 377.748 li
281.875 377.855 281.889 377.967 281.898 378.078 cv
281.912 378.188 281.922 378.297 281.936 378.412 cv
281.941 378.477 281.954 378.498 281.963 378.541 cv
281.993 378.648 li
282.015 378.723 282.026 378.797 282.041 378.871 cv
282.069 378.955 282.1 379.039 282.124 379.123 cv
282.164 379.277 282.255 379.494 282.323 379.682 cv
282.406 379.928 282.498 380.137 282.564 380.428 cv
282.6 380.563 282.636 380.699 282.664 380.836 cv
282.686 380.977 282.699 381.113 282.717 381.254 cv
282.728 381.391 282.754 381.533 282.754 381.662 cv
282.749 381.793 282.744 381.922 282.742 382.053 cv
282.735 382.18 282.731 382.309 282.724 382.435 cv
282.719 382.59 li
282.704 382.67 li
282.677 382.83 li
282.656 382.935 282.638 383.043 282.616 383.147 cv
282.6 383.258 282.588 383.34 282.543 383.482 cv
282.469 383.738 282.406 383.996 282.307 384.217 cv
282.205 384.424 282.112 384.643 282.002 384.81 cv
281.896 384.978 281.785 385.158 281.696 385.281 cv
281.491 385.56 281.343 385.791 281.196 386.02 cv
281.135 386.139 281.079 386.248 281.015 386.352 cv
280.988 386.404 280.959 386.455 280.93 386.506 cv
280.911 386.555 280.891 386.605 280.868 386.65 cv
280.791 386.838 280.711 386.988 280.661 387.094 cv
280.658 387.109 280.654 387.121 280.645 387.135 cv
280.783 387.148 280.924 387.16 281.065 387.162 cv
284.356 387.225 287.081 384.103 287.161 380.185 cv
287.233 376.469 284.889 373.377 281.841 373.012 cv
cp
f
247.684 357.262 mo
264.431 357.262 li
264.431 351.193 li
253.752 351.193 li
247.684 351.193 247.684 357.262 247.684 357.262 cv
cp
.807843 .807843 .807843 rgb
f
247.684 357.215 mo
247.684 383.516 li
247.684 387.607 249.685 389.691 251.73 390.762 cv
251.73 357.215 li
247.684 357.215 li
cp
.419608 .188235 .0627451 rgb
f
256.058 357.215 mo
251.73 357.215 li
251.73 390.762 li
253.87 391.881 256.058 391.889 256.058 391.889 cv
256.058 357.215 li
cp
.231373 .192157 .160784 rgb
f
270.223 419.195 mo
270.223 425.264 li
281.204 425.264 li
281.204 419.195 li
270.223 419.195 li
cp
.419608 .188235 .0627451 rgb
f
292.184 419.195 mo
281.204 419.195 li
281.204 425.264 li
292.184 425.264 li
292.184 419.195 li
cp
.231373 .192157 .160784 rgb
f
281.204 346.666 mo
281.204 362.932 li
297.975 362.932 li
297.975 346.666 li
281.204 346.666 li
cp
f
264.431 346.666 mo
264.431 373.348 li
265.687 373.348 li
268.192 367.238 274.192 362.932 281.204 362.932 cv
281.204 346.666 li
264.431 346.666 li
cp
.419608 .188235 .0627451 rgb
f
190.005 296.319 mo
190.005 251.716 li
179.693 251.716 li
178.171 251.716 176.938 252.95 176.938 254.47 cv
176.938 296.319 li
176.938 316.003 li
176.938 317.522 178.171 318.757 179.693 318.757 cv
200.525 318.757 li
202.045 318.757 203.279 317.522 203.279 316.003 cv
203.279 296.319 li
190.005 296.319 li
cp
.231373 .192157 .160784 rgb
f
160.463 307.278 mo
147.501 307.278 li
142.364 307.278 138.185 303.077 138.185 297.915 cv
138.185 292.753 142.364 288.554 147.501 288.554 cv
160.463 288.554 li
160.463 293.177 li
147.501 293.177 li
144.913 293.177 142.809 295.302 142.809 297.915 cv
142.809 300.528 144.913 302.655 147.501 302.655 cv
160.463 302.655 li
160.463 307.278 li
cp
f
175.253 288.556 mo
175.248 288.552 175.242 288.548 175.237 288.546 cv
156.348 288.546 li
153.959 289.972 152.264 292.95 150.779 296.319 cv
181.085 296.319 li
179.606 292.929 177.657 289.976 175.253 288.556 cv
cp
.807843 .807843 .807843 rgb
f
146.23 309.124 mo
143.131 312.308 143.131 318.757 143.131 318.757 cv
188.431 318.757 li
188.431 318.757 188.224 312.212 185.404 309.124 cv
146.23 309.124 li
cp
.509804 .509804 .509804 rgb
f
152.743 309.124 mo
150.256 312.021 150.256 318.569 150.256 318.569 cv
181.287 318.569 li
181.287 318.569 180.806 311.681 178.85 309.124 cv
152.743 309.124 li
cp
.231373 .192157 .160784 rgb
f
150.779 296.319 mo
149.913 298.282 149.154 300.37 148.612 302.36 cv
183.168 302.36 li
182.632 300.343 181.933 298.263 181.085 296.319 cv
150.779 296.319 li
cp
.419608 .188235 .0627451 rgb
f
193.197 301.585 mo
193.197 303.347 191.768 304.776 190.005 304.776 cv
188.242 304.776 186.813 303.347 186.813 301.585 cv
186.813 299.823 188.242 298.394 190.005 298.394 cv
191.768 298.394 193.197 299.823 193.197 301.585 cv
cp
.509804 .509804 .509804 rgb
f
191.29 301.583 mo
191.29 302.294 190.715 302.872 190.005 302.872 cv
189.295 302.872 188.719 302.294 188.719 301.583 cv
188.719 300.874 189.295 300.298 190.005 300.298 cv
190.715 300.298 191.29 300.874 191.29 301.583 cv
cp
.678431 .364706 .156863 rgb
f
200.525 251.716 mo
190.005 251.716 li
190.005 296.319 li
203.279 296.319 li
203.279 254.47 li
203.279 252.95 202.045 251.716 200.525 251.716 cv
cp
.509804 .509804 .509804 rgb
f
156.326 281.919 mo
175.216 281.919 li
184.6 281.919 190.005 251.716 190.005 251.716 cv
141.539 251.716 li
141.539 251.716 146.639 281.919 156.326 281.919 cv
cp
f
151.639 251.716 mo
151.639 251.716 154.624 281.927 160.294 281.927 cv
171.352 281.927 li
176.845 281.927 180.009 251.716 180.009 251.716 cv
151.639 251.716 li
cp
.231373 .192157 .160784 rgb
f
183.987 305.874 mo
183.986 305.864 183.985 305.851 183.985 305.851 cv
183.779 304.743 183.509 303.565 183.191 302.366 cv
182.654 300.351 181.955 298.269 181.108 296.325 cv
180.72 295.437 180.299 294.575 179.846 293.765 cv
178.57 291.478 177.037 289.597 175.257 288.552 cv
174.689 289.173 174.335 289.991 174.335 290.901 cv
174.335 291.534 174.516 292.12 174.81 292.632 cv
175.074 292.911 175.338 293.224 175.602 293.577 cv
176.406 294.651 177.198 296.034 177.93 297.712 cv
178.66 299.386 179.32 301.304 179.839 303.257 cv
180.059 304.087 180.253 304.894 180.413 305.661 cv
151.185 305.661 li
151.347 304.905 151.543 304.107 151.769 303.278 cv
152.3 301.325 152.973 299.405 153.715 297.726 cv
154.464 296.025 155.283 294.614 156.107 293.525 cv
156.343 293.212 156.577 292.929 156.813 292.673 cv
157.121 292.151 157.309 291.552 157.309 290.901 cv
157.309 289.989 156.953 289.169 156.383 288.546 cv
154.615 289.595 153.085 291.489 151.807 293.772 cv
151.353 294.583 150.932 295.442 150.542 296.325 cv
149.676 298.288 148.965 300.376 148.423 302.366 cv
148.09 303.591 147.811 304.78 147.605 305.874 cv
147.605 305.874 147.605 309.13 150.934 309.13 cv
180.705 309.13 li
184.272 309.13 184.014 306.116 183.987 305.874 cv
cp
.678431 .678431 .678431 rgb
f
183.168 302.36 mo
148.401 302.36 li
148.068 303.585 147.789 304.775 147.582 305.866 cv
183.965 305.866 li
183.964 305.857 183.963 305.843 183.963 305.843 cv
183.756 304.735 183.487 303.56 183.168 302.36 cv
cp
.807843 .807843 .807843 rgb
f
172.244 285.519 mo
159.382 285.519 li
157.706 285.519 156.348 286.876 156.348 288.554 cv
175.278 288.554 li
175.278 286.876 173.92 285.519 172.244 285.519 cv
cp
.231373 .192157 .160784 rgb
f
55.1421 392.318 mo
55.1421 392.318 55.0054 391.816 54.8467 390.943 cv
54.7378 390.523 54.7876 389.93 54.8101 389.244 cv
54.896 388.592 55.0405 387.82 55.2935 387.098 cv
55.5347 386.355 55.7583 385.664 55.8896 384.977 cv
55.9561 384.629 55.959 384.266 56.0054 383.912 cv
56.0371 383.553 55.9863 383.143 55.9888 382.758 cv
55.9819 382.463 li
55.9785 382.316 li
55.9741 382.199 55.9844 382.467 55.9819 382.436 cv
55.981 382.424 li
55.9775 382.402 li
55.9731 382.359 li
55.9614 382.272 li
55.8726 381.572 li
55.7822 380.861 li
55.7427 380.651 55.6772 380.533 55.6343 380.367 cv
55.5024 379.893 li
55.4199 379.719 55.3433 379.543 55.2729 379.363 cv
55.1646 379.026 54.896 378.594 54.7095 378.207 cv
54.478 377.705 54.229 377.295 54.0249 376.703 cv
53.7212 375.869 li
53.54 374.996 li
53.4897 374.707 53.416 374.412 53.3926 374.133 cv
53.3745 373.299 li
53.3633 372.483 li
53.3633 372.381 li
53.3677 372.154 li
53.394 371.98 li
53.4443 371.639 li
53.5347 371.158 53.5347 370.789 53.6958 370.238 cv
53.8643 369.699 53.9951 369.139 54.2153 368.691 cv
54.6411 367.781 55.1582 367.057 55.5801 366.486 cv
56.0249 365.908 56.3521 365.418 56.6523 364.934 cv
56.8555 364.428 57.1738 363.992 57.2764 363.584 cv
57.5488 362.779 57.7539 362.283 57.7539 362.283 cv
57.7539 362.283 57.894 362.764 58.0498 363.674 cv
58.1567 364.131 58.104 364.691 58.0884 365.361 cv
58.0093 366.006 57.8613 366.785 57.6094 367.508 cv
57.3677 368.246 57.1445 368.938 57.0137 369.627 cv
56.9463 369.969 56.9595 370.277 56.9111 370.596 cv
56.876 370.908 56.9131 371.457 56.9111 371.891 cv
56.9165 372.236 li
56.9189 372.412 li
56.9189 372.424 li
56.9268 372.168 56.9209 372.358 56.9233 372.305 cv
56.9253 372.322 li
56.9321 372.359 li
56.9434 372.434 li
57.0273 373.023 li
57.0723 373.426 57.1265 373.818 57.248 374.166 cv
57.395 374.709 li
57.4785 374.885 57.5508 375.061 57.6211 375.238 cv
57.7305 375.578 57.9976 376.01 58.1826 376.397 cv
58.4121 376.897 58.6636 377.307 58.8682 377.897 cv
58.9751 378.174 59.0747 378.453 59.1694 378.733 cv
59.2437 379.041 59.3052 379.361 59.3657 379.674 cv
59.418 379.979 59.4946 380.326 59.5127 380.59 cv
59.5171 381.307 li
59.5234 382.014 li
59.5288 382.318 li
59.5024 382.518 li
59.4497 382.916 li
59.3589 383.445 59.3433 383.951 59.1831 384.457 cv
59.0112 384.961 58.894 385.463 58.6772 385.908 cv
58.252 386.818 57.7358 387.541 57.3115 388.113 cv
56.8691 388.69 56.5381 389.188 56.2412 389.662 cv
56.0449 390.152 55.7246 390.555 55.6196 391 cv
55.3442 391.842 55.1421 392.318 55.1421 392.318 cv
cp
.305882 .376471 .580392 rgb
f
66.9395 392.318 mo
66.9395 392.318 66.8018 391.816 66.6426 390.943 cv
66.5356 390.523 66.5854 389.93 66.6079 389.244 cv
66.6914 388.592 66.8369 387.82 67.0898 387.098 cv
67.3325 386.355 67.5562 385.664 67.687 384.977 cv
67.7524 384.629 67.7568 384.266 67.8022 383.912 cv
67.8335 383.553 67.7842 383.143 67.7852 382.758 cv
67.7783 382.463 li
67.7749 382.316 li
67.7705 382.199 67.7822 382.467 67.7793 382.436 cv
67.7769 382.424 li
67.7749 382.402 li
67.769 382.359 li
67.7593 382.272 li
67.6689 381.572 li
67.5786 380.861 li
67.5391 380.651 67.4751 380.533 67.4321 380.367 cv
67.2983 379.893 li
67.2173 379.719 67.1406 379.543 67.0703 379.363 cv
66.9614 379.026 66.6938 378.594 66.5063 378.207 cv
66.2739 377.705 66.0254 377.295 65.8208 376.703 cv
65.5176 375.869 li
65.3369 374.996 li
65.2871 374.707 65.2129 374.412 65.188 374.133 cv
65.1709 373.299 li
65.1602 372.483 li
65.1582 372.381 li
65.1655 372.154 li
65.1899 371.98 li
65.2422 371.639 li
65.3325 371.158 65.3315 370.789 65.4927 370.238 cv
65.6616 369.699 65.793 369.139 66.0117 368.691 cv
66.4385 367.781 66.9541 367.057 67.3774 366.486 cv
67.8213 365.908 68.1499 365.418 68.4492 364.934 cv
68.6533 364.428 68.9702 363.992 69.0732 363.584 cv
69.3462 362.779 69.5518 362.283 69.5518 362.283 cv
69.5518 362.283 69.6904 362.764 69.8472 363.674 cv
69.9536 364.131 69.9019 364.691 69.8857 365.361 cv
69.8042 366.006 69.6582 366.785 69.4058 367.508 cv
69.1646 368.246 68.9399 368.938 68.8101 369.627 cv
68.7432 369.969 68.7568 370.277 68.707 370.596 cv
68.6733 370.908 68.7095 371.457 68.707 371.891 cv
68.7129 372.236 li
68.7139 372.412 li
68.7139 372.424 li
68.7231 372.168 68.7188 372.358 68.7212 372.305 cv
68.7231 372.322 li
68.729 372.359 li
68.7388 372.434 li
68.8247 373.023 li
68.8696 373.426 68.9243 373.818 69.0459 374.166 cv
69.1904 374.709 li
69.2739 374.885 69.3477 375.061 69.4185 375.238 cv
69.5269 375.578 69.7954 376.01 69.9805 376.397 cv
70.209 376.897 70.4604 377.307 70.6646 377.897 cv
70.7729 378.174 70.8726 378.453 70.9673 378.733 cv
71.0415 379.041 71.1025 379.361 71.1621 379.674 cv
71.2144 379.979 71.291 380.326 71.3091 380.59 cv
71.3149 381.307 li
71.3213 382.014 li
71.3262 382.318 li
71.2988 382.518 li
71.2456 382.916 li
71.1558 383.445 71.1396 383.951 70.978 384.457 cv
70.8066 384.961 70.6919 385.463 70.4727 385.908 cv
70.0479 386.818 69.5322 387.541 69.1089 388.113 cv
68.6655 388.69 68.335 389.188 68.0391 389.662 cv
67.8403 390.152 67.521 390.555 67.416 391 cv
67.1406 391.842 66.9395 392.318 66.9395 392.318 cv
cp
f
36.334 395.855 mo
36.334 410.221 47.979 421.865 62.3447 421.865 cv
62.3447 395.855 li
36.334 395.855 li
cp
.807843 .807843 .807843 rgb
f
87.4917 402.51 mo
89.9595 402.51 li
91.7236 402.51 93.1592 403.945 93.1592 405.709 cv
93.1592 407.473 91.7236 408.908 89.9595 408.908 cv
84.8384 408.908 li
85.9907 406.926 86.8926 404.779 87.4917 402.51 cv
cp
62.3447 425.264 mo
72.2168 425.264 li
76.8794 422.645 82.2397 421.125 87.9536 421.057 cv
88.0879 421.045 88.2144 421.01 88.3545 421.01 cv
88.3545 418.748 li
74.6973 418.748 li
77.6729 417.139 80.2998 414.969 82.4341 412.375 cv
89.9595 412.375 li
93.6357 412.375 96.627 409.385 96.627 405.709 cv
96.627 402.033 93.6357 399.041 89.9595 399.041 cv
88.1533 399.041 li
88.2813 397.996 88.3545 396.934 88.3545 395.855 cv
62.3447 395.855 li
62.3447 418.748 li
36.334 418.748 li
36.334 421.008 li
36.3374 421.008 36.3408 421.01 36.3428 421.01 cv
36.5034 421.01 36.6499 421.043 36.8037 421.059 cv
42.4902 421.137 47.8267 422.654 52.4717 425.264 cv
62.3447 425.264 li
cp
.678431 .678431 .678431 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.0.0
%%For: (IvAN) ()
%%Title: (1410.i047.014.P.m004.c20.coffee icons flat.eps)
%%CreationDate: 10/6/2014 2:54 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdOtHHT'P\A+Rdqe\b63>+:uEBfZ&I9"UdnPN&GJ9DU4+0gY]LcZ:\,s&en-rUSW+qbWIkLQ"spK*D:#$]!]p,[&WfM
%kskR=eXVq0Z"u"Is([&]kLQc5p&/(__@jh2A^INdqKq%AV:OsL[N"UOD`,$"ZeW^:.%ep@jkPVpUXB&k\'ZU*cKUh8NdXm,2eo14
%[or.^S@lj0o8#V[e"a+F!rU;bpLpHrUk;jc:S"/i\_[5ONG+O>)#gl6Btngpn+F<SI_FS6EYh.P4-!9g;!XA-#HDStVpg-]kf6r5
%G#BA<qU/tn=Gm+Ehp%jPqmfcK:jW&)6Oi;X+&2](rhXrb+o'B@NrM<pQM_,?)`]]e8NV9G7C6Jo!=(DT59&ki4ja6X9AE+_i*ib@
%BpAKP?7Njso6,"?r_N/.6"*q!0"Bn<0-+fU2JE`*Y'qHFD=,YqmB>'qdos:cl`([NFSc=9s3aLgG#78u6)3"Ze#N.VWZ7o31ANTW
%eQRT[2Z15;.._IK7`PJ/8fX//VmS_Y?b8&.gooj&/bn_pTXe;+=TbSdWf^AR>3iEkQ92ZeBQd]@9eU.hGuN29S=]Ith5A*bDGJe7
%$YtI9>l$[2co/)+C&ukYZCi'ObHj]dpo7O_Xg_>`3E%K?h5sb6*9nG&:]?-Mc?k]RqS@Y]^M+J[rE:]gLi+2L^529iQ@En)VRKaZ
%c#scDdDJ1-Ls'#0!?1?(p$;)hr#8Wjkbta?iTOjB5,bqenK7dV.DL-uH]8()\D;!43]jI-p)j<;.TG0C[G9M?V;L^h!`sHHNka%-
%mcKg[+6F'FjU0O(rsm65bOs0:9.H`WG&',6Q+l@0#6-X*pU!L`?48=ql;m5s>,0o1<%R.:e@=*Y\'!MHrt&5@>Q9n9.FUBgX$jd-
%s*^b*M-2kr/R/[M)6*Xf!g0*12-'(:O\DmbWkGW[q<,!F(lcnJe9LJhH/*;eHd/e/-tTU;mFNkJg;2*A^Qr_g_:dYqX-Rk846W6s
%%bpBjE&+5>qJ!IHh7e9SFF5fkXbC,Y[7!7);Ce6u7\bFd/U,M*Q*c9DILfYArcY,-%k>43C$ilh$CarS.;U<gXK?6."QGf.Ipnat
%^WQMtfl$c`P)Y@,4fPn]%He3*omUbf7dXdm3%]>n<pnI^]*9PlL/lqtUa`%,?tJFt*MI9>j2'Je6>_,NJ-Y&j\Q/LXq\Qjt8\=TO
%`Hh^1]%m70a\Q]_V8&LZ(B(a01XiHJ&,J-rABRrVd-[,hb>cdPNG>rRiY"`K_%$e8n43CPs!NOq5;)2hG3a&6_#[Qi3fOsPZeQCr
%;Ld5trNe5t>32WGU(4,Bb>UQkZWd>"XIioX6,?,%-d,osc7k9n-T?]:_kDl`FSU_fGcreNc7l\/l"OJ&T,@k)F)jVrll6`YS[7mL
%Iech*eI5qRU#g)RSi3"h+*<Rc12Bm)Qd:A5Fm3^qPttpU`oZ5o%@XIMrUQSg/=S7qGZ&$d[1E+VJcV2KXiKO2^h4NhXRsF68m\hW
%+4tSD="AE/56f'+=iAKSq+2#*g["FHF_eZV,E%it$>'u1j8,iaeE>#?<pfB3Tb6P\`A9`@70/pnCln$ZX]m,7SmbKN7AlWulE,'3
%0rE,jC/P-oBFh\>g9t+C=[nWi5SN$.CkME5.a,&%IT%m:4C6lq#K>CgDJ`h):#01mVVK%Q>F9Hk9K?lsb+3XtA>h=k[d1VP1$16m
%lGApX/n6Md:M!tX/SqtO/[qtG(:N#8Q@o!Cc''`GBeV>QbH2V&@*N7%`:R7p)mqnGNJ"QX[Je]$FHss-kk2!qg7NL_g<9\nUW"Ug
%d`7?`38+9AETRCD!*e^ZK*&L)K3k`fDJb>>X6IXKm?<`?Xa`Y2B9C_"8;(^n0jgKESBisF/Gce96%te&K$DGEJ&PW'-?j_;kRlKq
%'g<#qf@bD\-)NPL2R<)^<Ok\@)02HY%E:!D/BY.)Gn@YTpS;&n*E:27Q7,d]IcS=uicH'hLR<,/.!N0"m^-3+<Yhi2IPS//AfooB
%]@H56Y;EuP-SoLVXOru-JH_q,)V2;i_jGIkR#Ll8_t\/)@Jk?/(h9aTDtS=\3JEcK?T/JE<o$cc@4":dgk>mn&*R9G-SY4uNm'"1
%.lP`(U)_W/!A^U-o5Rk[\e$8H`E;IhbJ#s.i3p]^"uFF>bfPj<go^=sR^IU1)!4M+Pt&I5a-l*]X^".#:VBBB,/_Fr$=eG'R^AO`
%Q_si]_jR,Th0P@%_5o3OMd#k^L7+Q'[$+dWcf]WPem9o5I!ueGe/)7Oj$kip/0?skBVsReq<p;KZ''t6VVH;ufK%Z%[i6:B>4''B
%_NFG]a&K2$B!s_+0(jUHKD=8C[6D[;pO[u1ErsRJOo3u)Z)2YTI^T+KD0WDCm@<.<^'s"J$I+Zd(n5h+p7%'q:$ormG2\_JT[,rL
%rD-H<6`=I+[`6HPjM>Fh"?5`FHNL*%Ib+dri@NVA4;a\6;fm"5?B&eo%`W,]Ou%D<r\t9TSe^@T8S1c3ilSDKZ_D\Vr.9O\E="6R
%\N-tbeb&$*A6>"$ecQ[$5$9TVdON.\>X_gjA.\VU,&!HYj]8G532e_0JW),\[DXGV)IFXTf]h\]97AX)D,[P13fS0VL'L^bPWL\#
%EggR>/joPX-7k_J%*jg"d@\>>R<"-Kp"5n'&"<OB@fHQ7Vcp`/]oJPs"bXQ_`lYPk(C>r_Q>]od.F."n*uV^P1F)0?D4%<[obge@
%hU>Cu18a<+e/OB`BiL)6/SLp9Wg,AN/sB::_8CpD"uIklWBk),G*/JPNPFO?>WTT]nrju&\&Pp?_t^7^3hFL;1:4:LUdimL\$?FA
%;Ah:r(Sk-N"r/RL0q:<8QU[P%[F7h??^7,1:bl^7IQNH&eXkP5b)O0Y5;Ohs@>96ARh8psab_TBL>c+<gs%.A-8g_j;"g^>DJ%:s
%>\p.#7CcE:As-$7^T.T\E%tR.Xtike74-/V(c#7(C0'++MbK@Lo$:pY'PihgU;f);W@2ici*KudE`"S`mAX/MMd2K\;*U=kb!jFj
%=4<e"OoZ`P81r&48?503b.&$8E`)hVg1HJ*11dmhAZg)OoRB.Z8ga'lof?iMM_[0\D-h9\.eAm_P%hg-rN;bX0$5_5BkB)t-IZ.)
%JKZDOQEu!b?D\.7`CeA2KatGq&APUhPO-+jh-X::3@aS/2b1X86Ss_tCG,)Pal4;4Q(*6bo]G6chD2F!CKHX6c9e\YV-M3JXp_eK
%ODFG8f=&7Y=hqHF/CcEdF!fEQBPepCrl%cP!S6C2W\(I/6E9u7V-5]"F>SRDp9[OcL+2nqETNSq!%t_-e[L[QfL?aU@'P\,gF1&t
%s,NG!Cb9:4aR#,)mUo/[Mj0d^W(7'Zec2d0p)<%b7h[lR3,Q=`XYnjCYJQ[7b?K95>i0St?tS]pQHM2=ioZQVTe1/"q)uWaURPKM
%nCA79bOWlm[3tWJ[<>GdNIO8T[QL*a\R3Q;W(>Tu/Q#8M1UNZie,O/CqX5@$:&fEsI`VJZP8'4e5d#.fbHsR1s++lDR>f]j:NOiU
%mf%Ss=.!iErf(Xi'@K6h(-eh+S"4_`o]iJCLA0V=9F+lHPVi'Rr\Fn5)2X2e#&H5^;BUT2m!P<V.Cp'=1bmXN@169s`VBZ27$]Qd
%9DaR*_471Gfrb"pR^IS[0f?;+AY-%Q]HY([HGu%9R#MJ+a#9&;*PAgWP5hG:T/I^:7I`)_CUuLi\%IOs0&jXnED97,G6/Qk:)bk4
%<W%%n+7E=MIi%Y4?r2dVmiqbCM#SffB;X\'N2mKj2RKlN(i'`T?,V+,1#GFDG7jHFhq[a@E\b`,r5QrsQOHr_o`j4c_VbZ%D\A*G
%T,?;(\jfhX'e;GH;>mRR)XY9l+'PFgHIetq.hu<ORUL<5+&)41WBIcED@rOZA_CRM0;`!C:V0NI/-Qh2ZHuCRn;p@X:`0Dp_G-=W
%["Xuci?nF<]#j*qFkA]tP6hS&471U6XYmsp[5Ak=rNs93B>*-"p"-d_l<:f(DN0Wk0DoIHfN;GaG@pZcp#_o3md7r[,S*LBM@5s`
%_l5NW?Q$P.Og5XDdhM+a-g^ss9f+f*.#,aE!c^$<p:X5'6@bgm?V0qe]_[UYGKd==APO3VRCH&[]</h0A4C,#'.#l2fDm_kQCt]g
%E.fN%=ZB_'NgGI[A`7ljO)!Wu=ZB_7T[Xd<QRR-k-o[&D?Bc7\r@\Q!b7n0R$cgFj*&!LC9CnA11GoZ<"(guGZj1=5/t//'Qe8qk
%#/8M8c,uHtftM8Hb9[DBIb@,T1Zm/8fgM,\/2!EZ(maIUQ0VrYTsL\$Z7"F%^KR%\4!s+^FctEYNf0BoVF*?rDIT%8jZ$&F0O<(&
%=_PmU!b)*ijZ&1gp+(rY=]s(im7YWP/8eg``S6^d4%BNgj_F[r`?R8?=it\Ze)F@+j>#A,4-`$%'f,C$g"Rl%]ilN6n(+KV(M@>^
%0#K3,eI9d.EhR1g_`/qY)oLR^0$.^:cbJHko5Cu:r\),t<`\m.`k\s`bac8>(Dba&=_PCCh7B+Ds/K-VV4sr0PL=9YR:S'b[;9PR
%@DPMEB199c$muG<Qlt,XGIRXY/QER.4$dgIoOBF)>@)=cIZ.D`.MmPmB`u4mmDn_Y^lOUh$k#;>_N-FR_I?PHFlCB.q*eH]0kS7_
%naA.f@A3A;RBkc5h**pbQ7MoSj(5io,nF4o]6$6RlDO?=Ok-3$MT5U-VN\U=_NPm;X*r?upFG::LG<igjUUU99Oj!GT%)]*I"mPt
%Nm#+>WE]6SW3n*Xm"1AjP8[XOK+hp1CpqJ>:6_7%'q'9N^URt@iW2dQU7j-tDK4!!lHg=@%/he9S`-]DIQIp&Cenp_F*P[NSD5f_
%#mQuCgW_8fM2P)C,la@GOs]Ai\]V<G^WZ.g39VCo)PeBddj[8#\"Cn!4X$6;KGed[?L<j+_GPV>GNdaC-%'8Bbfh>[AJr]9h.mAq
%n6$NAqNJUI5icV6q>Yr,B;p@u/=X%d6A?J@75R;iD+^N/gAH[=Ye>K]5[fiNFCE?ECq7[VRY<W.YiZ_PgurDef%e-2qfc4b),TD,
%>B=kQ*gYdQJV?6G?1qNX-!QaX$Zg2oc7R8NKfQUrkE^4:T$4`=K:*TuDFInLF>ICQAQu2!2sK2,gXXbj3K%(5GC(qEP$VD60_oc*
%^[]8+'JIe649N(&=(7WmcJj;sH+d9gJpV'XK\*E<+Cd1PkQV&JH$Fc1\5BE!YN:GemZ]6prm0+gT#+h6B-W>$>*YQkhdq1BIV-N=
%`pq9q2Ca:JAo\^4STf.XdEMXX<hHAci+A5YduFoaI*q!:I*&hMIP3AGUQRDX"#Ap\oEO-8Ei!qU.;-OVZ/Urc=6@QWZ48BcH;^O7
%lR^Mic\?bWIH;YM(`hDq#?/9MC("pf>J5K2lsj`a6Zr$ZL"6%7&VBWBnCGhmd^/l/H?5/s()W@-eA=6a0"7i<k[,4`pQ;bF)A3Fd
%$/EYo]AQVmc8'2p><mB-GBSXn^ogQT1Pt7soEa^`d4MTK!ZbfJMA_XLYjo1$m^-3+9HYt`aV877TX.]"WQ@pOTP+@`INp7E@%q#b
%OTW"HB,VK/SI9p2;;Ss^?!h<2jtlm\g*ArgTQ<<"9QVFSBMrZ36$])8fc0)fg_s>80^`tKfGMiSNM5.0pWo;99\8:MP]gcjqg7H$
%=GT2"W[59,GP]i^QG#(,Y:$c&X@]Jh\U3=I[Zt><`gV)4Qpnhe]5l+NL4sYQ.)uYI.16;><G_B4duC]t6!cZ333Aidr\iK3]e_Wb
%*&34mpai"]S$bn:k4qd'9<Ysq71_VK0>c'1`C.s+<L;[IM4'Iag[oXWK']@;gba=P;u]Gd/#6E6@fA0AE"<<$K'\sA.Da&M?<jkh
%VHZa<lQmWoHGj_S2=8WFOn!1X:R/(n!97"-8]Jn8glaCa0!lM1A7FtIlenZFQQ?(6X(H!650lKqk6b8;X9aI3:*S&k4A%]!E&oHc
%1*"&u)9HhTJN#*kB]]=QQKA':X]qfLkK2gA6%M19/)2d"B:4LBn4jn4$m?r=nCt%I\le2'99[es<S=!90euNuQ?RCRDVj&_Hbj<X
%Ai"l7L"XI6P=+!@_3*ouDRn:ZamtV3'_;0,\j"'E5%gP[b/XsghX>GAlX3bP[b5hPE6;CYdJ,jDB,3(hWsY(oiR:q&Z2@<Z\De`(
%[gG4.G-of"L6!K4bm*FrA\5??[IC:U.uM&<40>ud^\mVoQ_"0J2no2jkk5O+<HX?>ja!p*=,[(^DHZg(*A,`hqa+e=8c<:63iFu!
%NETFTbItdm"M$#WchfIGqt**ua*/PVXH^BXg4oN6HF@V<+0Ok_[SMD:VJFhWk_<t:9JLA,cb2!)RNVRjrD3@W)?'6!BRf,c/b^I`
%l&1k.r]rd:A*p5V.Wpj%QSH8&M=rYiOeH)FB7&`0Xl$>(i:`0c)V<OKSHn1:T#lIqL-_\chUcki;E\=^ZqoTRqH`g@dbJ7Bn,J=A
%N;rCfJ+bAahi2&__D\U+FLtLdCq5]rQ6Q?!:*D7O*tNfYO4t+Cp&@IkGD&#["kDjH]/"%4e1I!``$`$S*WuUb'E/l5`C,LflBIp]
%M`iO0$GQO?28?)TEUrAFd=qGYf$Vq5<q#7uEjrN$WH+]Lpu,+\/aQ1brm.")WoJC5YA[^<9h/c/8e5\8QTQW5VCPhtGq'$Q,4dS5
%5TB+5H0s$QJ[d'nd9k!0s*Q"C<8k<HZE86ihMFof,Ko@II.8?o.YD'Bh>E7A@4F`l2:8o0BD,2sm$0R/\$G44Y7)*L*D1o14/`'2
%p<CG8R61H7rlitpm[a85rT\eL[RmZ"YKW%E[qmYj@)#`[>VP/2DpiYJL9K%N`lPGK:s5Dc4Ae39Z!BQ!92eN\odLd)8s[H-2"d1s
%n8h3V7"T$Gh7dPba6c'AVqp&us&HOWHF[+;4-TSUC@D<57WCie,K/%3+@r\176d6KI^r(ll5+Q^s2U\@;-!%H9KX+?bp5C'WnWO,
%EOi>]lO4]F+DWYTS2M:n>4o,UGoLHYro61QlM.!fk0[OY99$TgU[,J;`C!aDd)k[@>Gm,EBe?gGmL2-B<t3@B_N4V"\_B>dQb1cf
%hq=PVEi7_s33SYamY7%,A)!kD^8RVbNf?UU!V\XBb?Va4DNt#U.Tp8J6.Se!C/.;W2\8U3:-B]_5t.O:]8C,[_)-AYe`pg,S)rN&
%W"A9;gATE>j[MB7mg;.e_P#f3m?`1u>.=Lg91FEf,"'+.kgKU?_psX/olH[EVq0,clHMV)R$0QF]-u)t@(TA*ihSG3<3K3is40ZJ
%CiU/pY2L+]43C%(@sV`h38i60EpM%lmi^2raMdFfCV<pGcW]b@p3/a1<NZ#=a7Vp8+/lNB:G6J5qOj82Y7]Y#PS6%3]P/=Z7.]!5
%[:g2`npW4N3mrf[(?9[;l^`_[a0Qe#-X[iEp;s@$^I-1ga[]BBdSt_Chq*K9`g5A]rE3p3b_MKG#s1pVd\sWi\R*&*4qEq4P4%G>
%Ho-K:]Wb<Q1`F1U]WH<"PN^U47W]jIQWsE7Nk/0WV%cVh8=rp2fW8C=-[X?LVafG2ce:9siXo_Qf&-F^e/Vh]`F,cddS>TKnUk$*
%Bt7#Lh/-69%4l=V$`'j$YV`INXh.MjQ&Ycl#h'P`&#UV5\&QeraT+>Tg9.<rlO=%G0o8&*/is*G\,WOP4)jEhZgSCu=mV&!1YU!D
%1i9V[8F;Z;Gjg?g<#YE>D,E8MrheM!8eX7M=Ock5]3DC;;eA/di+9MBs#lH*]@;mngAX1Qs0H1GXLVa$*t7,`KCA3fr,KF-/7\D5
%q^c!-B_fqfo/qM]Kk[0Lj97OJ!c;cLB"<9F99e%,\eD8rd&YR(R14HYFfNmSFRq4sC:Jtmja-kp^=0&>M:WXX3&84nW9p#(>uXpk
%=;KG6C"qY$*0t\g,B_;1ja*+k2rBT'.<W5#Uh]qH711X4[l]qc*?DQRO"D-:n4VJPOQ<u7SdSCl-79AD`S(X?`G4i9B<Kl5R21c_
%O+%sLapYd2*Jndo"UcEbL4'rgNL!5n@+AGaIbH9lpK""6=30l@"I>!Ia0P)7R6qcKbU)!kogUN+_/`<s_*rcgFS!bNW(p\5<#FM!
%WV'6E/R$ai@,OK65g`E&o4utp(%,,om;AHtje]:X,u7'tT=)<2*SMX8`Ak3g'"KD"TB=J*'FHtp\i-u6T<nl>]<pLgQ]/:QkqjkS
%09@GWW7's:bjuYOX[T#?M2jF#[Q["%ciUbb[Yk@*8qH>!dL4UKM@CX`+30pWN**Gomq4'u@O\mBnqK;.duc<gSr64fZ!FJRgD=_7
%Tdm^V:ko0X]lhc;XB[]Ie.J,LOj'6#3?Vh-;.ESqo&:ZA6NWK6/pAtueo;]Pf*n"2*pTrPe1mafXdd#dW2e*mA0TjT:cb=o0/%^@
%dQ_I=o@6;d#+3FFl?#hUXUCsUb4PtZ]aI\,O!#WCARMpBQYAhrY>c"rjaim-BD*qnbuCoI4"\@7\Z@j?DQQP=20?3/%L-UDMc)$\
%-a%7@g-r?%;RJ]IJJO5S3+])^N>1E-'/fdFa`eE>gJ--b<-#oDZ,]ggRKhm&$7ZK)0g='P*sG55?;a*=F#KsMDRJ<">U6>J"O(Me
%Smr*Q]rp4gX]5VZr#I"(?@lRreS[$m;W;.5K3%(XAs#F&`!dM1]k:TYghO5M>-^clEg4QY`Bj61]A+dX?$`ol?SMH6kG=`%=#o)U
%/9f'82)NSSI!;*LBG,uW!mNRg8qeCPl`H*71=me+I(OkD9(4R1%#S)S5L1u&/Xq3`'B5$cjXEPDAg&RoMmt8i1TJnb2FQ&S7c;k0
%GZF9&:m*A[e&qbMP^^"#Ac9-7=RWoZ+`Q8K#[F-0Q\9aq=2P/_0.@7l;!t5Wos=A^%O%/%7-d]?D6#hlioKAVG.=LB"W:U47]rt:
%Tt<)J]7[.%::ihtlpSNP>iR0d5F]goZQF8g,g*i!cFnjtQVe]'lu4A-UCJe,,;.@KDoGY_1$Y`qQ$kOTrlX6`h:as#_JGq<A^_rJ
%At1M'I//H7bDhoE.?nhp</mYo(2_PBHJeG]J(GTc[I-V'aL>$U\#dAg[p4UrRObkIaq&rpk?G[S`K1F4q2/JOM6GoU8_:0$R!b3n
%[:!L*\s<a%k8m?2C="@t81o>EBf$$1HdGso?VHJ:\V7<T'h_%_S0QGdJfRh\B"9-0O*WD:$Qc8rX'[h,`W]Xnd;H?BBAIa;<c%fd
%P2*P-.]-9TTE5FN^o-&SmtjNQ/F9b`oaC/2qVK*`J\UgYfc2hkfI_;.Q^-W/Z%md<B\$Ir(u\64:f[Y'oa@$[:prc-nud06[U/h]
%&8R&6[-kJF\!A83OAgm@NW^/a^6e`_XObPeb(##Zb,lYnj">ftn0',;=75%f6FD5Hb>C?01bkVLe)Q>MIs^`lXQ#l>6*<S6O__FH
%2;pI]L/`J&-Da^\a`k9$@kQrCiNRnLNBc$5US:@4=(bN7c8Ec8h+tsEBoQfj,o"oL<6ikLSQ:k9MSmT4A^qjho)\NqI5:.c]pB\F
%c>dME5A&LN>X:5K](O?[riXldmU'G.%f&Z>58$$q<h-P9$eWCc]<Q@TD`:_pn3ZkB-sR$jm9K!_$&TdIlcj+(0A>RoI?M2Fp+lAc
%2s,(hGcP]lc0XWd<mZSdC+i%&f2-)H^fau'DMK!PWo##UoBZT5Ok?ForN"a;O*()i8Pkt3jbUW_&TVBXCh04'L2h$a/s+@g*!FsT
%dhhZsQfph<8&_R5DP)Y]0oUSiA4mHRO,bGXB`;`S^2[:`02hlM,$n-hE2Q\Z=di`a$We=3IW]e'1$Eth1_l#o(9_`]@Ac_dV1);Q
%D5XGZEcsG^(BSS71Q4%"-tT[sEkoi)/^jl"((=9CFPFjtrbhOE/VG'ES"u`[^NcCrEZd*b/.7r_BgKr9V(rt8<#ihSR^2@LLq>:a
%',sr[['sN_5F75(FE)UMi]S+uA,b5br]VT!V?oLdfuD?Z9gFZN#)=E8V=@Ybk3Odbb*?N>0[&R,mI4r=4DpGMN<oPq($Lco)q2XH
%dY'7*+mclD^c5"\bY4KdFc?(Xjb?`br<UHL6AUKM9+b\'<CVUXAEuZ3D+nnc'Onbf4P=5'#TgRPkXSL=S"[Y9R'Rb)^m$DjD!pY7
%G*1#%.N^1UANb<]qpYM!miL:f/&,G?B&8!EZE`9BDP!u%[]VbD?!CXHZWSsEHT.KS:Uci5X6X]4+2>%OXR:POo4#BpW48ZUj+V\M
%\#^O;egl2&Sh=e;f@Rb!n#\fZme#(Wc]&1Zbkg&][;Jh+=b#K(l0I0uLK<eMZi90.V3oTd3DHlg>Q$er]#E+"<VPNs^\IcNL@oOt
%\^50]p'NkdrNlB^SK!2ZdCT-kj*Th34)1X;U-1S5XmN"OT=AfHJ,3D0gs!MRheKORlBh1!kG9itX1`oPIW>27TX;(34eZJ4^.R9r
%0o@>chROSbou?mZPDupJk*c*DO3PbTgVo&aqd]T`P<86/,3j8goBYYm2Z7dq7rbH<F)>F+qgPkjY]?KbSTnME%]C9FqpPGc<lKO$
%[!?7(XZ\5j12l(-Ge*b>rqbcJ2l4dQi83M'cYf8T<@[*Or)LMHFg??@:$^McZJ2M=r3ff/qQ.9U\Fnq.9)&>J6"0NGp(%SimeYYD
%1R"8If%tjY0=33QReIo;=F8sa5<l0[mXsAQ=m/n0o_[gPH<=aTpoO4UB$S(gF5NBhFg\sZTM19F^Nd,mZ<Z-t\9gpf_h[&Pl^KsH
%DnOh.p2->t0CF4.DEN)$gL'D6Hs?QVC)l.+_Y$*1h4c&UG4+2%Z@$]L3NlYSWlH(AGF]JfTPpmCRf;EgMrKB[_qV#'pHNiKN.W4d
%E\1OLRaI/!mo]LKqi=A\eR&jED*=6VS',$nUc.7cYsTN/?G$74n^b!CHuf'S<V5_,_mSe(QX>"q_]Da)Y;Ya?)(N&a/F:6?@2JR4
%8,F]7Z^>?3gF+-5FH^*X@Q>O$n!1aunb`:Eab/b@[`[\n2`I8e2m4;e/KR&-*1g1,KtWt@(PP5o":Gq!0->)Y8(EZ)n%V"'KX2rJ
%)roMQkJQ#d7_\aV=L8V+ilT#;Q)Bl3/`48Apr;#L=XDQkc"nEbpYTjjn"5lr]A9ePf'80;:O&-e]A@[D"n+&#he;mo7qXVAo]Xd0
%;^I?[Wi2>nqi:qSV.)gLd%8pkoKV)6>q10e*4OPO%f=icLX5gLjD9jXAn:1ZeUQJi#2152g5gWp0KN3dID8fd]%sp/H04ICgcF"-
%hCI0gh.<^spLl/FM9JLM*P:'[ULuXZgr#Cq-#D8tq;T\D\#cBUXK$L6U\VRllKcHJdcSY-:XbpX=%f%5jp.3J.I44Od;U/?)clD!
%G9;7gG^=Vpd7>X`)<s`Z<H7p6<fPgZr=Hice4s'%[?LP0/Q\X\QM]F-lc6_hJ'E:"1+-j!^%TQ[]iTD[FKU#F1[a,PGrcqs>&EqU
%PP4YJ>qjriqi@=sHks)8qO(l_8\a-9]slf^W\t4ihjtQ)e/p9-Uk4dl:S#A]MtZE3gV]S&C!1l%SsjqL?ebDsc:DS`\c'r)h0)iV
%e%uXnXigI#gHc4[;&X!Xe$hQtfd0eskY>R$dCC&FpU^9e7,]00h*8N<00K8Rd%Y+r&j7X^[!q5qI^Q``j%tf9OF+Hp-\XWh@k(p%
%<'%U;m>M9:!k;7*X^rT8r#2d>$Co-n:ZV+oUfOtZ>K_ee7l6@3hpE3hJ+N["7uk^+((QY^>FY<^lRE*_%7Lbbc_!F-.6ZIln+*YE
%RaZU8.=_,%rROHuR?km>I2[!&f6^E1B<Ap3Ic0WWIBfstIsk6LDdU,eA_aupF]72Sgg.s-O,;?Y7p>;)ongDq[.tuC4f2iN+%]>,
%iL_'NOIQ.os3j!\2.#=p8,RYb_Brq8;H;]79$+JBMYkE@a3GHX4G8AWGu0B,>8o!`E`eG\K*L@YXG>V]*.G047F7SgmLsdGUS3PP
%dM\!C`f+eDJdt(Nj4]74E#k^[KMJGQb5Vks%94If-^6i!_ll1a-c=W%_W[OaAF"@)FZ9[44JcIB&#5m;Y2J=Jf/N;1N3!.>1U7kg
%&a!k23=ge@.R#)<G[/.9E`HPsgVZc_1[tWsSAodi/rOh?rsHdmXUbB13%^CY1@PJTmtTj@o#iHEWmQcrY=C?KhEeu:4;s4uKjU\$
%lc>BgB#8801c!Ku>#s[+4Ge8pF8.?e3mqcI2T#t@iLAKJ4ruI4(WKu";RXeQfYtO#N!QJad?Jl.\_aF:*U1Lr9Z+1H(;O10Ps8$-
%L-2tbO'[e`Gtlea4UbQQ?LBnHIeOTW,tef0eTKa2:Iq"*2jGTZ$a%;Fam!jJSBj8AqP/$)p3E^GY3Y9#bkA1+,FTBpab_.+_<Y;9
%91SruHg>J$hR35bDr3bgFPFs_#f_ZCKi'WU=q1rM]0S[kC$#4(j%]9iTR"91g`]@9pX<5cb?b"T>:Q$'2kR@?&0K>K2BSk8YPh.9
%[oSejXQ&h!5HJNS)b7<QId>odiLms7gq(8t?n)(jUU9IHl3'#crnX8n-8"S33rDj"[CNQ_a@;l+Ao)A+9EdJ8O#;MSgpP:orIXqB
%fm`HopYNBd$4?LU00=mNmp6)`X1l9XFhZ[Y<U2,.\Edsm.fZ"L9oJqgVT$Mt"[e<cZp8K2qrUQ=H1Bs<n)-K[mh8"PXWO#6`_GLi
%Vi.[RZ)/-k'=F-\N/GH.+o]4FW`8oqmV&s+h0H5Jd_']pd.a,,e+3:'lg@j/khXAm2CX<+d.fAt$4O%ORkM[s\JI::*Z%URmQQaK
%?CR"j&V,4NBCkKhLWp(sa,a9OHGud3Au_@7pZG1:CDelZ\dj'_GmUELo*2i9]>FH&7jC/7B62jW/F5RU#CB5c0Kb*P6/4ASFO`UZ
%4l<%Y<UZ9g*Bj+SgE52aZJ)brc.KI2N7Rn&g>1("2N6Y&Xe=WkYDXcHmVe<=/esAXeLfI3CsG?np`dYj5.l;-DL]3nY@$_R-uH?r
%hi(cgdgK:9iUY4uT00TgqeY<chE$YY6h@-p":RKL._L4Un?u</>7H#unpL>Ck+3*DpU&c>a.8nM4mJOk5+Z8$2U=Qo>J:&]qrfHd
%Y:k0)`r,Ffo,%--q!Xa^2t&6/11)ucNCVTT5D0LKD7/)6B[A1]1#X40IM!EN.BWX8VA4W-);W6%r9O5UhNiWo/KD@fCX54M-PQ+<
%>.jE-KnJdXG?UJ+?"<iX24rKO(ZEci^o2hS:A>(8ZmTM"!O&m1RRA\ao<h87*;6h$3r8CCg7(2"Lf;R&)qW\:#(,58LMt<WW.icV
%<r0IH;Kn_8KX,pReH(/'UXVIFa#A<HoJ"q;dFp?n@l*8#]Qbf>L/YTf4LSu0QYthS:U#gS_9f$jH]>F2dJdh7J,J9K]k!BG]E+.@
%G9bjeA,#2GV\Eq<fQfA'k4bo,l`2\RT8,Jnd(*ItD(9HJZ/A7;8%W)Tn:#4;R*n((#A:HJh_:lie[t5.,:-+B4gLdWNK*)$a&$P+
%3:bMOGVq0>dWFsP[dN$o:*M0(aF.GEkN7aGhYQNL+8*%*VoP_$X7&^/W^M;oM=2P(%h1,iE;>.XPUhgYF&c1D,'1J*Tf)bX<igFM
%m4u\#DX:Oc5Vn;D%prQ`[dUqIllM>PHZF2n88EW&SfAO)+Pp:>^DI[OotmW/b$O,r#`;O:bgTeZ,[LB7DXYEb[tV`UFmMVJ-/&6P
%9C(CKIo+ePJ+.$Wrma*(<I]3'CD/usU7WJi+MQOB8$M+HS'o^<fn7[QNQ48P[*kl(epff]e:p1q]`nZ/\9"+jT>"T31g4ML[)8@t
%<_?#%s6dsHqXO!60ruU!\`i\/Q&S734!CI]s6)ROIJ%#sXlJ`h_5VIf2H83!?FTB_/]C.ZX4?5PaW_g.MOOS8:2.&sS/2ZnAUU?4
%h=*72q+#j]p!r@403V?-,^>0@)ilK;5LJUB^*r=iY5_$JaGo%grR$P[qJ,7qfm2Sihqiakq=[Ac)kB7O\.@nj:W8mIrn`D&cKHWV
%s6GY[UeJ/IV57g#G5\>2976u*eO&DTh4?]DcYjRoMPiDI=RKoO^I]QIIW&>R^d6In;JUpZ5!?Q*o@=M@r8H5sK9)Q_/=4(rLUV1C
%P`BY:5+iMEs1J$tHb[F8bN+n*pU?/AmO_9lX"Wn1T*g@/\$*bQk/gA#n#g\G.Gi\lOW=;jo,'**HD@iMpd3VQI0\WF;K;NZ%c*)l
%?iRdCF]`V]rDVVM[aCmZDJ3O<5VJ@19ANlf/K]_ONU4$i[nk<$+$T*89XN2\Bt%%+W,8'^ks*q,5$WU/o[.=;:8Y9Gr"lDF.K>g*
%3T#*Rk/gXc\cJAp2Y?#c3(Rc![X!KVLl_P>N`FoIp9Jf7_d:+Ir.A=8[/0"^bA+<9oTs&"&*hm^$2mrgVaG/L,.[[>b`6Mm0_Q[L
%p\rA0pYq&0XAM*o=23kcId90K'cO4?lpDe%)R'2CJu^O`++,\)J,\qg?o[3>_+JE75?TJ<(A=p:X86^j'Z&`1k>A5JGf.)BZ&:^*
%`iXnBC@'cQg%hoa_4!#@hmj4ef>p^5\3/F@:g2KI8$qcfj3k>^b<"=eDt&m-cjhhGd=-K&7Huc!/_q-De3.og#2ucY>9b:R2%OK!
%V4D575PtBL7]Eolih1CoA!*:,=$'\H2a1E_9rZJOrADN!*!e+*#<+OKo\ZS4%p/=Ge!iY&gY6[&J#6+JAob663%nB,)fN0NHH0A8
%;tSK5dX'(YGnF]pYC%2Ebe`_%EVJNJ[1</\ZRQCLkCrW_X*[^mlColRg`IGg(N+cMDuYY=#ZraT=?bC:]R=SmMapH^5)9p@n!:[!
%$`r5rI);RP`mE$-Mdl\9fu"*e5'E7HV0dEQ*C<9I/[@4a)]Z1hX8/$i.ZW[SHP7E8e5u1Y.'5(.+56N^:5c.C:A(EioR,DSXu*KO
%ld%NZ6_eU>gc5t!dVu@]DD\PDh]i,9rFtFb\35WDL7<I$4tO<]Y@$Z3%L-j1Uk5k``LUVS7s]!H8R6-lV/J#)q;Y>gX4;uEFD\aj
%mbUKAo)NHKIeuEBlaZn8jcXY>\)2Ve.Y$3`^<sTC4/0&K:5`MC-SOB+En;O]!$em?2IL!q:bX7e[#e)Pr?+)6o.j:n/53g&n%:=0
%*cu-9emO,(+Yq+`VE5T./pS^;o3736n)*ljM`]J@rSk/[V%Vde3tcfg1s/N^9O%JM44f(]T-:k9JnoSZ^o]r5h&B@5hf@]K]d(sn
%Q)5T;cHc]CD<KCA_i\dJN.t_5j`'nSfAf0]gK1-V:,Bf?r5U3Q4fW?eZiP?_beu+#r"J=PpIiJhgRT9Ys*=WAl)9_o&9"HFFnq8&
%Uj(-jrHeJD&Z,B"CLc4<R04/(El#>.VsWg=Sj+WJgV#fA&.%LePi&\=m_6GBI/`KUO(.M8fB^=C'8te<7;D^q6^$O%")%<%ea9H1
%j'/.WYGY/h8,Y(kV=cpX_g"SqiVfL(9jfpHOg\S'3V02cjmDGrhVmY"j28aGii.@<4sJ*8+Vr/&:iVE7;TlAbbCT!bKJGL45!Ag@
%.dX9]<aYJ'mC5+&EIR-NI^-1]4tkcn5H)(&c)o^Na-3'rd&"iQ%VY;QPb>)""`G]:*F=qHQ=)I^HQV(]DbhI>MLttc2d[4,\[,0b
%[0eQXUE8:J3+%$BU0u/8Q)>no%L.^=@5<X07TJ^=lPoQR'(TkIWiO+fM!.eA%WA;6<n$f?Yi"=9juiW_pH31mA"#@E4P\arrj$O'
%^,;?HQS-T#C#dN^9\SMKpRW+\hq.R9gHC"srSa^HN<Nq(NQ01k\3S3CpkZla9'M)ZIJrdE!MUqeYb1sJi')iI<TEaM+'eKcH*^S#
%5[3s,Ep8n(7+V%srT3%FCF<;-$rXU14)]V='Nd_eDXG$9,F+%<_.fb#+&?+[PP1@?ltB"6Hn3=RiPDRB\37oW^)!;i]^$#0!%A(q
%[OQpq?bKN:bsUAnI^W9<>(4(E3h!:I_l`Wg.Z[['D=dD$F9aOB0@oBlJr[0CB`I9Z5g%0Kig9Ls)mRca:_]up/&-KeS:[-5rL0t\
%Mpe0`>G\7Bcu($8lJ9^4n_*j[G-pL's5mADGe(t2$1Eg#MVPjn)lnGk+SRSP,QHc+YC0[o'Fm(X,I1"DA;EHP.2U]l>%uVNWPr*l
%XKA[SH*cJ<Fq43)Qd[SlquR+_o`md",WbY!Zk;U7C!8;r\lH>T^"XF%3p!R$p>7pVZhgYB\FSURZ#snpj2"m!>/'6n^?\[0TAi&;
%%=PR3mF**BS,;q05Dn1>PnpEJqqC0qSP4e#FYX0X*,iaNH:p3shr?r<Z_%FsIHFl+d?7h=aS/`T%g%b41coB)QdN=G+2'Wb<`LE)
%FD5u]7rnKGdmmWbNLgZ?<Y9`\iW!kT<kWY4kk4P4p)lKl'V'C'Bq=GVj@CnP"^5lTn=]\lmDYaGYBLnm_T5U5k\YqspO@>.XmiKI
%[?OEUhNAb%`oImV69uWA6lo:cFDH/i7TU,Ri.##sV]/s&+2,eLT^Em$nXh*[S^[&iG$@(;eF0apW8HqUB`b.'&XAY"d>k1#S+)_"
%FS#i7fC0_?n,G^%$CqQ2lcK(K%Z\0j*PbA`jM,l7b$Fftr$2"(ADCit-O8F&F=qLc[a$N+\\=iNkZ$DZFN8FkL[I6mLY%)>cS4lq
%OQIC_Ab,mqccPLajl]ZL,O]rMNUE4;T=6u<bH3a)hR85U9ZP?R)HF9+k]u([*2;YBgG`!LaZI5ujsp!HLpgeIdA?Q4R-pA/Z)DqE
%/5L>@icmr^Tl)h<k2nNq\#:,Q`jK*L(maPD`A1_W.CO+tr1RuiFkfErigP/18,]lYpG@O!i7WD#TV7d^T6EE_iJMPOY?^mb>1\2^
%U_R11+dp'61L2BsR>)37Q+).YbaG&ff4b<N;a9a(-@\TD_f2"(qOZ#e9O0H-6<t:_D_o6"Li([TY$jmNbJ=meK9i\s`NZ9B:eV*W
%n7fUbh<#5r,OaQ:1j%X%WAC3o,1'#.4I7ng`%kA\Il+1W"CKL_GokUi5'(##?]WWXe)@d'4NdlHF=^Jq7CT7C-M*"hdkWluouOE0
%%WNB]K8G?C#a)h)_=9Y`\)pdZYiRCi1O+mF1OMP^d4-"o9Cqbhi>PC`rch,A/_aa[o1bc'gnFs-HsV&t<B"T?I:<B'PRfX<lGUma
%^/&<F/+<9hE?5sO<cJ;DkY\f_ccB;p(%S>I$hI*Y@p3V!nHXP5J*W,q(0EB'R&ANe_gF5UF/=]UdsU^IdJ+,([]\!tC;/$m[':dB
%A.g7Eak'feZ=oB^><gHgQ!)GNcG=Ur:&`T7>U%N?3@5Z@>#"FcAPaNX9LYIZTNV_iL@X'.<4u_P\`=A-]]!NBk]g<*p\A)IQTk*<
%JM,cP.AoB==p,WUh)BEp']%/m@mkVS7p8l.`?YZ=W.q1Dfp31l?RJ#B7E;cfin?^R?".`LfU`iI\aMRGe2.e7T\-D=$YXj3cbW3b
%745@X'\E!-Jmi"o+.3T[73c[m@6jCE[Y%"qa+bRS_;?LZ<_-VcRTaD<,fCg5/G-t,#&tfh5bT*4K-m!tU#BEmOgstYVaPS7c!_M`
%$rC3^Ime9=-?pH;";-HFr.#r5QaYk192a&e"JD$e\N(J@=A86Vg+pY:2*9_eca?V3fF?<FHn/*UqM^D$qqd!*EX_;/fl7o^\BBN%
%Bn1HI<jEaM'hsWUOs$)n6=Gn*W0`",=>4Y?(<*,@Bi7TT@^3-^M5[];@LCEpD+Vqo;o%7_\/$s5)/(;?B;4dV0]Y*ac,(/5KVDS+
%6Mo+=Qc`D+_1P#3V=K":@a"7G=Y#hL-A89-.DMk58r(nBU2FGg+\mD='ep"lHs&#K'>2p*6]#U"A8%kULM#&bYf]"DBeV,Q;;.Wd
%LIh4*U<7:>I;#:dkVq>EU_jDL4/,In^jLnD,Yis;Ld?0\)*7'u",e]kQh5tb'[IMFmF-I+#Rq&V?\Gd]4LZh/fCl#9@2SR;B0[G'
%,TDaq']0KGN>2t=o1:AcOT^du[@)<bB$k*d]/6!#d5?U`iM,'!D/=@kgjlin@YQ6FC*]F)U,c+@UQ08mb.nf93OI%_#':+`rc6X)
%WQg+o*>0AsLlT^eK&D<:SILG6A,gla0FXiBUgaC^6TDsEh<$_hoZ\L/Lae?2h\il]1Vj25#Eh\kcCbcJ;&W9P!*5\fWt0W7Gt(m=
%^=4i28.cD-$aL?YKCP;"f6l0a$4n!&Uh=I\pn?XRdD9?I7HZPEp4bKearR2>BI3G8+9fjsCb&_LOLf!*RR!),,X<pp`M*^VRDCdc
%Z!Dgs;HD%aKVIFR8sskpaTfdhiRDPnfIOC)]>^*+BKS.?+[mb1C-L4l#.1/BWh[/-Tf*Mm^?VX$j@BComnF9>R=r<oE'K<ma94=?
%[4@!)Q:r']^1#*o>.hft6<SLE`RYGH@fsHEg2%kt779JCdT8s89(:7aV(.'1##cMb%-NQ,Ra+;W.->k=*a2[h(,W"agFG2(@EVaC
%aTBJ$RHT/eG88N`,pC7eR3Bi9_*cmPI0#IM/Vr=[75R\4g+c\1UR8*>&b*&Yiq"okTa!Y'hDCXr#MY6h_SEmmTW(JJ.AFlU>@8V.
%G;U=IKd_WC?)A/O`J6'BMis%;&pQ&D7,<Qu#Ms%2BfVt"Qs9%bFtQWKgK.[521\?)D#B0%+dK6`f82hbp6jp&?6fkL1YYpQimI1J
%Ca>b60dCog/\tF&XdI9NQ!as">RQJYkTP0R+';>cT$;N+"Q-H'FVkUNemLmSkn&`X:OUY?/p%4.*?V,N7L]:*77r1=%^ml9Uo>)H
%eB(<<V(U#6HnOQdW4/]C=(d-R4$F<?Lo*n_=rR"5"XrgiAAr#uJtT?$@X,>/BYbYsN"O6q@PkJjb]aL^&C:nNMZs*X#tqNIR#lip
%-R](O#U;UX#]PQHV@XpmLY.iP1ejZ.+''(7Y!E6m%ha8P?Badm4D5/tPeh\^GgM!:$<7T^cZmel%)IRtb\?qnJVaRnB_s">:$`tA
%K9i\0T]R`>_Bpo)T^.<q`3odZ\sD;C5n#TZALNE_JC">JX9<bRP=7mgf$oJd_Z5N0.uC#N(O-.M<bUY/,.5+?GA1Q^:oOklqsE#^
%`6*pe=gh`b$X>X_!5mR,(VDd]N,PRQC0<\m<fj1Ji49@J:+`g^$Q)8ECT<a0Pt)6m_L-!R6^WWhe9$Ee3\25;O\I9:HU9G<b>AsD
%[KKb#!L)/jctlMPL3T!iXqM?da?OK"9::MWC4HT.&15:]0I1?bVU4m)cOJ*L"b!-@_7h'ul`sdB^aa/qposE7:b9S^3_U2`I)iRG
%NQSlfTlr$@VQLD0-AoiY$QIs_0"Id`I5gq[+I=>4cne*!khH3"QHKp\dt[uJJn$8a7Pll&/Jc)>!2g>0h%TqL5>t6Sm\R%Ba$kDh
%62.[tG?cS/ZESp=dVKM/Uj>I>fmmSt6W-$Ebk#N"mg;q`d!8NHRd9hO;:cpj5h#f":^hROWm`lF]%7B].O2m2%pQ7IV,+M'"[%5c
%6rLK;;)_G^W$gd:]Mp$=J\pH5<F7<#'>pD,X;#_m=/<J>SI7`W3F:nnn21@j9NO4W)"$!Qqe"bB0EmbU_)+G>37'iIHR*X*]!-a3
%eNYX:0!s7/n08Ih%O.'eY&J]?892qs7I#U``=VKmMmWc.[+%3Y0q2m1/j7a^+l@R2nqou98<`n-1PY9WOCN$U/h@1CFbHCJ473G(
%e:ni9'f8$<,%d,g>qC!:HLZf)VCi#/dmIc*B!B6@%&fQ3&/a_"lnX-O,q)Ng:3BIc$III7;hYZm!RndMaY\9.14m\40-$Mjl/Suc
%Xih]O\q9mXD(8m)_eVf1^nQVN"03&s(/C`j+J^0(OKWndA>u?:WIBX:8F;7Vj7s$VpgT1"(=+<mP,V]"VW&]kK32U'q.`D3d<4*"
%!B;)B=YF\T6?=9>(!R@5!IPMVnO,)h?/2Tob?RGE`T8l%Kt7kh+]?8<Mfk_P!1Fb9JE#>Mb&F&)`Q0oZ9n@VH1.-j]Zl`\EDmR+Z
%qct"qD-CC:lVK"!ig/.tWk%Je@U/+N(kM2d2J8'mo+C;%9+RPo*h:1l&haTF`HI"SD]5d'CGgnT:n5<7'H0Cm$[o:e>rH5L6@\3.
%[(G='+<;ic6n<gmK)N["=:+?,n6D[6Uq>XW0\jH45W+Eof:f<3d2A`Gb<)k'1f$:kiI"Tg#m+u'5-Z895k05H#`.Ioha6nOJP$'T
%c2p5/D$jh$4\Iuf%B]u#mu,f:2b`>pdes0sGeSb\KRk`FPW6,0'p@q+cXhE[iWTr&p&k17$%Ilr`:c$-C?],+*f0uo&8j,+BnfO9
%;Jn*'[DU>P^rV5%bI.lMF#f>pfVr8%jl^XdPK\S*T)DoEhi,-@"[c`QBChJ,W*eLW*F67RU5c>E-juh*8fBc;=Y>[gPO(BJi@2A]
%\Q+gI.<X7=m*3rFS%?e,_B:!T`^l@liKFsPA)u:@\4_^t0p4=A@$<o:-E9!XOQiam5GfbA3#L$h.G?+K-RDbo;SAoA_5+A1.b%G2
%RoI]Y.QgGQVkS`>\<)Rs@`TdF9u\?D,g],7TleA?!*0EmQ&a3(5V<B:@[Jic0T$o=TGU1dUBi[kV^CA=!qE/Ji])<\6L4gf&(#_C
%Aktqkl#o>A@L1B[W*PNB4^o2L7CGnFl;>KqEKi;Q;XLQ]3L6o%P%J":p.I1P;m"-:Yo,Jj;f1)Bdrs7=9f%s]9^/@`SSj^Rg?o:5
%51KguF;-!k$)p+DUh_1=^.@p;,b6)MLWLt&huS/N9$p0X]D#8Me0!]V9DHYmm^/e=D:C;,k.44Yn0K*+UX$_UT43]@1$P3%ojK10
%SKkkq<0(b1Z't0qVL*!?NngG:2q9:GjuOQ+0;j,iPKrHh6[OdLHdk3MFJ4bAg+REe7m6SI.H0,Z#m%sg"[VW$25ZHNHq9/n`8_^b
%oJ.?Y8.1EQ7So8!Q=MZr2.i$\m3KS6nL0Or0G[D]h+n6G&ojo#kZ(6:.iAUcNL(s.C<=h,C4n2Oa%Jhs`l%rm@DcVh0g,T+#ZN.&
%RAhpe[*WJ1I$tsb*KA#b_mS`+h*g`k)'Fs[Ob6(r$TP$fVP=1YG[NQ@F/Oc0@hJ=*d:@&V2$uPdY7HGGY^SA"+3tKpem:J*5h20`
%Ef`gb8BG..-9*97+B!5+Osq-f[#<H#N3jjjO[P8[I#ujbO^r2uH3Qtc;'hXSP+M9.9T;W@c\t>KdUPhi0N2^C.OAbn$u@6-?]GS4
%#p0^8,Yo2&/V#d>0j^SrB2ZV*P]08ASQDd#Y#..10D+tNq;X\gDWu',rB$8koaeA[Gr%586/F!M=];k2C^<c[&ic'qlJNFl:hZmJ
%ZDTh\Nm(KdfUsSSGS-'M7D:S1eO(%/m1^(mcBgpt"'0QKWS"R%U'>]DMCf^GKM"'E(`)g*&PP-Fn="C<pdbS>AO/-i\1>;<R?Pi=
%)CJ4q!T=4KVG#XE$*+,D6_f1)#DE;jaV;1p#_J5TPA[raP`*@G9nu%YMN%sDf[/TJ6J^*6\VO]-Adpp\Ci!OI:#&P>,CLi1qM[p-
%VJ*7J^oY7ZE8j'B1N53&M3sXf5#58ER-_N'mQrHCaHZ_$1Wk92kpko4>7r\,=I#scWQ@WHWQ@PsDCZuIfOuB?6k+sdL(V3df:`gS
%$ih"V7g$t#',iu]TK&MX[-PSZ@\U"%@2!IHK,EZ;_9qIM;P>+o/9YR>CZM_/R&#`)$\cPX";8@5+L$a`q6lC]LoQ8^OWau;aZG,(
%%dZndW&m>NJ0`[#-D2oGAE^O.N3%K!.Co[]_M'HBYJ<(e3*q=G#:/FO!$3IO_Y3K"JDdqt:e\4uMQM6AB0,&g\-"l!h'0te42qBK
%YUDnGV'Qh-e4PB+>B6ks6%%"!$r.XY?1,9KREV=c\e'`"\]c:o/]3G%YQTJ,>^.HCJ35_9W$]r&U^90*A%.(QH$K%Uj^8A09o7)A
%(BPQj)k#$Fd#]R@RI!E-WIoIp+)6=<89XJ2?:1/<LKek/D7`KHCmAC`KR?j7^bamRGV2\j5DUlr)@bu$"Y_29TEZg)$fDO8i$q*M
%L_fP_5pX8l`Cp`@!s6S%KVE7p6QhB,A-:9<Hs=Z:LW9\*cMS*c2VbKd-l+IiNpS00:INApP!?1$l\a3p+rd&BCE&3=n=/+&Lmgq.
%"Hg$:faVkTTBhFY+SK1f+J%?J"f>1J!PhLF/L=X]1fROuc7M=97/'*(YWGmP<lnTg"/=%*M$,)D-,p.Y!Zid'LE?%7r38HT.oBtm
%.HW=Hg`kFi@V5b`>)k"?htH+uh2sg2;s@3c#ZLs/*;353-6!:Xcj$qHinD+3(/&p=J?B"Pira3U7:HkEr16``=TMSF4Dj@NdW(TD
%o#'YL+A)aU?rU`0K4ITA%,O[Rg2G,h#)caQ(=SRY,e"6Qkd(ZK6&%@/AI'e4M*PU<Sc`Va1e:I#AqC4S!#1E8Lk@]G]q@YT638?D
%<TBa0mjd70]=+5BnQG!6Sn+%+K-UY;Fe6Q>-9<Obj:*LaB/?fJgD#ML5Eu#kQC_QL3E!VoR<#1E"7D9b1q#`qO?/m%Tl+Us[saSj
%(!^f+TX8-p6Er'OT".,&G'JVY!iSAc#&YAD5Qc'.Jk%VK"#R)R@;B(ZE.GsT!!W,tNU@_M!"HGr&(%giE.Gro',I/W=E[*^*C\J#
%nR?1s,Rateq+bFt*[pI'k&hOO'%-D10ultrm"f,>\k6%a6)b6c+2kBZa>S+N'H=!Rbe<&b>W.:,eQBtQJX4.KZ[;u]l4aqn&!:6;
%D&##2)d9D_N&4K.dY9E5f8QhQlqYhk,DotMiD/!W@Uq.5:,dPpX<^Sp#4*$s`N7u$;gY'O$K6",Jef/4`<_@hnGt5)/\2N^^m+GK
%/QULli-T"iJRZ4G#>`i3.,nB^$"bWNcS6i'BtgF#kk<YKiBgedi+7O;aTE>#"iXe+X@kIp/Dd_;!F,pIg@/XXDLsJClY9JiTdpAa
%<[?qU'>;DTOUX/J7SJsLg]p1Ubcb!Ak#l/l3=q">Qp)UuYU&K@MSiaM6sCZje?(n^+gSAh>L/(C;T,XHD[RtrmYQp6CF[bb3T6`P
%Cu3eO=)o]W7(/q^$'9@kWmAQsRr$Q",3q,<'8jeKR]S9/,n(uEZiZ.8W"$7eM3\r9X)[WbS++=u30)@5<t"n7!Z5u4?T%3.>UB_e
%r<gM"L#<egi!;#-j3pYOn!6"MA&'f/*Cce;n74&?k,CVEbFUmpI25RZ0u="WB8Ru<:MR.W'j#K#bh;n=\ZH%V(3(I&5")1\"A<AC
%o.W;#fWHkF#WaLZ<LN.ZND+/@+XH:^SLLq#P$_s[NDG-t$UH)hjY;`GAOA^6qsg?H>m@QQ05Em/Jbght[qQK];BTdo#c+qH3T[*R
%5[`W)*QX1qPW+;_dun3l,Xo\@T`oN@?5[Q"cl0HP@OUu9$^\2]C]G>T?(0#Oh>f(:9JP5g@je,dj"T),\CVmX*D_Rgi!E4";d'+2
%+CkN[L'kk.hKYLJDUsHH3uS2Y$eeAO!X,*Xc/9*g=Yp8>=>bp;:fF&!5!%q$L4nXpOEPH:`u0[fW-","X?:EW?!nTOR&`Ir-W>7`
%,&>=,BV[d#!VpP!!-EOIfH*)GO2WlAQIm(@VDKR(.A5qYq!`+AVXS^#@9AeUG`e@S??d$;[gHUA%[UX]-[)+l$,L3!0&i%Md4)uj
%B-;tS$!UL#BJP\@&O6_aZZt+?#kM.n,[oC?1Rkh`GT9EkjoRkDIZW!ohE`-U2$8m?:A445#X^+<Y-"t.%-[)XK+N!Z_E2/`W31/I
%3ZKMub<SuYHC)*m&%Uk]5MOXh\%@_,_t+M<,)/qrLQC!6,`=#]fU*V"-2s\YKLZh8hb_%9+/q3clu7?;U8!RX`B^Z5U6(81#9F]\
%NakIt,1qE%Q%LYB;Ak`BM@r<b(jpl?o9:]F^#28oL*]if%,s:laUUOW%8Y7Z>?E#)!Z;&n%,I-:Oickg(ru0aj-'sCp>J,r;hC*0
%8kAFXC-Es1Mb\C8[J9*JoYl)m1K&ojB**;km^r\dg&.,&l5q$R+'GqI>3_689j.Bn(.mJ\"LFr0A<M"tgmu"_P'\LcT2N.(Ed&jS
%E9]n7Pm9mK0h/Mq"OO*+8s<e"nh)@);ak=s_Bu*u9NH(lPNcS1InWK`>#L]GkaPPZPcDE[)D4Gj-M:r=:/+a%UDc1e`7$UB-ltog
%L/_iK6m,'cOpYfaQm[`Kda?Ml`_+%N0jlSikn:3R%Ls6!N.T,V+XMYN&rWUeeg.797D<L23"8;(J9Dom#7*Nt\#0?+<)XoO1algj
%D3;%e@TLWRF!b>j.,q1RPdI.(Qs*(>Ct*2m2=An/^ndNg@SS8Pc8<^$`IL\:\Hu1oeR2.YX%.$q<"hF>P##9YWD8#?mi^k%89%!B
%]bLj/7]P2fbr_*\THl4H\BL2$b@*UIqo_Z5'nX).]jjV]>)K(,bo`9ogEg-PW?/iP7q'i636(-KFA4*qQYAY/Uan:d/ku#=-Cq>3
%#ApI_2sKa)\qJNPa.r(aU^K66:RuT>-QV%mIds624O(hdpV`-efoLIR'ep:&843dDZ%O5`OW&@5NDH?=1?(#!78/G*7`-Tf6'elS
%9JTk:)V%C`ImsN.nL.9XO^le9>p544V36D11%DBn0N^)0Q53=j#2YNJ\^Umk1=2?r#*+NXNeS=5iQ(R5AMTL<Lj#Z67$F=n[.%gF
%'K-i1*=_50`dLd[_oVn!1s-ekW7.KgWH%6KKKCTM#_])Yb@<:"T\[!=HV0fW1nq10nXt@e.3P3DTQ#-<b@"D&o0b?#11;=`Y9B>5
%0Ua2JQ:R-3[n*B,Ua0h'Z9(qs5Z72A;R/k`'2DHs;UWupOsr"tM(m%nR:Joa,$^?J<D#`P;?KlI@B="8.lAFrBt%?8'AP$LX/ZU$
%@B-db`Mo)D4JhkOP&@@sX)$3.p?T@TaW)e_q=*j7?1*h+deIuNV@[e>I3CQSNm66(rZAGF#lN-+M_>@H@[=5)iGIZb,,4XmBm_f]
%4JG/9kcm:lB8+uF6u8h5%iG,"B%s2Qm*HdH_Eg`1Y2fE9I%`7bWlTqurH-m'l3%,5!EV_Te@"??N2rrFU=nu(!YF3cL9'_IE7buc
%@m)\@h`(>+Q^hq1hO,]p(okSWk76,rJfK1Y@04FBGoN]pHN"J)$$I/"3&uT>0jl:RW%?1*$E6o8At3Y<5'3%)pXp,YJflG2R=NqA
%o?(,)3BWgb/,)_l!'Ug%FfNH9Be0<ge+k,=%HjRd(`.oQ-mkkJ6T8HL2s!ED!^bCUBL(,1LjFY:$qYj5&L;cq,Vr[f<BB;'U,j[k
%;t5,\:eXS?0VL?eCmC,<Lh9bWD=\3ai$UVQM-Q^1dtI_)/$@=t2G78K\;ho<)EseM_+?@g\uSuVOrttI./kaKkG<3<g<EXM"8L#o
%B,C+L&-[ZC5=FY9/q,IsQ;WI:gfY[.k^m8YY#&q)?&\u]_bcVqhQWeA_-h57\Pa)RI.Dh_cNue1SK`U-iB'/M7j&Nk242U\n5Ycp
%/jKr]F#@<0?4IgA.0=Vl(G0@I6NT"SV.HX<5N-P24`O*)S1+u+NQbQ+@Q?RWs.LfJg9=Qa4>nb97e&cS[Nr)VF^&*I(/Ak$@^4Mj
%kHP^h@:>gcF3/E-.HPfgZ8_P4$,d1CQ[fQhe[^,%7!n3"5?Ggh+Jp\kh$+.O&L[ij/]ns9E3o=!5H:^;#Hcnu&O;d2c54Z4:@_eL
%kpc_bQ)\(ZQNUD4%`O<Qkj/-imd5,lI'oKnL5Q5<"qEAtl;4],S@$,#-;N`XdmYE*W('Jt_p2=Y<RA[!j,@P*,]`lKUIQmeBt:AX
%D3'`@_'NX5a^S'++]'%?3s$O^Zb3:k[Nl:aZE!84TC5:7oP%#?K!fQ9VT)";l-O_d'M!%FK[_8YJ7ITMj<_\JQ;bmJ3cYBKm!<fb
%U*bmP,amt=%%Reo0s,k"I#ir)YR0D&ZL'_%7N=!i8%u0]4oc.]@_-oHD+fdH+efBm4t)I*m@&8aI%13KMT%0aY&T&_;&qZT!=+4O
%oD*Y+?,Z'E7n#[N<b6IYg^i1=(IuAjn`Jc&Ml#A@Pk"kF3>><N">u]2nAoU%@!l17YjXmIFHs&U;(>Ci:.^3ULcrfgU=1U>hnp%B
%:it$HirC]lB7aUfm([R[:T9d$A<L0VVD7""^icNcC!5>9N);kq4g*S+_lXZaD3iN?nu\fLFUO)OQaZH:[3T_PQ<Hp0I!f?Y\>E:A
%,;Vns;ep,g$pr"N3Ou$<;hl_W5J3lEeG+Js/AEM;_,Ag!E_P-*aVSqkicr.'dh\QoJ4t&YFigE;MXL6#0EoaFGlm9di8bFn0rDg?
%DK%M'"UZZDVs_%%/ThZ1k!e^IQ+@C4Pkj+)?uA`.:ElbGOl$Kg)\-1dKmn%eXXf1X*Rcj^98.5*WN`E.(Y>[6CT2dY2iAKR]H`1I
%A.9QiLY@8i_s>O_4hb<-QC/.SiGI&,_`gbYU[?-VF/1hF<t+QU5RgY.:V$=DnK\Kl33o5;4N\@:=,p?TZ't)7O*]0G+\-:1Ta/n%
%DFrEPIN7&8nG[srYYtRS5a,"MmgGrO_(AHEMg$#+:Q@F$E31!+)S8cWgOP6ba<l,a*t62C-_c+kW%$\4J1ON=gD:`ABYggUm&:`?
%\:Z;?6#eGuh5h-$c%:`4!.5*E+oN\BA#Wri0!;@2bjsk)#[:'^$ubE=%2?lX\-H89Egk23JWJ&U5m*I#$KPWo.n)#*b`J=.U$`f'
%e=g[i4\HB(=JZ%\XWe>8$Nl)07jp!;mp)@M#fX);EskjQCZ430Wm0]_o,pAU"\j6=W:M-??TOs_:lj^m-!cgE/mos.N$\5iMVHR`
%R:;((ou)ucoRs'?0U6:<()Jc/b/&,=E@FpBSgWJSC=s(d_<8Qnf'fV:L*<B5gkc#gVECRmPuF;h]RF\e40&&5!VY86_0S"T3M2A:
%Z('5uRGs'E$n$ce,>aGm)7V@@ekHFJ6X0*JeWs0'>KY5_b(;Si=c;ifiWq8SXs\PG<5(uZ@82bLi9]2cLtbu%AZGY*&@],o^(C<@
%iEI81Sq(8Ud"e/(LiPIC*2`6P1E^AZ"^LQ442AWtGpZY'M1Ia'8Gn-(J@97:FZ#V]+MPsF#LBBC!oR7tAUkkk(_OKWm^\HAj`,p/
%>aCDsMXodfSrtN@hi&*`:u#!fEI!ju8J5Dn_fqWT2R#Q1@p-sjjh"EJ/Pc]MlU&uV;d<Oe8m):O@b2[L"[(BIO;>q>>oB#A8/-ie
%cPO&m!KjGsEH1N76PNC],R)VSEoW36Se+;lXmgLUg+[!t'#lWd@NZ\'.,2G4_N2:(-u4RKiu]CGXE_[RD-ue>cC#Occ=@lQf-,Im
%eo_(Zcghk*=%jBdpV:U0VArj@,Q9?*%kk08>gF%Wc\L*1"Z=6d2\E-D$1.0o6J+`Cjo-$516GNJh_F1]"d>"S_BuP`mNR[k87II7
%$f!\[ni+I^(5FP96K#ou#EI)<>F`bnPe5+\*'ZE#ms$quCer5gIU42kVQo<>O5sLH$2C1$nk^1G;oXjOiAl;d#?\%"BEB-#dg@a6
%iQMN"V.m);_dTc-&RV!)Hnr.4r+9i&DgYTG5kdetM80bf9hepUk,Ys.4?%B<(`[/*c2!g`)iAG+?(i*EC#MM^J0;R[hfU0Qn9_%n
%YHn=,DW++[q&Y!Ki<8T-kBVflPE;YH`%QkCmUH@Z*e'<jf5RXT_*.]ne?esD;:RlqKfHAabs22k^;L=18EH*^9-r7DKfbJlSAsbA
%q]WLeP$9GR""(Kk@OJ)ApS:n.OW-m.Oq^)O!L5"OdY(n(+=?/];S8k5i4,$.]Ki&9"okNU:rK.R8a)UBNKdCIUWP/g#H"KCUcM6#
%\k2"R<8^>*T*,6FGTdf%,f)t`TVUS7,htsXU/^3<"B[)q/.JX++l+R5)b#M_A;nArKm/_g1PnWN:hp^!-38'8:/8[j,ijt1o?@Xs
%Hn*iG[gQX\7"FtEL.9T.M;'TAXd`0L8.h'J;UV@5[Ces<[%n;#DX&MW_GR'_e[A.-5tA$+<*M7png:Ht0t)/Y_G2$.j)"Ca8Y7j:
%;nW9)-UQ8/OQqltGV,)=NE#pJ_F]o4UQ"1B-CUAInodKL^93u7T';;[O!VJQ8P`Qj6Z0h\Qh9[)ErdUNKqmMC<2X5pD_g:c9QbB9
%qEgDFdP5Xi&a*rX5F^rX9mV/M*oU)=ERMUloKfCdWfnLkUt7]Y3M,l:O8@OnmeD\[pMh"!&26XE!g:r_=AWGtU@:NBS0Bh`&J':<
%i^eSF&OI?KBM$3ROtiHUcqZ=tP`-6oK1X4!NJF'JKp[fo,pQN+ENWh///^08$*5H5DeUr;e50I,ig5T2VSs%/&]U%`A4ipY&^X4k
%4B"VBaTuW*aI4$)*KA\uUUjre^W@=416*?42@#r@e?F$ur&PVW%Z#sdGVWkP&$9c1%DerslJk0Y781`#8+QgPdg/oj5s4+6=!]=A
%ne)S7$`OFBaZPC,>`$spMIbj<1-6^<M'JGS0p2s.RP9nj=-Ccj8PN&RB!N\g>nT.Paip1&jI4K3;/1>)&V*I_;l)mgOqFm^\/6TF
%1X/dn4MI;G4\8,SgF1U_Pi@3cpo0GEX;%"&_CtTj*C%qFWfb%LHp9N\IeAcj08EoY#/"1aeU\_g;*AI?6GJ'7HBLY?<5&BpWO>o)
%3p_)VH6"qc)?LL92>F.AVODB0d81WU6Br^o3gT%u#V4L1mYujq(T5-._U!2\\n"IAVXZ9*CVWE*X"5tQcZfB-L_ptu,s2E/\H*El
%QV_[TB/a\AG2l@OdVkZBAe94M'9EEdkG/-cW$?6Q%sI$mJ-iA?*DQ`%^.A*$A"P--)H5T>!!+(s)POa`)g+WI10O(KH:jF_5>[$Q
%`hOc.5Zskc*a$?Sq*X"q9XN:hgFEfE:)cugp,-sq-Rj=r[]VXG.gt%_7e@4C=b-$AL;Y<nK]F672hcYK7]2`,'iK0aSb;fuqGEu\
%Ng7U%2c4EGg])d]P"dgSp$+$5SN;@dnZllulR1S?f+7lKpuHL&\B;#cLD_<@>n8I<9s&U5,,&lE,6PZ*Keq&i?k)-`:)hu-[8O!o
%+fA&QY8d&RndgFGC_T5[(%(Ke*5nel(68nL=mn"M\R-KFi^6H]gf7B-FWu:\asG!h06fn=(>m20c87=JT@anhCIk?mC1-jO],$Eu
%oDRempXsQ]FVK#C)&t+^"(>]\FT^SNA0q&'f9%\@`%.p!>jIF$3_!]Z"5/5]&M>%N]'7:9Zd!KII>k*H;M,m2;sOl?q]C`@S=Td+
%O8!on5LS(\ROV%22`]d1jC'._X=tT8'3DJBIb9.4F9+8c5:\?b)4S7;22#(o:Xusom->u>4#a;"o%<#LUlSXG^Gf*qQ6"h8K**l#
%@_AgM\"s]H2TKtmI?%2d4L1?#Y0cu%/;_i**aaAO"3upB>d03,\CF8,?a>Do.Y!";*J,)4k2:UVhM'Ial7sCZUsp@/EFqkm@%T)g
%/Ba6qJS(.fY70&acLBN'Y0/-j1ckp>8ATHIlBrn"M7'o4P'0..!G-=SbeV2Rr+8K%F[ugb^f:P+_]ptoEi$('#d5ftXMa<4GcYTc
%_EJ)*<#50b+JQ/\7,b'&W5InU'\/,dZl)f4_VAs0m+oabQr`)7A_RJ"eh%PLF[:"-B0n#,U,W0B!h_9BD2Mac,dM2SdJs_];o#!i
%<$L5-_/gVnE9%q*dR/nOLoj(TLI<&T"uiHr:DPq\IYn>B?t,dl5!qX@NsOse/iQ:W\:4\KWu:25[)qh_9K0_Aj3!9@RM2McHP[=4
%6%kJATHPVKO3M>s,*S8XE%&p0!OafrW5j<@/#Fq[5Cj@?c4>/!"!W^1_$8,XJWmfolEmE^IWBul?H;,I-WqWK;p"8+47UL9[Y+_h
%ho[j/"$1Z/a>;q07-lLl+2cHVq.0*&:CoT$camf2a%%Oa6R^g`n,c*4aX3K%lXRbfah4BA(71IKg-;gNF<`R"aX*n`@s^@!"jM%N
%FTG,^ff#,-D$LYVQXqhjCi&;c;[BYmh&Nm6Be,M7FSVhR+XrYE;5+2f7`:XRoHB\HQ[sA1OGPe>rJ<C$mXsIgW/W2eK[_.oB]d4"
%]q-]77hK?.rhK(7G\k*k[NE9]j1;P[+V@e!dDQk-3>jBoBJhZj&e<u4o`:m5CSGl.9N]NhJt3KQ25I/d.j@-0Lf]7knS$i-"AQSN
%jrm1;5a$k5b;4)a/fk+1`/'/rV78)^R7\T*84R3JK.*7l+t'$#L*HC*WWUMqplRF=G<k1r$HF1&T<?-9MZZJ32s^q_4u:XhX15)k
%?qqXY,*;glG"!mJ+&&#qiBB4aqAiPK&cYV23H#0_KRIo0>(soQgE@lAIn1IN,,A(C8I/0:2jcei/s8'-#'BB7*2\;U6;kF98@7GM
%&Anmcd)He8[#Q:_n\\-tPS.DTP9FCY4hd0d_1-pC<Po(CYFo8sbOKhlg7AP,l#P^:++;+nD5*Zt`Z?MQdim+.nfP+M?]N,Z0Nj2s
%$;4U9<<ET3&aiH!m78t!c9A!j<DuGEEHFaYOM(X#$>Ql^N./.MJATJAoP7P[*)BC2@YDK]r:BT*L*)b&0&I:TNp'**g?4f1/B%$G
%o^P)"VHf6q>B5:5Z;-NRpBCYoe8rT.Z"3J']TUlTK,;oQ*-ROdEa6Gb]2I'uK%.2ikTU[-*tf%;7\5P^h8:7M6OI/udH/*8#SHfB
%&TS^hL#BM2)n%-oh@r&en\(%&kS2W0(fg]JR$*I`17=_+&E/c>V@>b?iPk#:nYWE?QOa'cfrhn&OGW22D-2tXBd"T<TgVBj&iHp2
%LK/>'-+*PgNYNkE@Pl7I&sZ%a]..lR]<RjV@DrCgKG0^X%,AM3)BcWN\2'0K\hWi.`$f\;DNW0fg+QP1i$b/fa!2jYA(1rYVT*ho
%35aj<:kj$J,R2IKX=.J\@;>lIpeKj.3is6?U85e)b=,Jp1&U6m,FiW7,:a63foOC,U^p=sTjF/qM!2M5Eghkhnd$O&lB%q]BNS9]
%O2r:kb%=h$L[,rdq1!X<!4(,7b_[aWn-*-Y(SB?A(fcj[kGcDp&fBO92\:0VB-R/rF@I$#+NDoOn9HK<hGu$@;a_heC8lsq9UGfJ
%a-%5F?/-jO'_OkfCDpY3BNCe/1s&u6U*E&25X6`p!o?Ip@1#5o%#QC8Ta=S[?J)-KMK-@mNGNPn!174f+%Qb(@>b06d,XM-\GM+3
%r#V=:[Zi=LK:bhibi`%JD3KnBJ1:'WXY*o2ED$bU,cTXh&>Eg;k9XCq?;*9q%7SEQ[QI7/6s!;T;bcM<K&lgfLDK<OP^C6"aD\`f
%iU$_6<6t#Z8D4[`J1Ua_0(rk6m44&Cn+I*N4Y]JrEPfjbRV&GDjJF=Ko&HX<#-Y'c9L[>LeW6qnHHe6@1i.M@RhgCP9O;$0J4.%#
%m!HV[ZG,MBL4(qur-Tk?_"16.O[0])Q5ee9BZi58^am<V-OQ?1np$bu_UP[G@VLkp_S@$,js%MR'bjqV.U)<C19F`i=IO$J[-<;p
%`B+At)G"\2SL!T:VXfd&fCC0)Gg]Jk>g)m^'VJC%"@Y/X:sd#<Eh(*[5rNICK?+J-j?#J2c3.F:,*(e7$\:*QPs5bm';fa:-pp5k
%PFi4>V$p_bXZi!DL,l5<$<`7Z+UO_h_>CC(-KfB9Ll;3#2QREk^_B96Q7H%]#t;2Nqm";5L[u:/K<0b_%e=#?&<U-)+q?^A7B3h:
%%SI))'X96"=I8m._TKi4[ie,,_A@j`nS(K"$RYG7!joML.`Oa,-(X)NMW+q2V]gf4%Ygc(@;L.PkU6g'7T</]NY$=t60'DMKjpui
%VOEMg7<a^L)R'8#i\B"mD2<pK836M$ON&FZ]X;T**ch));Tk11Kpfg'=?HlU)d^TcI).Z]jb=`g53(HglB9+#5DQ1/MhYpSg";Po
%F^3':gs=/o$a2_$s'55[2]M\22Ds$3`h'.neG9&3M_F%SD.?]GShWL&>^$W$5??+V*ZM,.b>8m.1PB4Q4:SaSPccpEN=/4DLl<g'
%RITU^2Qa74N4*Xs<B@Wr[HI`(/SiG,AVsnfrHpIW;bZGfB$'/U9G8R`&+u>8%tPtu>DY&J?^<-9clBfM#ne=%@>\oY09Io$@g^L/
%1;tq6`TZkMl$,-*Dr$$)_=u"b>a?`Oq+_r0i6Mi)!&^YUE2Qg11.;S@Mn]&5$7$3YAb%AAQ7)dl-&^Zp"c(aC9lU9-,sm@\T/*'6
%Gs,7;[\,!$X2D7G-Y>cC)p%+^WZo0QOboOT@3NT"F=HMp:b:3?l4W2FoT=2F3WV>F$>c"RR(=hEOp&=tB?l_%R5]cKEP)janU8ci
%5RIX>m)[)eC&u:S/+&'^7d0oK2;4dm4<-auVK(/9pdW&%XquKKo,0f4Uo*q5(XEIR.kWWQZk.IDS9UYZ<otE1X&=?$3]7>T7jt7/
%3*+,D^;E8E0>uR"c$UoP'N8*1hKSm*q[QJY05:O0i+e&CHu#m]1)ZIRX$1J4A2#kr&Itra<\3]cV@lbSGL,5Bi8D78#TM:+o)lh;
%=p[nkU8c(ba%oGt7X@PV;,9Ll%^q2IF90@c'l<RPeK>qj#X;9VcO?iJV0]ih>.DHa7E^H,KC;3+_^B)OG\fpX1abjOSCiquj`f8.
%Y`(c9r*_>9nA<n67+WFloq2W;)A4W-l+S>+ogGj7d$pZ`AI8p2b-L5'<KhkLEk;+ooFsXd7&%3$3EfGEWD7ER,T)033^Hf'ie%52
%R!s/#\DkL9peFm?g+e>gX1"0AQh*[)Ot.;IA0^'+V&%caC6uGn.Nj-+rr:6V9ogl!EZDS:d/W'B\05gJq#4C@PU'Xe!]Z*86Z4hq
%'Y?@-Yc'idi^!NMBkHdqOlp8gg[A1J+T`,0Z?IKK1-R9Pgs&i<+Q4?'DFB4C].A2sJ9\7*dY0g<6l>GlL2T(KD_88`a(>\]%c:Po
%RT[C_SX\YY)BI)*:kl8)>=&)MK5,/&5X]a.j^u:i&`\e_q]<e&CR#hbg#Erb&$d.T4_ZtU*>6($LuThlF:7qJN^5%HR*2u`#rg"-
%;d&/^p1OUs&\lY;>!_"1oB]lI=+W_V/=gE3e6rW^-$iRL:*R^k1!cjH!td<XC*8LXIR8)e$H#![`Hm-CN<2KQX(eIP$WFB$@lt5s
%O0Mse"Gb319uP+q!$_f+F3;0=f"Uu9U.*\mpDar.+O_upRbb*7?U@qKNm+V[F5*&S4"-7ie&*4`lF%R=+fe_=mGKh*Fn$UCCTnXL
%Ko%Ldc(X[?M"?,$A$9PMbQMc.Z\N2Lq33a[Jn]1*CAJhPbgGbi6WH*8JtC49ldV&4!l-P`JXO[h2Z7;Z[ERDQ5Y>5O3;`<<IjkU4
%aatN^F#*SGTK@!De6JqG;CP))VZG7M<9@aIR'>0:7)$DLSYVa?F>D-p,X"PA=tPpTcWh>s)=;d&nY'@pO']+N%_L1,l/Z&'"^Qj^
%ZM)G&O@c7eWT,Cjd+dAE@u;CHMB&DtfJN;:?#_/S04.>QIQ$ENC]$[I.6SU[BikG?a<Qo*^o<V045'][+p](P<jC!^@CVY^\uSNG
%Hh;XYaC"V<V(g+JVuI)1YN"X)WUB"S=--/CN$[&O?gEk,\G_0ZYC1`Z(OtgbQ(?ldf)5<c>/,P`leCl$L]_;h'PtnIW#7q5kHqQJ
%LdZiP642`JR7EL>p\sHjq5k*IN,%FKK"oA]/s.CckE,mBO`[QeML9r8/HOIInm!AQN$*,mck?7WNiGE`B_k<PdN0G<%Z;1<O`if(
%9:k#:V7h<H)Gn8qWWasNpo$G]+E5a3H.2\P^%A$0^O?r&j6>UIYo<2(dB!UL[J8:IjDY"<s8E22,u9F2gSl6I\Ej"gfU&'<hiaIU
%7DO<tnBr_A"$f`I[dcPKm*BJ*=8)W'J%Z5[3rX7]2'0H'O@*Xt6Uedr9"^QNs"\,ai:t8*k6V=>Z:Y^L5H+%ja]Ep,%c'i),p@I*
%?,NmX]*6:skGRJR]q(J`ld8Y'`e;6\k_7fXSuV=WU\[Kc>+]*?O->BrkWl<r-ksia9Fd&%[g1k[;dkbSGb_*r5VN+_pIt=Urp991
%jq'trp<)5miO6&P38q4uY2Ibb5Oa^1H$Z^[ZCKJ%70O#3HnCR_o]/@IAZZ7^IN(3:%EZ3%Gd3;Cp_W\XroPlu+'>AVhSARrct`H(
%!WAd4r8d!]IQ82!>]u1DQ]J.rs.rNanIPSMcHOAW;<Z[QO2V*X`$*D,#Y4K<0.WOBFgg(Wg\AH$Po)8^G4Map;gb=%p:!9:nuI*3
%l*K52R.!8,QMVKR2:^Lkr:F.t*Krr_qCEOTSrS6/C`o2hq,Xan3sYtgq;?`B+LhCo1gJ5A,C,*#&hH"UdWbLp:det0"+mmW7$.5#
%aH63%n`ngs1AkF=a!35QF)>M#X5g"[or0)_#8O1/kL0%0$qmn)A4hSI?7R8'^J#B\OMq4C\@RL\>NDKZbNYPenjJX&?/tMN70P2@
%T\'me/;_S(f_3="dF(EDJqA)?SIZ1SD&Ri;b3JC4'uQTiELtqsaN.o[YT#Q@12c!X8(j9ehIt!RAIr\LA[$70<Yh]de0ePJ5EW&d
%-g7s$+6?l%2!eOt2%9@@T@Q4eVm5>?35T&2kuFf$c9QJc=lATL7$N@6]XHf=3+\aC60PLKdM!!h4#l5S+=jK=bhPIR*tGl*4pm-P
%_suX02`gN8f?M-)KqW*jL[_YF#3*=\fNTKK=^4UO17T;h<Hs)aiPHXW50BA_\V8W@JEtX5q8_Ck:"ra\Du];Ab?^rS$C!(aB^+6U
%->0^$f,\]"hdP!9dWa>Epa^NQ]:.Ti?VUUg,B0^6LGf&+XQE<<Zo;V)2pI2CA#.$`m*h:D5Pk.ba]up1=m8)2n#dOGqs/$l'VDCu
%V4a[U:bO*07MNuOY'sKF]ckrf0-BiFY77r'Yf;(lN#t"[,$Qbg7Tb'p/kFlD&E6D<X[@cg&DTPm+2ld>%63K0U)%IC>p-=Aa8VkJ
%nJ<5M:Coj7&3rE$eYm"XcPJW]PWPr-i)t2Pddn9h4a9GFIKb;?<GqMq1kepXFA="S#QEjS(BN=[etnl:0s%DM/V*>5,08[d,1_:+
%j20]a=Y]&>IoA(\;1]B]'1=6S2!Ib9LsYN/MsDc?qth."D9)<5mO+8ql6J;#]#@B+X:?]#&PT^0"9Qon"+b<d&Xe3mjUcbHnfarr
%+LIbPUenc&/E6K[D]5/$dOM28K=IbVJgUU1RnLTb'DW^V[V"hH5[6*5C"fQcP<B,XA@NKh@BWQ;Dtqf$n:K/sI!kuTfUfmWrLU,J
%m4F9/kKf=k%-GOPDaKdmi"^'L]pF3@.Ou_]_%?RY@K!JeAo&TpB]Zauo,Wqo7LUQC@)WoC,AYX7#I$O4EpNQO56d(.Bhum_/HnNU
%-8=4R"/tq[#T"Zbf`5>J^=YP'L,;D1;eQpUMOu7jUM*2jX&u-h(Vg5f'b9PA5ANR6L>p&o>!XXWFm*_8?qu>=.l8p]iI+cJIkU>D
%Tm//;>\]4Ha!DPW"7+>,WR_ojreeqfp61T8[jC,DR'opD5[Zhq&E_*9?+tPO.cqmhfl8Z+"_P92!D39hPRO7Q3KRW-Z8@_Zbi"r;
%`_9`L#'Z@<JHJgKB+:$L5S+#cKO0os%g<Ib1V[4eT<WtLYq[>]DQ[.n!"O?ZJE=0327%m&jbTk5@6okOh=aQFIs'V]K",3:!qS44
%jR.Br/$@cdB^ro"*SUZoqW`YX;BBr1DbmE;nR/JX53miD4IggEa.eg<,Md)b#I2ctJ^c)T-O_JLJe1V;JD`-I;)ES/Xg,DuZ0kcm
%(djU?,6/>%M,?tf@K<C]"Jl2-$$f_g)\*YhAfZdeZ0=d[58A8o[X`),WCaSIF_WWVQlq,f.C@562VaCM*&(J8#hZ<-[SB&F8>Ydj
%K"\-i%4_6+3&2?]O!Jb@A$f%@k9js>"/3Rc&L9V2HrKUn`24)sC8=*;p:4r;&OZ\0aU]^5Uuhp!@!Tus;@&c'2dj<A>a-iGJfnDC
%M:iAh'R5)-@&c"%(m!bk866a28<=?+Z^=?aY.F(8F>5T\riE35=pq(-JY1Rb15R&EgnJX.WnFJN#m-<pZ-c1^6%T.QlV5u7PTZ,B
%Wn-DOJR')/VR?9CLEm1Ghp>dG[$4Ggl$c,6p6mMKojmGIP=am4g./IIN'SuL&V`$)3K*TeSOS%0#A"!CEi#d@FV,!XF_1$#K\jiI
%lu"BVA2J)r11V29n:L/dDrI'75XobD[`JP:AtcJqR[:(_gE_;k3C=@YblOiP1BS^:!=-+3r<ZMs"5$crj3N.R<"3F!I$d[-\mF$V
%s,XL(YZ_H^+b2]n5cOIM$(!WbYL-p8ZQ*:6I%R9J=42*<.G@%F.Ja2:<^=M55/#<98'BB>ph0)_#&"](gm[%i*"WQ1W]PF5E2I"m
%QcLei&qEkMK&/<C/M9SHd><[F85S3p=2A\\4Z.+:6BZ0rWHN_6>F%foZCnF2fp;DFQZuSNc5X!e\*]s#VbKP0DfSu&[=6-forjFL
%777^R^0Pke*hJA5bqH3A%,]],.7kNlD-*3$A#%E3b,lR4TF^^-Rl].3+F.i%E:*rt%r@D]T"Kc85o#M+NVQbP+YXk-UP6^jiPdXT
%#$n1=<SljNe#kXDd3]L4Ls3TX,TrrgEm>;0B+Gp\`YK459=VFZQU#YmbK/&g7dmF:hq#S:RNXhm*QHUn.7$0]>'%s9N;>sgP]'EJ
%s$Z)He0oNSXKkoEX=]lk)WJ1#6$/gu-8(081B>Fp$W:;mjgAc93D![AM]HG/,JOt57R2hElS]K(!RU%gBo<'2cLo:g/kE(ol^>@^
%H\P5qB[]`[31:HLh_:A>ar/O,l<#61^jqS..k2SLpM6Vp-)bP2A4(_Za<7I)3"nid<Lr+Fn6`%6m#V@f&"CuGB$M7kSZ3_&7Ma*1
%H_X.D)gsV5*g)SYnMsH^,kT>5:(!P/j3g]9gOSKIBb;4gK6$2"B*1p++cb'IBSEY/&?>,,M!&/::Xo]?Xf$eE-V*Il!$_$-R^I)+
%"k)G=4-Lmn,Btb`IA7X`&Kof(>&^,##h'8!n9;!HV4bd;'N!rUBhKcaC"^=AJO>FRR(JhHBWM85Q5'N-/0KmjVPQ[XAE99.bt+4J
%5h^=U<gFtI-8J8NqZ(-f5_P"P:?LWEc;'ClZJ]^rm`o3l;b)^bCd\Mao,Qs6<<hf8\_=`oZ#D8qfZDifQqjCd@`4Qu.PO5Y[V;fX
%r]Z&r1NSF7Yq+^9CMR)!$=cH>#*WKe:%=V*OQHhr3%3QVT:+$?Wse#95PSsSNLCQP8#>N6c*hesdXr;@G`<dQ&"QJKVf9F3k46"=
%o2eVV&`IjCi^26uEc]/d?tKJ.Cam;9J.0)p>bpt&ACq`Z:Unj6Ba.>3EtUL%Ym]No<H'Jqn:H@ri^/b8@nF`Wdt#A32HCZ7Uc0LT
%Q:/G!:d%o7'b8>P@@g5)E*4Vtb6ef264Fbj_1k<(Ib#baNL>(Yr,ePlre<-igIWGNif9/![aeH1Q04BjQ>S(k\X:LKL0hYu`j3Ve
%Y>:(%I?I?K!/#A#pp=J5i,[daYud#e(g-^(\Oq\uD-*P@$.EV\ih;JOjM!H\!%.+9#M<T^Su/]I\C#qH!K#?g;P\ns6d[#&bRJdd
%1>*t-BLm:Z43`>tck#448j6Sg.tEj.="0*a;GG+C5p>F4arFPSgI9*Z&kPHT"[:nr'*uq$l5HAmR"\ptJq&.*WgpDqXE%L;1AhhT
%9,[NMTpt$'>o]Z)?d)C+?Z=YijQHhHYbosT'KG,6K@$foCK/;i<U-!p72h/JO<c2:@AUs7LG\N@i%b&*K//?4MrV&<Bg5?[6)XE&
%RU$5Fd9mqVOfkoQ6kFGm^'RA=7^6Q^3o2,QFC<Dq,>c4RI2gQ7%-ihOY2C"9Nf6.._Y905c]B:o&L7X'StQ9AjV7qe2(A5o8eO(7
%CNF*/*_8T*1FO5SSomt0F=.FTWMJ`,MEAV[8%]bC[;aTMBFoS_@U_0-Z[uf#NDmj0=qs(a,X\QqQfD_7;ruC;5JrVt_V.6ZS$7kn
%F6<5p=eTaV?CJb$_>)\k5r_(M6Pt>%+$QXEis8OAP>(:U$nc$)_3@[0J8-M_.`S"$8etLe=i&kU"B3A2EVSn=WKWckV]_f:UTN1,
%QI$FUi^chc3]$SZ><">=lHp\ee!Y$:1jlto[-Y1*3/8D513*W;X$U0$.l`d9d0aWc,g4g3WbQ50@CTP8V$gBm3e(k?61+J,GBB(n
%#&lNAo.BnT_<02q`:^'rM\fZ$WqNq@brAl<nC0:1UFhQu32BP186-0O*_;MN%Q/kE)4HkAZ<Fn`/HJs8B!eK3Jq`8?Yg6`?g/<%Z
%6u:'b>^Mg8'9/>Dr<3Mui[tM'"l,hnesRUiZ"YZ53^'M$Z&oiR'+*hO69)$LOQ2^Uci_djb!e>Z?>(o`N#Lc'Mi=\O[Z`%g'YArm
%q3!j^`1dNA2<A8$[f@;JpjsU`TI/ZRD5%qeD6a=aQO/K-W`XnRD+t2F.[;HI$u(gd;SbPPm<.KGY67@o[OVR*JHRZIl>tjKT.u5X
%7KtH(m_s>/P*lV')J4c`'(h16Dm;SkBXk3=qGi3u/BphpUpq+$\_,W,',H&a]MGTBjd*7fhWi6%!]ArY%M)FDVV']lOfAEG=1#:`
%k:82Ji,Ogn?E!&+C"+^X\-rl0M$J3Yaem%=&m&&NM.Vi0jQNVh$XmrS'aWf0:pQ1'+8:$J)K<k](;Xq8<:h!4k_;YVY'*^m`oM,?
%*#'.EAr5is7T%"OAPmE,8m+<\00(KnVErrs.\7uF]5uJV%"#l/.6/lB8pdqBFcP/eC9N[PNnTAN]I-3d7E1u.7r9%!I<&:2;MI)i
%$H,.)jJWM[#boJ];-T;Cj5d.,RW1T*W<@WW4%fau"Hbc=-0Sm'/<seQ(W?slJ3V4:.Z4b6ZGo`p05uqD0K=&0NnR1,iPJI>G#]gS
%jJZbO-K4NZUB8qO?lZR_(%miC*#49qpl2%8%TO=5)b4`lp3Lc/<non+*#7L"p7@8=@do[oN#*J!,E#c^F4?L%.WjXJ%@M[Q'H'DX
%,X(PLii"iab$M`#</<rr\os69W81=VFXO/-T56@X3_O=_:;qH.[ojib0&9VZ5l8ijV#lmbfu[,rE\$:l;Ye5m>I:Y7J=RY0`_o[M
%P`6bE9BE(-kS[#>_O]"U.b^P:_;A?Ege:@!:.gfZDcHSf/s^f+8U!'391ASC[XkbaoP#(d17!f#:]J_2V.*o6J"3>nn@iSKPq3Y!
%:iiku3(l[I<99NgQHBo?d0Lt".SLRW-\.DW+tosVl-<1h!]:o=FcqV-W0B,A,dhc/6sN84F.S7#)G.ooR/bf1.KJ.E2j+N7TttGT
%,dm0jj4h[Q;9`MYl4at6(7jQWU>hY@[-f)+D9]0h)asp$WL$%NJM:,O;,fC9(cFdPU&qFH\1K-Z&02OWU2C-1MTVPC$>C3>?o?:[
%l329eMX#n)]Fl3lH)]#*%3aDSFF&6^iUjLFn&\=#fbWHtj:hrETiiEC,H&>WkE[5N79bO^'UIeoj"'pCf#]@%8^hc+V[)E9Q'"uT
%6Y0XZG)G(flfd^%'P!>@:_u44cs_%g@](&r/K3X8'`R9*)G#&*](/jklkF`49/F<Im'I54DOg&-WDq+&@E]&2H&G`"78K?K3Otga
%oG#C9"<+)6#?%qCD"JF7#(Y1O"uhr\]+X?WO=Ar%8P]XNgZG#t,#,9npa84Ab7eN`V^Tj#p77cV9`@]JVl4#^nj%L.+@RNMUo.l<
%SN\rXMPd3-Qgn#:]bY$3IYp=Oh.boIaD%2UYS07?+OJl%SmpVP&a#:K@NoO8E-dCXdP@:R4`,A#J"`cBK,O?skUC12i9KLt[$_i]
%Kq=mj]@55A)Z%Wq:2fY/\)2l(%eG<cJs1D0e_KMaF,ELk$F(k/W6,-s]Rgq:F@pmG=V)jfkBB=#]E1N"$dqTn+b_[p@B:S'qEoIM
%#Glu48lGqURS;`[;,.[i4O>5&RKP&@?%G9/Q',(r7M21nX39-mc]JVK#ur^J;783k/PPj?QMou9pn8&ts6hm7UOQ2'o_IMqoo%`:
%q<\rs[3f3'l$`f-\-N<CiK\cHUf*!-6$Zq-G'VXMfo\h]P2G2,PGF'hpUkBmY]%:OhX>9u>T[oU8u-"["_041-J+"IUQJ8/#6$X5
%?#ML<&.B4m&+7Y%%>![&.i8*`i(Som;WO[Amp)gX88KWa*j);aniS2T1n8L(m`c#e)?b8:j^q'>NkI(d5X4_hO1b.BKT#)l/Se1Y
%hFH#tMRZs:#kXqs"k,"BPi[Fol_s'8c2Zd:E^(F:-j^n-1WLrZ$dERjpNW-c%pT9iMT0JMM7o[sX8p/*X*9X[4Mho7-h!TLW/jfZ
%h1PV1k')RJ_-o5lGUm=jSqobp9bVnspO%.5@hmJ&onc.Hk@=6jDB0`LPF.DYfX.ap".BXt22A81lOo^'\!ZCD;O*&+/Z;@km=U/(
%CVdW+^@./QT"F7Ea)SnhGa\FHE'!$e#CT1uUsB'JWK4(^FLan\QR47q'&:d_f,?'L+iB,]0jKp<a+cG!3YcehWl)%N\ZGI@I_4j:
%0Adp:X&nl!<5/fg>1.=)rqd^fM7.7e`2+S4:sA2G$SJ&r0_)D6=>f>+ErM0b>nB3YUS*5!h%/;q&UlMHmQ0E]SpTb[a)Snh#c3Os
%?^DuNf?gCFKs&6FQMQB[=b0C2p"naYm3jAYO)EJaCA@ja:H:q-RqTt([pK$GID2[>+1Kq8XnZVNrmHAoknktu(>Zj*:h42dRH_lj
%`+Z/cOV15tI>b?;n2Wl+a\+FQ7,.hhhDW/IG:YBQqc.^r=p95[gsD'=X-6`rFpUVFo>052`Z'APa$T7Z.P@ieTcM//A!$!Z5\S%$
%%u<DpqCm!D"/S#TbZ%QoKP,G%6lFIb"WZTX>2Z(Ts-KDu2f"6rm!,>&2rsW6$NJmo2][60!cEb8c%(*YGq9=l`*1[3FSipVoK9]O
%!#m3F0Ms4dhZ/@H9"2%G_-Me,W==Mp^Ubt=98HR3:P@>[Af>Ut%UsLZapA:1A#p]1+WmJ9CHO-cY^@.GlU.`R?e]s*SB,"<2(9MY
%WK)s4+1L\4MuEZZ.g3<P?l=aIRn=uP1gIG+ZH`S@?Qn`.b@m#MgA:A/7CaA-'*cB2$oOU#X9mI(F:K&8D>ki%i)DS>cA;n8A=Lp_
%SH'QCJgfOlaBn;eo,Z#'k2Q-R%+Q&C)qm<74cCkjRL/IoI;Z[#h>f`Z'Y3V^Rnn;.cMR=F@C2*&pEPu$,iGVHJT-$&dABO$&&?"_
%'Yng]AeQ.C?fpC-Agu62V(sTB5GZ?a4ded`Q[p\''PQI3[A&iFMmZh+PtAsBl)RTt9Y*!:!jB.(h2VFn2:UYK\X?.kh?2riLSUi>
%ZkRYD`:AY3hXf596MnuQ5@DOX$gZ(&HbW83XQRp1rq#jQ-;lk+Io.d7*tF#ra^RS/6O#dBgeQos;B5nR68W:h%p7;Km!Kl0Qu.ZU
%9:n^5LZn=d\=5&DZg)0!h+Z8/g&-Q!oJ_\lHpVcQd<)TM6TUJ]2VrX77r1u4"tJ7kkkK4[_KHZkE_m=D,#=rgpG%?0=7P8S$g%!7
%?X2sWP:+`jO@UG%)#K)*..3:&Xl!+XZKcoZi.(RQYI\EKJ*9&,.e'OAnEK&uVPi:QSeN'"a;cW\BND&r<qF&+/\sJ$UL6sR++@R+
%lcKN*F*V#\:Uin:hYF6,OeM]i4:fZ(RBn437V\>#Z\N!X!6#-9EFdt`NpnZg9/gN'E?A0Orf`qolkSndis?:Q;-9LrDnqjGH2/@u
%Q^^j2G(T&r;r'%t<Jf&`EgIJIE(n3j#6"L;e+5p3ekJ8iiWBF35D/C2`BN\:T<Ua]M&tD%]boU[%L/mF`>'gF8e2Jbj;fB"rt?;J
%OUOJoko8#lX<WC-9+HLn1PUY-)5(eh`e""[IkLu'!N!_?%hR/bA;9@De%,ZcNabLcPL)Au.(.JUYANDFbcaj]%`#C(!:f`M;@h:i
%Y,qC]%g&CI9i4I^jbcU9:AlfK2t2TQ+slj4YH4fXeqG;B+.sGlTs0mEVo#heY?*-1(JnFK$:R'!TGG5')3't3pXC4hfRBL6H)3R%
%HXWS(!=d@gRa5Y"_qLQ2V>OcldVpBU6AO"^,C?tq,So[K.BB2iY$3RRDCOnh,O$&maMDUcf!)DjVCkU:Jl]1b5Q%1/57GOS5ZAcV
%"p/nqIB9iMk\6^\F<\k]#YGbY=K?O'"p-hd1nRsj;M$,%EVQ3fmKt?rqpdUZP'NC5k^qg"Cm)Pe9q';`EA#u3(b47-/qFRe*NWpK
%h3sqPrd`GD+@l(;OO,k.l+3NT1$'lAc/JMPA=//ijh3=?N6%"&BN2-nJ7`V(p3^>#`ATO<^pM.IcB\P+aS%TWbm,ZK;hBh3b7qS7
%%TP#Oh[DeVBiQq;Z2*j96nn_3JW)_8bdF>AKR"J+;J+R]c$uRk8jJe#nQNAUb<#\YUeK.>2%>+EFncK0<"gaLH$onZ+<X+dkqhZO
%N8X#fpQ'YY["NIPVU=kZFRt0',L]IS;@ap=X,/SuoaS2fnbQU+RDYY!e$OS,E2YWNq#DpA007hVfSHla]g//A1Oe.E11PlJX22i^
%g&l%l!u1X>qV[)fGK[+`&Ngf4$rm3n*9n)@#:(rjD%8%a>4<Q8g.S^;B:nQNPolgJoR"(V+la+Vk&)B]'P/g'Ko'8''L,*ro]iJ9
%1jsD"`C`d'Ol-Hp>SMQ\P^>*W<glC<2(9;Xb2f;9-5c@Zkt4;Wj->]AZ!rXjJRk0G!>W4>A-QfY9ZV[k`ZM(PVSbS0<Al$]L`koB
%]SQkfC'+N#Ai].CH)r9CZRc*fX9ue2Z')gK'jFBBLpMV.SF#PD.UG%`'YUHH'S?*\f\Qm&DnClg&jaJTJ?-#i[hP87&,K+)i?fS3
%ml97*CCr0@\V^KXXntlL,005L67@:B9f*&EB!%VGMr#9Qf<Dff]$+_P./Ih*69`>tJ%_gpFs]W/A\N65#V%^eYd[uImU4S*C&Grj
%Ai=5&2S,Q;@N:bqQic4rbYG"9"X3F_5dIpu]?(jV7)Mbi+iqQp1tAR.Ri[?Ym3N%^P&poU6*hD)g_s[-gBs5-B!9#mltKtJ2:P:N
%.*4CI:"RsXTXW&WO\dR]hs+u'F\l(=DWQJ%QAM!,eX0>-`R]]FXi;T,Ts']%Z.HiDg7,XInZs>n@nT[11sXZ%bo(2GJ4\,oN]-TV
%p9p78LZ[k0ps0A@?so@,?[K2@Lq#]u;;(*4%KiV[N*<EHam'6hI;?"YH/oD<<6i;^-AL9uQFnCj75(\)&QLKd9kqmYDpUDjL2r@@
%TjPNO.,nt>aBt.Ogj\DsK^-l>g/g^;ja_8)l=*J']HWS&[unrV^3Nd'b6D+b>X-*Qf=6C62aH=L7:&i=Ftl39fgkei'r$'ca](lh
%Ne0eW"8EcG+^Q"G%3qc@[MISYHPPKHG*oO;#:P>k:c)^K]M1EHC2$?`kaY@@c]ij0jXTtI:-r3h=]'mX!pq\CjUi9Q76[H;\M1?3
%#ut\$!0m4j@KaFDXsHHB/Ic#+)IhC;1=Mm$HNOfNAA`RmbS$QK<33_'asB\-D<;05+"-0qfcG@A@1dR;WY%#("IZtuSZMA-;aR_b
%"eCg^*77R'c5^WE$.tYj>,hK549=tG1Y;5NA3#4d')dT]\K%S]7=n9h9VcFM3bju=]b>HlLHRjiB#XE\gA8$LiL]GW;WHd3;P)'i
%4H$;?ZQ4,YYU?;'j#SBnHKc`c@TP3DGUNR^nd`YXCF*i"bl"XEVK\jGQ0--9/5#qOV?#DIBJd^Y><pLu=U%:4!'.)LdhX_DljGJ5
%@mE_GC!7n0>)OS<P*J/m/_Mps*8-Z44(=4e$))@WbUpfJUZ_hGgIcT`W4dgmTmf+0b7A/Wgf+r/BHIR(+r"bd^bHtc&Mr"+r3\=?
%[uDWs[F.SJPRqg8aqB;1&3.7[g73>?*4r_?:M"K[p<Q\tMkFZDq1V\27M7PGoM.r<@V8G?Wh_YfBQqWnL6[^ZT;Nnd08+S.KJpN\
%&r0JA`1\>>hu<)cFrOlYinD:l]S%u5r#im2#b][0&UDro"]=>nU@kS]+2=)]I7gD#%dL);'5s8D0cn#j?rt>t%Y;abIo+?K=9'O%
%&`G3aON50SP%,IilG2u1*i#,^)`or(Ong#Nd;lDKEXLsImmqMMb`DfQq#[O:jP)fug^@k;/W@8f8(Z_p2M*4LRhTdLq6Icl@/?-$
%VaCbK$"d)@-S/YPc,(S6;nfAHXDB!PRe?EE1kl]_mU43Z%YZuPL-J\E.fma-N/:fHbY1#.(Fs(_a2WRNl0r0tiMB:a9Eu(/`!"c<
%Ya`EMs$;A;a$+bJTW`80oWC56[=8+d=,D#4S3o#oYR3/r"Nr5PeYekL4C84Sh0`UW@'0iiitNr9K?5oK`3ECdD9i@."5MUoifU%]
%MjWWZ%8h5Ds+qnOV2q%K$nF;.Jqu[W$;=q1gR("+ak^\p"bu?kR_QrDHrCjrlf-Qs/So)C:$\!(_BbBuI=8\:RWXlC(<;`r5A!hW
%\CLt&ZcTI1'hGYPj":&UbV)WHqm1K%LqdCOAh*(;E$'A/TR-I*'K!?[$&"VY;q[Ke%e*R]rar0_eURS]S&N7LLgeAo!km(O>i#;N
%G??k=(Y2::XE2g&-An<aB)bihQd=smqp9-,>C5PRaoLK>il`3PM-*iL\e_O#rPT%"(ln,h/\2h^3%V4.%Jt1p!Lgl_*i&]g,+Bb9
%K[%pqoMF_[Vn&7%rju*$8tc[L_K(^b88VXcc;@]1M.g;[WA[tl.0a1hX`CTZ"r?/i'V-;6>l^fBJ_Ib9ZpK0.JGC+A$]T<`XCKAi
%hc8\_=$,40,/lNBL,05N/j+D6+V+LCVX^.<U5_kUCEsmJV@9C'BJD&($/&0*9pn\:RZ;B8^u,So!2Kbu;LU<F*Lj6!KroVLRZDuM
%iW3_sZ,'<=Jlem:B0_S]@WCX$)#YQlUC&;*%C`+1Y52.F'APR.KB-Aj?2"*KqdqIV4XePRSUJI&`P?R2c_eS/0bFfmAijJ#V5tBB
%`,Gn_L6-caf`<']16pAb\(r:gjFS$jTP4pK0K:&fE@7##/#P>f@A<n\`&M(23B:2)92TC5(,T8b+H97]F"K(;"&PBeBV*)cAqR+&
%+[EpW,"BP;Z6C)V7Nk08O2`WD96Gi9,>auS#-:MLrL+JL2NW&oT08pW;r[t09+MCWeo"n<>sY6$G@>WWk4<SimbaVIlDmG'BDl,I
%Z;ECa)a(4Ya^>Hs*5G2RHQ/\S1TXGM08-ZE.H[B`e)+B8.miG*6<IBK7D](]`u,Bfh#%;R!J*+T:=DuoNb*0[4O+N5)o<Kj)u!\h
%&tfSlN-,a3=2i\_^JAC9_fVd=([>prU2TrVhMNIS!cLL+GoCq)0/'j)_4\VCJs\&CN;`q>?!j;Sm1]Oi7Y$btn4E4L1o18k8\Hg'
%JUjNXI*>.Tgk9ntPX=/Q;BA#H:Z*\T3egB?:HeBi,O*[;cd6?6PdkTRl!a[Po)iWaA%G"%"h,,sIp7X:'>NX6mIE!IXI@9IYqQHj
%^]l0Z(pNt@6IZeuL78u)rhXQ;JL5nKH4FVp@PrgMXs]dnJ8j$DZ$lbaB?"#`@1=%kCm:nA&(Lbe%+_q&Q3g[JVR`s,/M"UlDRol@
%g98:G6C3>X_f-hnH310h1Mtpn!$LMTo,EI2!nuQ:%^X$4'p)^RI_`c@C[4o+rT[eecLZD\/YhR.WF%*O,S,N(2YXgm+rdap_%'Pf
%HP-@ZN$@2Ob&`e%es8Z3$P8</7s=u)3-GqM63.&o"bC9@(#Gc"K%h[RX?\"'+lrEFOSI;uXK`"1!1K-d`&c2")!6H9'@fAt$Iuq<
%QIWGU"TZ@VaNSUN.&-b+,cI1oY'uqb"=/Aa=9u-I#Ohaq?NA&pK[`?hWrJeMkJ9YQ'OajLH/pH*ZNNP>3e_])CSFccdlXpl+j^4>
%HhK.]Su9k[q][smnB*fAT9_VWglm3F,MUXt.bat/4U"\*EYfY8N:ZJi5[4BkeeeAqT0$FpIt0g]!E_e)"p3^0bK$NJ(GK-3N#2T5
%Pp]8)3,F+C6V7RMf4Ze72N7STc03/8#_WOd%]Ue&V]TuI-[DTX=fT3#<)2m3C$0QN5mIirm[=UKIBHIR<T]0)@-XN@8F6adDk<e5
%ZK;#h)R<JkE.,Cke.6`!K+T).nZTrsbLDeAW([:rGUFgQ<b.i&QtJr9JrP=VGb'2br8"<BS_Wq4)gGg^lP$5AVGNld68kJsK.&>+
%4G*bYJ>aVV#M.pR7YD>oE]Y[+VooPQT16cL;.aZIaofjT\pj/B]\-PT+?L:>O6)4>2i4h+NXAf9hG_`Gq(m#b-4Z8^&Ijj69&;8I
%NA']3S="f\(L_8Y.tg!A!m)A@BF4+5!0H`0^lTgbnK^(!er\Lt5ck2g%.j`ji_M`1UE+'oUH?J&PMb<`N$!qmmO>0+9E>4g=(Ii:
%O5R?p^?VtBs%'fpi4VU9[U7C]6k%*S!m*pid!d._8=*ns;S:6VL5J6^UnLQbO>F`\Q`X68Y$S&1Tjc(PC"[R*i3FWTER<4U+M[@D
%!(4=ppsr8e?&-XC2ABOHTdX1XFmic8_F2?n@St(G0Ue6Aj@[CM('Ke`&5`]DgG1Ggmr6OVP=%i^"pK@BL)=Qc*TASeMfB/UT2MrH
%rpP_BWo'EEl`3P*cUUbfF";jqD4379/F-;0'O!W'^$obXNY>5<1PIpg^$Rcl`$M:Q1n$#A^R>!"J)_$hb##[U>@P0KD!V0>\0<ec
%,m)Q`mWd82mS*LU;LAJYJ6eI8R#JT\$=M+]c\#qKjMX!:^^W&6X2P:bV$"(](:S,ir)6_G/h.V>aYhj=d?D-Y?nHq7%btfodU.MV
%cqeUKF&R^T>`QhWLO!Umnk6te*)gg&YP&]13dU(i*t=o#EKC$a%O''@6qcgl?2V=S27,6U6V+B,lt+cY?k^&pK:;uj=[O1B*tkeu
%!_@K(5Y=BE=[fhj'/2WqjB1W_FCdNcP6h5JB)p_B!9@nho5NI&UPiB_OkJFq6#%42(r!01WMa?<Vom9D44WpX>?0goB'to:0:LYF
%4o:`2#S4khYS7/siW9+D/2JTIrM%>4MK0`Qi:VjXVR6Dir1lMW5TG;s")iL2D;*P71cOkmM*PBh?$kkg#6IE\d8#2U5WEh]rqnq?
%Yr.mQ+7g4J,u@*^C5-@'nnqit,/C7=.-nRhEVppp:b2@XA!Drm*F1AZEHS,,^klH4nn'#fb^L7rdoI-3Hr%o2r&k8k<rTBh]lpqZ
%5?IjAI[s"&j/b':ijF*/?0spALbRt&RG`(m6t87gD9"'kF;Hq9(3AI:!c(34X<G.u@!_Et3/c]UK1QOk;^Z\npE@@&;m?j<=ZsFp
%#>Fs&IGngV5Td`F(SHg2rQ=H67bp$t1,q_\ie^kG,Rs9Ni#1D4^'#a3Y35E[Ur-'[b^j>i-B2!c9)SJ\?hFa#XmP[jH/*mqZYqJo
%T;Y!lUKKDf8aR?INo?!fB0;!X<i&!Xi#`uX@7#SOe*I"S>B"rOT1HWtK,>/=4e'khj4H*VY!%qc4lIISiidRPoR$@/Zg?H/])CRD
%h19AI&VEL_eZBEL=u'BL2K4#jf%d`_E77r3[J"Y\lMgbW_M?3&HHfpPh:qG-[;Ys(9?\s5mJ?guOLsoM?a&j'r$u4kD_$0=L"iK<
%*A/F6p*g.7ZRnm!@<u2SQD_kU]@R*k0-F.@Q%s@)&"^a[4Ydn]["I;L>aQPU#fi`Z@s-)'&0LahWK="W4s*PHbL/hEIY[q#kO3ip
%RSg:PfNR;5K/U>Yh<0*thECIU'`?Mkj2j#'1>r](4lB!Fj=(<*37^r)M`6aZ)miR+eQAKM76,c%Y'+Anf(M\l:Jk1>VFHA,4>n0o
%_,cE7+]C(neHs'7Y:2_J6[:RS3,XD>V7(,X4e02^dhX4k&LD%9FQ83I7//[K@>%"$AF,roJXI(;7%3rBG^)5.cV5YZ\2ZG\m+L#Q
%EDMYq5@Mq`nXYKt^%hmPp8L+A41K&).[7K&"Wfl316[s-O;I-uM%OV\bal3c1g"B]>hsnN1ul_'B;3S3JV)%&LCed;7J+l).V*KH
%Ge(hSX?fhN^q'[&oDBKPmTuOW<7J^PVB\4'oQ$r,.ofpYUJu3#AH@h.%:bP^*L8R7ENJr>6K_ZV"GWrc22oS="E$`uruOCXnV]%d
%7LRR+N.f;\>RZfO3F3KNP.X`M1d`7:lhjV05_HQ2&OOJ+7^sOBG9cThSDL[O#,9dYjESA4>nO+JW3tUMD0'Jqq)]Ylrkmni4*>YD
%-,P:N,u:6BO#dF$CHCfY3AFYRjsbgAM&\1r`CRFni!8H\%4/N8Nt]AZd/"FIK@s1bopH%S8./#n+'NR>TJ[B$oAIF[.5R8Hb%6%S
%e)2M@.^VgT)C\bG]#<s.dRm"rXB_MI;/2E<`']D,Y=P#s?k$([\X,96kk?1m`fKt;>KXOA"uJ=B2GQqSV><L!1+m1+pf(Db(ni)N
%4T(]&%;7"VY;:=1r5G@tKeM6u(k^[E't*]-_mNa#As@aIO9*I!$iSG:dM=l:a3QH;Q(K)%Hq:]P6'lFrThM$$+&^+oPSsY,d^_qP
%cL`A@WYaF$L2n=_`ML9U/MUIfnhZ*=k9HAf,V9.]dWeI-_B]>!Wt!c!J;(kb(;gqU-.0gm;GIb_#WF9XSV-SZ.g-+[TLr+_:oZn3
%PujbJRk@>7KqVKX-D[@^DZjY3l-#J4B^1fb_@po69J-"5UbiqRXV5GT&FO?KZc4OS]X#HeN5ulh+/Y`W#ZZeGpTg&hZMRrM(ag*"
%?%Qk:A[34LfF,!ohhG1Rh/b_kKGmqt*QOTF8(gKqe&#=S@@'j>qeW;igP*LU^"\3'U!)(Ld0Ub0dX-U<8khi-8*9=[2X3G+GXmZi
%!k_i:#X&SIqmZuCgeDHS*JR!r.$W+&m_RFsTS:*p;_P9>^Z@u)2YWPSOO](]4OKhJisLS?NOl0s6bK(43A]253b)WMlaXajg<m`X
%oY@4r@T1]_LoT/92&QaaK^p1:P'j_1,_kET?I;fT.JLS9D%VstIn]Ho5X'R-l&q+8*&5bYM(pdP:jDj_ZY(V/A8qW]Qjfb9=uD\F
%)dfY)@.<aLKU`l?Se+#PL)dSC1=*g0Tq-%-fMT43$M*Q?']utnCRCY@A*bqKE-&$q2"4bhpg?j1jaDm`ns%TF;d(\O0Dr=g]AfEV
%%$+-J(u37X=$Op/BH%qs&8/CT4?C<%)-f?sk-d!i`+1qL*S:N)AAY/QT[_P#-LJf,-a3'!kT#jOk0)iYHPOreoc;Y4:<:G/8rA-(
%3#SrNYG5*Wq`_=^lI5f>$u!iiGjl"haqo-J`Ni2:h1,G"'9HG)5HhQ>lX0p[j!msiB'A$h>g`qm?GK7<I7Y3HjmUUg!Io,7n`Rmj
%,V[$#iaghECT8lCUk'L_OG&?2?KX3N.)7,SEHG)'%gI+HW"@+%4e`56+V^LjM66jDQ@&\2@dJ/45Umo@rt3,!Q]M8h!KCjI'&[ZY
%V`pmm->C9nVERG'(_"J2hEWiA9F1DY=InF!:.&qX_&Kf_olk@^LQ#kZWAmm<K\\)j1ts\U@OO(6#q6Jr&7"<'.3+u,.`n32^]M01
%'@4\CTbd=*>e<AF)[^#"qD&oSZ:)U4bA`FAl/Us0rIH!hG[lWG_;jY?eVc^RV-/t$B5DiO-K8jlZ/!MKCH+/h&<DTD#@W!P;]s1Y
%P]J:ico4cl8e.Ofj^1n*ZG*6&+r*A)EXc?i&sZj@-D6ZXn:Hcn0qE8oDO6m9JJPb@;LCfG#P8oVM5lT!q8ZQ6L^7Q(PpTK\gbGPC
%oVH'a,Hb>#d*mkoP&Tl&H3/qCR#LeEMB.qC-4,cO861osf8lo71RO>kJW,E+KCJqV;DA1TLJgJ"/jRQa+00p4322/Sff,=%"&\$.
%UYnk]roj(G32[d=i%H-m>&nU/$^m^:YSqT@NEVE@&ISk=RN,q4/CLUcr[CsGhBffP2b9(85,9*p0HBb]m>*8I4%2^9UhDpqq"5q&
%Qu^Tj4VIG2C"B2I`Z^hUQ2-BJ+!USBO%arVd@jC1lTEea[1E'6!5^>g@FO)@>Vu^bm0NKf7mJ[@_W\N'9T1r?*-S#P<gBh%iH"&,
%gQHB4QQO)tSjCc.]Am"^]#unI][Emu+BgU+i-27D,F3#N`/t351Jek2]N8CcRp%f8!os2%*#lEk+B9,G#,D\sBsU\tG@&e"SZW(u
%-YF-3s6O55/&.&LLMUcSm7-Ds,f!YIiVXVJ"nMWfbuBQ0V:D8egE(R!Z)<`Zp,,<O#.tK(X(0a=%L94+1m!+tgf>=+6t"#-KmbYN
%&:t;7/p/nBlt/`o8V!ElT>erf#9m^<ZHulj%RP;`csl=EL_t^L2PnGATKXrk"UlkP=J"#b%aa+SWc*J,&\=0kp-2<H=_qit^UFpo
%FL17V9d_N)_PFPV:dPOVgfiR1e_=T=ANb">+h)ciNhG.I;PVQ3ni0ZIC&\1P,rm)Tr*W:@)Yer!\I&(?LLM&>^YCcPbu7;fpO5+p
%kj#$T^Xaq%Eu*Ith%>+SKG/']<=^Qc2<PEseRB.aH3C400fKe/X@SLt_EX*>N^L<!.p]u52sBR6V0d<6qk(%kJVU)qp]ZDdMQA7q
%CS@]A/N>G`_fKIGE/'ug>qTg!"H`N8n'UaoJ%C(JS=]REF"c#m41S0@'Qk8B&todt=&Dpi@_&1j>J4;!A*E7GgT=Xl"_&&A?.B9n
%6Z!MoB)[Bon$-=iD0Xi$%bdrfj4O^L4+mraqJ3JY]iOIiSu4Vt54i0.J"$rj8dQgo'C6I,#\hq@b:SWL+-bF(0P5,4SaL=u]qC4_
%0+r<jij^3cc&c,;:9pUZ,+*!b1N];_I3b=_G3HoF*9h%>&#=bAY)tBVk8FY'F_fg+\PKgR;9]@<F[saq^0Yi_"04<fHJ'87ZAbm)
%hMS';[GE`RU!KjGf5,fe)gfi]f.6,"H[CTFs/e0`]mMYd5FCd2lU#gGp9X>Eij2\.Vfh^lm<]5s/rTHs.+(remTo/N[[PipIMkKH
%CXMOln\H^H]HSpac#*6ZL-+S>(%TJRTg%dC>Fop-H+eIuE,E-mLS!,!L"77ZPT2Cs7AT;@JmR4t1`r6ZE!f;r.Y!->9-[=\qf<Eo
%D$j@meHF'6,`-kOe3:C`rOd,d)k'&?WqX3p$[oDs"k#Q7#b'4Zc1Zg;FF1mf,TRL2):Ln"ht4YWaec/Ln,K&`cd,nr7`SEUiDBSV
%[tGYD`&"Z-i>DLf:YjR<>Dt8>#3<.8cN5XVZq;PF/7i)DrG9?*gb"CrjmLO0b4f1mBP"('>]4u&X+Gh,lj6No9Gmru1J`YDC.aYW
%)"*7APrc\/25rbL)R&D;R^$G8s6TE6jp*]'>j?Fcj?FVVgN0!"_q3\#,Jcih5G4%h]6Bs75RHU\4;,7kk-Ys7nTHg-G"[RIB".qO
%c+'FEq=o+=^i[Je#j+X0REA4J8ZGrj#U(/)Ia)Z47'Qc]\0,c@APG6i^6f3a8d<^?gJ06iGcQ(3$NuCZ-%ecl,hoUSo:hfqOrV1-
%E`Vb`a0*aI1e$!#SsZ)[pFH.ULkm6??P!YQqh@7Z,PnoYT-t+o4P_#_+=(#k:V>RM4HJRRU'u2u11F91Sg%o9Q,arH_$U,tC/,!Z
%'&\n=].&=T:'a5"\*;SE*6"1LQF>\-<lBV8KI.s'.+RPT\>N34h3am6Q4:mlpO5CO.8i=>@pnIdO;WUSpe5:Q,=JB:(Ur>B%=AoC
%RN,.tY'H[F<n_YV<iGiq)D_</H_\X@Bg]FD!Mj":Y;E*q1Tm=2[F!+af=cY4Z3^263_*&K=['SeqZabA4K'NT$@=BXe'M*:5G>G3
%K)"RE+BN\<5@%?O'J@8l?0LSXI<a(*Q1UX>%AA#@Y)jQ%$is_6LH,-V6/d"ipSeB3'&%Kt(-BUD*`8TC(2o#q`(.XA);=ogHb#oT
%[oK`F<XSd-#6EB>(>]bLR^>=>;s9\Fi9,U99kB(kq:3_%j$ZU%B6tQI0#)8l'QC1_JIf/sMS.eGfseR36_h3Q38Pd^Fo+Zg8ea>C
%L1B[)2ufQF)_TqaT6k:4qeFnEl2>h145im(!Jm,KqXi9AFRR`B!C.>8mu4,pm/]6N\1:<RgS'uiW''OSR2^*2f3WFg@JJ`Sqc%j4
%<pNuQNc%5^$F*%n.Cl.^pBYLsW4o,++h54T_@8^%+U&jRTRg`n/.ccWL&,><2O-'2UV>sS?]J(jl%)iWIa]6\MLd91,R&A4B(1^[
%L$7+Lg[No^kap;kQZ.X--&d6^D9t2o2UlC$p,&DRc\))UbCo*;J!;?j?Xd%SM"`EW9Fu(9GRY<=%9N2d$+;Z6?6,A?h[AFq&>o?-
%"bsm0$[fYcFFWlQ"$V-$JZi=oe]R]bpFCQ=_`:*Pd6*<gVm!/;/UD]ZD2\A&F`1LHo%UdRV>!Q/6mpe(a+rmXf]OT.VY=G:dZ"rk
%%!rZ%s(la4k8*j\6\jKkQVR#bkSChDlaaG^m(^QTKPjG)r'te9Y)kg9TSO&pZ.BFPqQ3W6_p?d*kZ7[Y>Nk-.g=ES-IRT%Eb[nFn
%dAJ?SXp16Loc\Zrg@M6>PFirdKr`%9e,'m92Q,:_qf+.AI_k-TG>5;RiWn]HJEN!'4at9T/-VK[$WD7MII':o)M'[T]c(U=VhcDm
%r76cHU,*ar#ias$nGD-K4.ir(J*i/akT!;`?a!JB8&I[n*>TcnGfk)Wqth&\SL;:MapA9Uh/#98aF6arPE/Or^A$k"aM;cn&;@Jr
%MN;F+=+84&;WB!#1aFj5Ubc;:,P3sN?]Af=5Js0IV6W=$KC#FnN]>FgJrT=iO4E)`"PMJZF$ALl]T@+=d[0kT\ijG:c!/Nr)i2?r
%_R8oD1t^T8#:aY9cicnTr\3p2d;>+3O.PZlnFN[p"Pe5>[;Q55k+)C](Eh!aBS/Po1f[6GY[$jrA/&D>*kG%FT+$?7H`]O8?pk17
%D(%_06e2fD0G^@jn-7=<N3f3&5(mW<=[-,#k^:qcfh:5r_1k@BTu6VKHQ$^t[9_X(d$pKKCU\b;IY0lQq.&<0D>K0M,G4HPaMYBB
%O4-aSa]gf@3;HAqGG23A']D2!"oAu$dIRZOiHN20%WqYQmsFfQ*mFM-WPq1Ab?-?1a*PTc\ijJ72kMfd.nO'TZfFfCL>#Io=E,C3
%]qU=I@j2:+0rInPI&g^R!`(+M?-nMXFr3i2(2JY)g;*(j:pQZMJ%M\RLL#@<F?S4;r;q;a;+KF$KZaVKn2p6u$l`aEKl9.PYPIJf
%?(\X`iQ^jk^ZTCB0-CHURnu%V=X;mi'8sDoLbc^f;p6s%gJTIL!>o_uPi"3"nh?`c/1%8u#-dKMX]l:Io2e(U0:P<b>7>QF&E-Um
%OdT0J3OY?VW-ZHER.Or_M9;0Z7"NS7N2W&a,Yc<<dU/KcKrTtkj+DT%KX)gI_%U[j`G3g.A>,-^M+&SkPip0uFb6S&qjB;TPFMs<
%g'!+lg!5`h>Tm:V'kJ::-DEQD#V%t1!Qpu\c_V,>Wj,G<BHY*j$Xs=OS$)]iB/-?gNEUe#Y8F!HPead_2@Ni@WC?sl=#f!hqO]*@
%`9+tn\LS9?qsUucM@85`l?uDSCfX0,"edpp_r/PrLXh%a!AT2q=KjBZ';1!`@tJSHZ>at]ckDBE_.B@ZBISS#=[C`Ia>4gI/9AH%
%@7(,@Yq<"7o%25[)df]gLY!U_&C-#TDR$[S1+R:dN&73(`kK0:U"<?8(*n4Te2JCggN,;ZHnu=O^]1a9DOU0rh*:<PaE5m$G=TJ#
%Bae,e7Z-i$fBCj0+%@p+4n!(5m![^;9B/3[`8+#Sk=,90dC4=(>U$I]g+M9?QCOXB:ABUM&h"Q'=$kQ6h-a-fp<?J^0teF?_).ci
%_KZ7oLOqm/mDJmR/S`N-5_NEZ=b3?@i$NNF\%HFi)EHGR9tN/^2rc11oc'360Z\j<WDNJh(._ST#uZ7!AV4FmriY;B6jq(lAg(TC
%ju:[%Wg4<8>[E0l2%&VS<62,1-u*B`&$".gN)SE%p&.Q_(\Cb*^_.@Yb'n3527OjUF'A6gpBC.s5BZ<'6@/XbkoQ46ZIg3^X0)-c
%_iMO:7nW;P,n@4D[jXnPP1M4&='k-5[BBV\<X6Qo.W-HPE'\Q-K[+Zgm!)17gP5EI"p^!e1hcmqWi"s785)m"F@t]PN0T9d$RY3l
%b#TJC>fHaVb=$eS!p9OFDK604R160^e,%]hrFqXUDa$DMHcMp@9pC1-Ad+/<C=8p)1b@+[QdoY'6W]5:GQV?9;4;8,ob0nCq,GI%
%QX]GsB[uBLD(KFiJ*PZ>*I-8D09a0?NHUbj9Z#$t6ro's@_3'7OBtJJfX]CZY;<n9,tZ]0:)%Ip+mLN`WeM3l&inRV.-1o*0GR)3
%/jRl,VLBB0f5RggQ6^VVNQLX(IAf3d@=9_:aYI)oSnnfkHcqnI+NUr%b<fdsc)PW>:eJ]e$DlG9ip[)"9r)#BEcPrV$.akBV[Noj
%H4CoS?5G75\l.eGpVRi$7>XhY<]1*8dWn;#^-JN'Ha"hA=qp]?2gtSRMq2Megi9lt.=g`GY(R@368_&e/J;2QS?tVXWs`@m>X2G=
%'Vgo[KE=!<jQP+^;K3s/K;&QMd9s5R)W!n3-j_SI#EtFZ70,-VBpLi]$5Q:rbJR/q-I']D#>2lX4.C/?R*`f?jPf"FHlCWL(U5k^
%i[Zo`fT/o=e'Am%Yn]=e0LD1I6E/\$"X4dO[!F]Mn=j)c]A6p0@[J=:pIolO"eu4Zn76+NE#4(]KCN9_U,DM=A&!9PIK!&,ZgV5V
%[+sOZ[AFGhDP2ESH.o<4;+=1MTs4i>#oa'RfJV"Y&o$t=+B#>;3>raq7>$ld4pj^BLBQ"L&JllNkfq<u>o!O8\QGlZDVcEJq&TZQ
%F:TZPi@6UN)Hh0$$tU>'e^g2M22Q+Hk)?Vb8,7lQ[GTY,\0:Gp=hLEUet-[c+(kE.nZTed-eLdugn6SH*EmC!;4Qe%?-0`MQpUe_
%>CR@#oiK=@JqYdQ[Y8;qNOS&pbC""`#[ff(*b_EP+%[QNK^A&:>KMTq(a4A/6>'+\efHDT+!@GL&!Ujf:`-):0p**(AdU<&.H)#8
%g/g5[1o%5sZ_j=?ZopEpg"[F%e4oMif#lLue5R$AK!hoY:n?NdY*I46+kdk$:]aV4<B+Jb\/CCqQ[kflCl_@:VcD/?)hCo:5`R/9
%O_E(0>so@>B=U;TUi5T2,qafr>JUK)&cqlWm+/X!\d0Hb0d[KO9:uk!2D]a%o2:HU^G!2=g6YaL-G+,d1F-V64$',70\Rs.^odP9
%MK(B,8XEn\luk^)a\^X!I.'\+:2&e\=LN1Jj&\Y*ItF0AiTs5?JJku/ZSUW!7#dbb1JUa++<&bgM0^cF-bmdoA*YsJo$.UEROZBB
%.i2!>%a[r>**G[?9[29iY7Sh56d[<OUfbD/TJ8mY:#GqXKD]Lt70uMYPATOTg7$1Uje/X,#YTh'$%>tknC!F,KZP0Q[p3_S8q=u&
%E$1bl-mV<<O=^a"DJTT4ksb!h$IUZMFcr'6SVJ?"aL&7X'ME<U/YP3A0kIc/0e9h"jQ&cc2hMN/\+)7#lK'5@PPCR7EtB@&$XiL=
%f&J'I7#<,FL*E;t+ELATNh):`/Qd!1]Eo'4#*r<^NfsA9?*GahRaLi\)NoSe?Op[2\q&uJhd1T,\EV`im?)nk9I__"1K,B^.\>h\
%L!Ho+OQhj71M2e\h'_\E"T4Pi#CPE4^r#+&dka@35Ht-`I>^o>)e)7HQ>%<I)T9K20[(+s`4(<bntNt7fBa5BeW4jJ1&7U[($gWO
%e*>e4PX]=\)f@!4##$L-F^%G*&-HhVdu>:%AfGU'eAi`TI>UU3@rr".2h3^t!+j?;#Lj/?7Jf9AA4F4@>7@0=^pM<*D6A6.Wp,FR
%RA((A^:!@_:#CEmq"o>s7Np>te,\njG&a6-\%7oa9N*#IGmMEb)n>*u;?NmOD9tR:F!O8frN<!p#Z\>Fe&B2Hp8J'SP_k$Spb&5p
%<*!_&#W:N(n\NIb*&GXf\MXU4:loS10&ZGm3\1rhlr(LEb07rl_^#K$(?%1-IcVq>U;fSpmZu4uNW^kI(PE%Cm/2j,I<@;2rW/sQ
%@_;</4U=mWNHrMXh/G?#[E?R07"OfLhq5O,OOpZ6dAZqZWEO7eU,c,+,Z(IaTlWV+Od"#Hdure>=p<Xa]FQD*b?g]V?"?K-SW9H7
%#he.(k[>[17>K;r7J$@aRO[%2FDD!Nm0LfV$E-BL:%`WC(j=4cWfE6q[#9qo9=PaDh_I])(42VK8CEGD-,"pN8TkVN0_sNjot+2E
%V.(3FGo3*s#d)Ll=^bm2":Zce)Y?Dogqef/:2%7sY_,%.kfJcD/7g?#Kunc<]:h<;Vp>86dIS%I>s@@X_Gd4Q7Usd5lH*`[_9`XC
%Z4oK-4iNDs+i!EBMUD7;'Ct;DmM"-no<cM)L,j%=>!G]pr?AZ^*L!2I.^S!ZhuPlG\2UKK@EGB-ls@2F),"(tB>j)GR.H:"`Dpd/
%OsVG*Z1t\:.944=3\CZ`9@<uL/kOA2DO70@9e5BQWBiGm!XJMo6\fV?*0WrrmJ=a%@r!C3q:a1/_S;>J35A.RlNX%6K$!7GGlBD6
%:F;S2H3'9a&Rf21)I#9(NH4]fPZmPR@>`pLgi`tFd1JMG*fU!IR$@9.-r"6m0iqZuh`83b=$,J7c,k_skY9*Q<1G!dE"Q'@2cJH:
%I3-OLTCkT5gQ6V1=>fG)A*.#A3uQ#+5<=J#7))T)aH>$7)g29V4\D%mN0Q(UBT9@Hp)e/`mo]9,C5>T`Q9>^M57<bX0N1d*iu)tq
%p$O0jm7b6^ni$ror<dSSe3#BT\(uHg/oF2*m4c-iO*@AmIX'IeS:F77MO[_H::E;Oq"85Y]mV@N"JW49F%G>1(5=G\2`+;*Ye<Z8
%ldup*LT!Grp%Gr>X77`l!A\^QiRDI",T$<'6(s<:gVZ*;5dr+g<X/nb;Oqk%b20ktK504l_EtdMTQ:c0G6p\DoQJ??"mS$!kiLM1
%L47o@npC0<K][;o2#pmUPc?@rC%qOM*r>3XOS(=][uGJOaru8cVu.cs[I;+sK1S)lBG:,49L[.D%=4Y!g.4oF=?#G<P#t4-VYu:k
%=>C_S\/r+Fp>._7Ii+%V"!g.?a5QYn.%7^'ld2,3=KI,?LZ`<Oa$"q@gS<*`B<A\#%W&`"BX1[Q)qq:5"gjZR*@u2^$LVC0'e`e8
%j%3o>?Wjso&MalL-Bkt_fuol1mVc,alIZT[D[8_Wa?Ihb3g"'.\rh'fP"[W=mlf()K%Zh7Z_1eVn&>HVDc+.T%gYVmXa-:BJ?D4l
%H8(7lhs+Iul&KB4lOS:!]Da:J-U#ihljs07c3"^HF3gS&^jYb)3ocjB4+/u.fjr+l-arBU;)k*YEc7ph>Dp:Yr!6/d`7p-sHMEH=
%'.hZSR'Ps,<nU.1mplK[kH@F/?QRD=1pER=*!Or;1q2U#?OBKWmS&efR"SqTlNI'@&IRr9'shUsUA)pu-u&G3#=K9L-R;n&SUu/j
%ALYO>b744N'$AlJO,!=VM14feou1R$(ZgKsT6F-g9(O[G"'CCqYijg>fT+8,6ud^SfV;0*&ZmU4Q[GOK2E6;S@;=T=]ar+!)!SE*
%,dSaPaXJ$"]&rfGf:]u;UAK`AC^&TK-b:jA[ic+4$]1m8FD6>+$N@@n&?5naP[qd2fGn6t;Aq-/J]8a*1!_l)9"Eg4L)U.?L8pM=
%Jnl9tVMuaF:eaH"2jEA.q99n'9J<cadA+nufCN%bA&+%Af2p>0>u3JSmb)oCG.4SfTFl2Tm?qatmtg,m0]4VDn$T@bC=Cc^[(4]F
%"g&,MGsn8Z/ojA(q19)*(Sj?_e@S,++,gr)lP3TegiLr\hTaH'G!&*tfj2Zm;/[=hg*I)5j5[7`oB.Ok'BR"<A\WlVn9#7q#nK$<
%k+T:@_m&5Nc#1#8]GoFNd-Y/MKWo'2V1oLW?Ddg=OVUB!+BR=8\m8VY)6p:0e6MHcF8uVTNXS6#;F(W%@%+8/XnPTD])2;V+XuZG
%ZM>9`A4^H*n06>YqkfO>#q),,Xec_A'Qb6;A8qlXAp8T;RE[j_\0"PCLs'-a.i&`aLX^,Y`F%r5JicZ>[EWH)j^idJqMSb=E6sm2
%788IHf'6ihgJ'C-*gTg0m<5t$jZ$^,[^g."T>!UX.aVrAqUfVb:f>b^6k.IWbK.LDh85\>%5Ktf;Du;"7kMV/=LK]sNK2&=$A3;/
%MT1ml.,W,dNq'i#f3-9Vnr1f`m1HXHfQXU'o?c3`RW50L]YsN2DFB<tZo:\H7g<LoVrM.N>(ZGf,oYb(<L01qL1LNXT1s=^d<s.B
%0d>C:<9qP;@cDKND"]q3FpXScAsU[DZH+1iHNF'd=nY+E%l9e2#aK'JZj4]HLH9gm>L#1%/c&.Lm=5Ul(_'c(qO2U[bk5#Y[:"Gm
%*u@m^IAnLV@S>+%ZTTR`X0#7/h.lY@f$/]`*ju,uYo6W/k<Bo^_L5\V3KlPen:$9i4KYR>GjJ_``#[B:c*!o]CIQ<,!h1g*D3Bn>
%ASHq763Fj6T]j\2]sP,Iqsa-]>;,7'm$De$.a)Um:4eAD;$Ge!D*PJ$-l_Xn%5D/&YPYn\H/^$\q[]/F$Tt)Wee=Ulhd[:2>O*>D
%3?MWr^$FO6cuNLS[>9.PDs0/N]VhNO.`Kf9osAcE?K;dj/%$!Q$UI`q2kdr_bdr6_a(9S=45!9P`K5u:aS0C-ZrQI6DCF:PT6!Bf
%,\r/1eK@ph%=`TbZXj20[u3a.pc=6WFq,k\XFP`G]r/uiOuU1\^I8nTHVlqX7-ke"J'M,j`c,,E+gWe*fr"W9]Tc*P4u[Oo,',#?
%2a]mI8lk-;"PC.r=PAOW=mP"6Q691l=1/k2a_c79n8u:OMRoq(6?M@t)L'Zbi#\lTfe$,Z<^eFj.5B>Z5$!MWGRT1>OJ#uo_Q9/b
%\eR:k'i7i4Z+)b3dYT%JAVs!p1m^mJ</gdAcDciTl6fY2?8f2Q8;3dVBsHAT)T*(,H3mVJ-BUPFQA8G2#+7>+b8\Dj8"4)nkNRC6
%0I)K8Eb'lA?3p0*ZB$mo%c\tC?4pa)o6/$6-->^p:(8G&Es\FME8\;YRNn#Be_snG:%1hYjoLP^\RFGhnk*Y1qp==<X_<oTga70.
%?oT\dfh>eI&$naKfFWIk__+l9)SmGp];8$2&M2T@+\cX?*J;h#:tOAuBeP9'9-,nC&"D<q7dKau?AI6]Nt4"7_l,@GChHhuD)qpn
%C.==t?K^9Jq]idh2%QTn;0B>#MgXf$'fFDGZj[\?8JA6Wn[U'\iZYlAn#UQ7e3o]S8n;NVDUF1G^!Vuaiqd]5oC[4D"55q47iFM8
%pBe'<gMj?dlfCc2h8>5f([3h',j")qUis;@cu`V+"W',ionl3ZKRd)_;Rh_od=8kmf"gGbrGo)@rU[&8QT%<DlTRUh,2&sm"HS&J
%\LA80:3L3f-oFQ"8pqCt:(//\&3Ng>am7cPrLW$?ZJ3`K&i&7XlFn1_<ONCCj#SdT@,'j3h3e2bmAk,arh&GLkBj/nmF2oo]3TpA
%U\k#1mJYTPot]%1bPR(F\?GIL^b'f5n3^Du2c->*8G2#d._(l?)F$XW!O$]C?2&(u0=ee4LTR9ufZbe4lUZ.KeIL"n#^\i&\n+^P
%5!d;mT2/hno"jKO=6R2GJ"&@AkB4Hd)o?]'cif+Bf)#Wir/Gj1/<Y%4?Vq*00cQ=O8>LNIXV?"UON^E8#RSO6/+#\%mB8U/1]s=1
%HNOj.G#7Psbq!qQ=iCQ<1BIt0AOk,ecm`H#XG%isGj8gbrfS:"Ab\Lq0D0d3bB4m9604iI'9i[Ir0D]DL:F"':._T/k@d93]V4C;
%0T%!>n:EWlU5Vc-$Jqt6b'Fsoe13N'q:Z"clr@<SlNMttH$>Cqon3\[O]SA_1)+Y.g,>cP\KG+a*R*k"I.;Lu,fj3OQ^k0hd*&h.
%%=Pp,mkr^90Do2VnTTK3p8R]O+$RYHQs[CqNE7Fi.RW-9'VA/LH$9rPHdPuk4!ZRT"_8)i#OtrYA$4$"$"l!2oK\"sM0u6TYO(2g
%lbMRj4q:pnK5E;Hgh!W3X]`&j1X&K*AN+?&%Z5TrIGM5&aFF4.R;+)0,@Lj;f,)P.1JInr16G'Xjl(C(VXH09*%nf?hPN>1l09:c
%e'XdYLO>Udde9!ahnJsi[dj09\+6p)n<K86:J(3fM+ZhV1mBNL(\M?K-M<)`.kr;`l&E264PC!4jJ]^&hS8[Hj^5#%E\m^IKi;1*
%OP`84]9pp+S"Kcj5p8c+L]lt`7&%fI(cr5`N%@276i"8Pp=!"actQlarH`'-5g8`S^YK=qQeNur"URCXNj/Z.7ls+"M8*C`n;Ll&
%6_RJ!T:mqXbI;O3=jWWI@C\7u+4>D;,Y%d?%FSH`e3W093a+^s4.h7^@ee?bHPuH&!EE0=qji5Sq6[&<Fe?\"$N20CQ:[\@i9V)`
%%OS]jZg'[h)`<lBgDeN_[_tRb*CWVCajKt62FK4+k'&LEK0Fb=*u:YJ[_L@c2t6sQhYQ4,%K<l8DgcZXq=L=BM9t6s+1&Xb2KR2l
%2UpF9");&hagp!'DX-k'ko694;4I-GbW+47)I#8=fAE!`4VPsTGk4L/2@FFHkJN(,Ms%VcIX:PQs4qi!jQ0@dTWLG=2JgleP5-.U
%W\Im+DpZ6jk>[9J(Ac?db(EQfB5udSX!b@<G^fN[L[1RUD.JA&>rRP=Jc>(NEtj71:j!%X2La$a[8(enKBY-HX/R47s24eDL>i"s
%ZRH8C=F>V6'=g=](.nD@&/<%Or?:EO)%G/^DB7DJi%GcZRE[=Y.$c++;hZ[$&=MG:J0(\,_(<#k3]NF?;Q@P![)eLA-Uohj`VHNH
%$A"Ymbk`JO#QSGrJaf7fH&$!n#h#3b3f7?P&q=#kaQ'QO#W[.<jW%f'fG@8^5Ykm$Fojs-`;\,]-/@2TC4Vdn&Ph6F(Q?aBPd$Xk
%cEZkS,N>o[Ud6m&B(':D_3hm/82DW@+d!!6:-4<aSFDW[!+Q[T*l"qJ<(XQ=4BH)8V6#i+V^C.T#<+-D9k=d4"r@651%,>r6XPOZ
%?.^6qB>@rN,0Q3o;HRCtZGIT.U$]<O;nRr\jfg4o!<e4=,0WQVVe+Taq#/<FFLbM":<A%@/>U-CaAK;+KR,8:UZ;=('f@H4=2tE?
%"@i]jb:426HJPP_&fel,LP(?O`&=8WgO:!mAI!==_.nUX#F,bP7bNVRp1p[WPUB(D2:q[bEdBjoi-Vg^@1j8#b6c(ACsg.nU=JW:
%8O9+1l^t3G.,5b-i0:3ufr.dl;N$:m2N_E9V1tm]k:nI&0kW"pFuCO5=pt6(;%S'mD!9Dp*)@fUZ@`UD%f]g"D.U$6!r&G\Z(k5i
%W2aj:)t\J]BYk85I[9'Z[7\>r<.[!d(_0)OE3lo8+3HcgUjZk2mqNR`HbXN>[$A99JjL[/!dtJq.\$rmINPQaWc(J"(alj0rmoB=
%2GImIYoP['o!9Wt_"W84d![%n"*qW%Hb8E%"PiB^^?+J#'CuCl3=b>Q%3%lN8(0AVAM'_fIFSJc'H:<@G1)/#pBB3n1Y=Fn-c90N
%R16R@9"pG^(Hb^djcal.@nT90f0Et<%B<p$FY_?dS4"dh)Cj2'EJc3cA4:+P`"oCIp.B-#d2u6J0Ve^W>ao^:&<B#Y;#+!75Z!E_
%0kW!4\Qakb`UOV_d#B0NmLT.sH%g!!FiUt4nHV$**CU.8_[B,A/%pM<#V<_H)aZ^C(Y7nSI-aH]K0N=+`XHntD\tSA1:E*E3@7f1
%Q8Z>b7dql.EthF;(e2$mcmL@)=7pB&:)N$c)!EA,>b?[PPDH=0q'tQ4K$ga[Me5jEIi_n?7nN._oZR%9^NUGFV[KotH9Nn3G.uq)
%qfC*VY\nA-5pE-.ZY'E?F+Gps92aAa!*W,XeDRXZPLmC<680ft?qKL,ggJ\m&9e^_KE@;&J\/HAQj"M/X*';U-@[\>.DIN=]o!dT
%fj$u(14dj">sa*_J9k=&!Xp5PNDfN8V;at@5+DAUUnFegf^.FTPs.H,-YBMJaL-6iI8nXtFF2(I$h1N^k,Lj1JQIHRS3K.s>K*$i
%/R;c).tPbZ#_$;S>9YYuH0QB.-Ar94m)@c:NgV]j@4m!7=j^3@5_]n5-jNjN#pi.(Mcd_BB1f43.AgV#fKf<D9rs@/cXT:Y8<E]`
%1?+]lB[A&aC2M\VNLnoV32^Y_9G;p_O/coi2n0'j'9:bgT66tUW9-K6KF2pGl0'rnRMMNZlC:o6Z(<[mZh/uUAJ@LK*p_DbbY[-<
%RJHq:Ih7YCp8*Gl%<XiAi+fUI*PZ%S'SWL0?u@nt]cZWuSO7^^Lj9t1=8]q-NG/E1$m8r2n[-=Yj.A0'_Mqg*;s=(QmsletY,H>:
%DX`+/HH]!H#r"n_^.G"1mumf"1n&DlX'NR-Cqps*-0dZH'V`O<71#(ta9:lkOJ#-lFCOh'1,1('3l%kKlr%m2a3J"I7,?ceB<)M\
%B6b,FeNLr].;EZRCW]Zf:,QIn0K*tV:'c`%2,KHH8TX&$oX/UoD.3?$<EG<fQmKd-;951bTm1]mWX^@[oPhbqZ,LS)C`_BbRCYZt
%V^&Xn*BTG&^]@Vd5aGY*M8$T6;bd]fXdCVaCs>IRp/I[)Z5)b07Crb!N8Wn:O#=G^.3)74nWI/9"bt:G/d6stEfqO2pc5ssk!RUg
%@rEV[o!H*Y]Fj6F$F&N7Qn:jZ_Al,HBS%I7^JR;/:$-l^d4^b>*@C;Qi3$@`V1t8P6df-<Aro.]"KMS@>H#ZqqdU*9C$l\Vfqa3G
%])"72U?ZjpEGR[l\Yt<TnZAgOl/cZ%fa`JXX2*d^7@XkuqX0q,3=ip`nP#0l(0J_$G;o^V$-[NoG]lA`<1Ub2\Gur)7'R\M9!c`u
%BXnsS#8eM!FkH8:$^5(,U/,UC[:N/tOPF!_8(k_sc$?=pAWIlhJ\*(l7[pa/1P&EK!_6AajI8aF$.T,HW"6ni/:piY3L*D^!7W,+
%$i7'7E&2F[>tgV);gW^@`?R:!.,Y1>Pn+EpMklb['%GK;aM\DMJM[NMD$79*/#lYTZP/.r%Sfht0ZXFt,cC^@plR:1]MT#/c;:c=
%RGu<0:`FeVP<$C?TjfV)]ob*MjSKglUuVXnRp^B26P*2u*d1>6g6`,f*$:`F!gLm;1K87i`I::2g+:V7_GC:,i?<VYW5OQTNuCA3
%(lVFWU%3KNUB\P2q4$UZ1PSN+3Gl08qXOukVuZdO^=r/TrK5B%d;lPiC^_$fgtco#)(NGgWC=m)TnfJpaVcQCZB?BV:uPe;LJ^i[
%VuWTj![0pJfL1@MIhb/+l80<3MQn\#m0o6^/"90h.4Rf_e2]FEMKnZ_QTtCFD/B*kh9eMd%rs@gg2S@:X_L#1OAsR4'*gU5C9't-
%E7.].d=[apf-4L[9+sB]AZFs%+[o.)RF`cf0TOW3[eSWI;u+UO]=cTl^./EYPGbjh0T6B8jekXHe9EI*BWQkL'dR`FA$3Nb2VK#&
%\!*_uC(a$3;piInn_@e-Lo5iTS>N#VCGFg@RYj,_Q(.NDWD%7aH=lJ!S<t"\Bf,J_MKEerRYl=\Jq)1t7StN3b\/K3KCs&:do=8j
%(ToPh;^%?*h*oJ#.R-/a4LN"KhX,%&;aL6oF5T0Gfq3NsFeXbF&eNiS.R;hQ4&Ns9NRo+HD)B8$4-pU\FG!>0:/je\Va]4$W']WA
%`e9PS*a"aV[1h(KI-GaI$7+8[E1VrAmUCfWFc[[\NMrH1:7_g:VTHqY$0DJaH3J]t6ki*KC'gKS?O\6_jJi&KoSI'?ohs(\.`"Pn
%kGh/Jk;c7*_c^[.8Q,XJQd7!Q76A\$g1`$kRd"OX4;D.u0shPC2V4+'7$T"F@kpVT)u5qBdPWmJZ'rcEPGgBmQ"mEWU5H*R3;l<G
%dC[4il/\M%UC/-3"BpR[j(9JpGq'SemQ/nZWBIcQ_g*`O7!"n^kGch0ZR?^OWE=j@WkRa?;ZMX<[%BGqBb4dZI=O_NM%P1%!Di+4
%VtTN"GUgMmlM]",!Lh="a\rLlL+MMeI#4%gkG\GS[4$=`WE`/u.ij/<!m.#mJijcBdZ'>J:$m%EEF[bn/EV,"`EggtoSMfOS3.N1
%QK8O%e2XLL+`X665o,1]F?*389K[4ZPsc?9k-OkqPG^`TaEIQHVd_M9gmt"6@c^0.,t+1/2@ps4lFG)"97:EI^O/(l>r-c)=_4:O
%5;>^C,jb(*T"5SQ_MD2RcE#"NI1YVV+fMSslWLDMcX4DJIn,cis7!RWjfK_>!d-&RnM,*/B4=R23[`uTC#:?&0^U)o3bT#!PcC7L
%UNY8LZRC1^?]X\%36cD+&\nHf+A2=3&=#$_/neg0W+5S=beAU5QZC:P75c8+&putrg/^a]$f/l;,Rl_"W"c-Lk6;u'K,QcaX=OqR
%3Jkm>\;E78gBgi]TPm?*KdESW?-e(,*7p\Q\qT?(UF:bIY65_moNgbAa3q1qK.>s7(cK<e`^aP&m,Y:rc9Zc/YoApOQWW-2+@V^.
%XLF"]*I2-\aaEG>CZJ;1#oUP:KtbRM:q!N;=aE'/OO^L1JYCiF"7<0d/W'A/ICU<?k510116C67>5p;DqYT.L%\it8C*A]j"6#S8
%!Ih%#@=?snD$6A:f<VqMC2!FuhDj)<MMS#YN@+f_"JDJ#\qH]S8W)&aL?HFS^geu\J!=iHrpE#NjK6qts*atJg](.Nn,N/9s7lGG
%s7+,oJ,artJ,=`piLg,EJ,T0Rs6i2Pn^"uIRt(:d5Q'7X^]!+urWTQ#J,K>,s7G]NrqsfdrGV`/c[YldYQ)purVqGAcmnOoJ,:>f
%iBR;/DuM+?m0%S~>
%AI9_PrivateDataEnd
